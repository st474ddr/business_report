/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_summernote_dist_summernote_js"],{

/***/ "../node_modules/jQuery/dist/jquery.js":
/*!*********************************************!*\
  !*** ../node_modules/jQuery/dist/jquery.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n(function (global, factory) {\n  \"use strict\";\n\n  if ( true && typeof module.exports === \"object\") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require(\"jquery\")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  \"use strict\";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns \"function\" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\" && typeof obj.item !== \"function\";\n  };\n\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement(\"script\");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don't support the \"nonce\" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + \"\";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return typeof obj === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj;\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n\n  var version = \"3.6.0\",\n      // Define a local copy of jQuery\n  jQuery = function (selector, context) {\n    // The jQuery object is actually just the init constructor 'enhanced'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function () {\n      return slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function (num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function (elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function (callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function (callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function () {\n      return this.pushStack(slice.apply(this, arguments));\n    },\n    first: function () {\n      return this.eq(0);\n    },\n    last: function () {\n      return this.eq(-1);\n    },\n    even: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function (i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function () {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === \"boolean\") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (typeof target !== \"object\" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === \"__proto__\" || target === copy) {\n            continue;\n          } // Recurse if we're merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function (msg) {\n      throw new Error(msg);\n    },\n    noop: function () {},\n    isPlainObject: function (obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== \"[object Object]\") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n      return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function (obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function (code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function (obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function (arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function (elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function (first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function (elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function (elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === \"function\") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (_i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn't used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && \"length\" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.6\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2021-02-16\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = \"sizzle\" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        nonnativeSelectorCache = createCache(),\n        sortOrder = function (a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        pushNative = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it's faster than native\n    // https://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function (list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" + \"ismap|loop|multiple|open|readonly|required|scoped\",\n        // Regular expressions\n    // http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace + // Operator (capture 2)\n    \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5]\n    // or strings [capture 3 or capture 4]\"\n    \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n        pseudos = \":(\" + identifier + \")(?:\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" + // 2. simple (capture 6)\n    \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\n    \".*\" + \")\\\\)|)\",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n        rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n        rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n        rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n        rdescend = new RegExp(whitespace + \"|>\"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n        matchExpr = {\n      \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n      \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n      \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n      \"ATTR\": new RegExp(\"^\" + attributes),\n      \"PSEUDO\": new RegExp(\"^\" + pseudos),\n      \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n      \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        rhtml = /HTML$/i,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        // CSS escapes\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\"),\n        funescape = function (escape, nonHex) {\n      var high = \"0x\" + escape.slice(1) - 0x10000;\n      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence\n      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point\n      // Support: IE <=11+\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\n      // surrogate pair\n      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // CSS string/identifier serialization\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\n    rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        fcssescape = function (ch, asCodePoint) {\n      if (asCodePoint) {\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n        if (ch === \"\\0\") {\n          return \"\\uFFFD\";\n        } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n        return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n      } // Other potentially-special ASCII characters get backslash-escaped\n\n\n      return \"\\\\\" + ch;\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE\n    unloadHandler = function () {\n      setDocument();\n    },\n        inDisabledFieldset = addCombinator(function (elem) {\n      return elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    }); // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can't trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var m,\n          i,\n          elem,\n          nid,\n          match,\n          groups,\n          newSelector,\n          newContext = context && context.ownerDocument,\n          // nodeType defaults to 9, since context defaults to document\n      nodeType = context ? context.nodeType : 9;\n      results = results || []; // Return early from calls with invalid selector or context\n\n      if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n          // (excepting DocumentFragment context, where the methods don't exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                } // Element context\n\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } // Type selector\n\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results; // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          } // Take advantage of querySelectorAll\n\n\n          if (support.qsa && !nonnativeSelectorCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\n          // Exclude object elements\n          nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\")) {\n            newSelector = selector;\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n\n            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser\n              // supports it & if we're not changing the context.\n\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute(\"id\")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute(\"id\", nid = expando);\n                }\n              } // Prefix every selector in the list\n\n\n              groups = tokenize(selector);\n              i = groups.length;\n\n              while (i--) {\n                groups[i] = (nid ? \"#\" + nid : \":scope\") + \" \" + toSelector(groups[i]);\n              }\n\n              newSelector = groups.join(\",\");\n            }\n\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute(\"id\");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + \" \") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + \" \"] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n\n\n    function assert(fn) {\n      var el = document.createElement(\"fieldset\");\n\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // release memory in IE\n\n\n        el = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split(\"|\"),\n          i = arr.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === \"input\" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === \"input\" || name === \"button\") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n\n\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if (\"form\" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a \"form\" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if (\"label\" in elem) {\n              if (\"label\" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            } // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n\n          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n          // even exist on them, let alone have a boolean value.\n        } else if (\"label\" in elem) {\n          return elem.disabled === disabled;\n        } // Remaining elements are neither :enabled nor :disabled\n\n\n        return false;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem && elem.namespaceURI,\n          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n\n      return !rhtml.test(namespace || docElem && docElem.nodeName || \"HTML\");\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          subWindow,\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Update global variables\n\n\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener(\"unload\", unloadHandler, false); // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent(\"onunload\", unloadHandler);\n        }\n      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don't support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it's an alias of :root there.\n\n\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement(\"div\"));\n        return typeof el.querySelectorAll !== \"undefined\" && !el.querySelectorAll(\":scope fieldset div\").length;\n      });\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (el) {\n        el.className = \"i\";\n        return !el.getAttribute(\"className\");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName(\"*\") returns only elements\n\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(\"\"));\n        return !el.getElementsByTagName(\"*\").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don't pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      }); // ID filter and find\n\n      if (support.getById) {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute(\"id\") === attrId;\n          };\n        };\n\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n            return node && node.value === attrId;\n          };\n        }; // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n\n\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var node,\n                i,\n                elems,\n                elem = context.getElementById(id);\n\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode(\"id\");\n\n              if (node && node.value === id) {\n                return [elem];\n              } // Fall back on getElementsByName\n\n\n              elems = context.getElementsByName(id);\n              i = 0;\n\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode(\"id\");\n\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n\n            return [];\n          }\n        };\n      } // Tag\n\n\n      Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== \"undefined\") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === \"*\") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input; // Select is set to empty string on purpose\n          // This is to test IE's treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n\n          docElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but \"safe\" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          } // Support: IE8\n          // Boolean attributes and \"value\" are not treated correctly\n\n\n          if (!el.querySelectorAll(\"[selected]\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n          if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n            rbuggyQSA.push(\"~=\");\n          } // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don't find elements on a `[name='']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don't seem to have the issue.\n\n\n          input = document.createElement(\"input\");\n          input.setAttribute(\"name\", \"\");\n          el.appendChild(input);\n\n          if (!el.querySelectorAll(\"[name='']\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!el.querySelectorAll(\":checked\").length) {\n            rbuggyQSA.push(\":checked\");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n\n\n          if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n            rbuggyQSA.push(\".#.+[+~]\");\n          } // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn't throw on a badly-escaped identifier.\n\n\n          el.querySelectorAll(\"\\\\\\f\");\n          rbuggyQSA.push(\"[\\\\r\\\\n\\\\f]\");\n        });\n        assert(function (el) {\n          el.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\"; // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n\n          var input = document.createElement(\"input\");\n          input.setAttribute(\"type\", \"hidden\");\n          el.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (el.querySelectorAll(\"[name=d]\").length) {\n            rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (el.querySelectorAll(\":enabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Support: IE9-11+\n          // IE's :disabled selector does not pick up the children of disabled fieldsets\n\n\n          docElem.appendChild(el).disabled = true;\n\n          if (el.querySelectorAll(\":disabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          el.querySelectorAll(\"*,:x\");\n          rbuggyQSA.push(\",.*:\");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it's possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, \"*\"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(el, \"[s!='']:x\");\n          rbuggyMatches.push(\"!=\", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n\n\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          } // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n\n\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 :\n          /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :\n        /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don't get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.escape = function (sel) {\n      return (sel + \"\").replace(rcssescape, fcssescape);\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = \"\",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === \"string\") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: true\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: true\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        \"ATTR\": function (match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n          if (match[2] === \"~=\") {\n            match[3] = \" \" + match[3] + \" \";\n          }\n\n          return match.slice(0, 4);\n        },\n        \"CHILD\": function (match) {\n          /* matches from matchExpr[\"CHILD\"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === \"nth\") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        \"PSEUDO\": function (match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr[\"CHILD\"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        \"TAG\": function (nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === \"*\" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        \"CLASS\": function (className) {\n          var pattern = classCache[className + \" \"];\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n          });\n        },\n        \"ATTR\": function (name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === \"!=\";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += \"\";\n            /* eslint-disable max-len */\n\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n            /* eslint-enable max-len */\n          };\n        },\n        \"CHILD\": function (type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== \"nth\",\n              forward = type.slice(-4) !== \"last\",\n              ofType = what === \"of-type\";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n                uniqueCache,\n                outerCache,\n                node,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType,\n                diff = false;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                } // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        \"PSEUDO\": function (pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, \"\", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        \"not\": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, \"$1\"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don't keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        \"has\": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        \"contains\": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        \"lang\": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || \"\")) {\n            Sizzle.error(\"unsupported lang: \" + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        \"target\": function (elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        \"root\": function (elem) {\n          return elem === docElem;\n        },\n        \"focus\": function (elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        \"enabled\": createDisabledPseudo(false),\n        \"disabled\": createDisabledPseudo(true),\n        \"checked\": function (elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n        },\n        \"selected\": function (elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        \"empty\": function (elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        \"parent\": function (elem) {\n          return !Expr.pseudos[\"empty\"](elem);\n        },\n        // Element/input types\n        \"header\": function (elem) {\n          return rheader.test(elem.nodeName);\n        },\n        \"input\": function (elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        \"button\": function (elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\n        },\n        \"text\": function (elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ( // Support: IE<8\n          // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n          (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n        },\n        // Position-in-collection\n        \"first\": createPositionalPseudo(function () {\n          return [0];\n        }),\n        \"last\": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        \"eq\": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + \" \"];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don't consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, \" \")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we're just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = \"\";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          skip = combinator.next,\n          key = skip || dir,\n          checkNonElements = base && key === \"parentNode\",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n\n        return false;\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            uniqueCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[\" \"],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n            })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function (seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = \"0\",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          outermostContext = context == document || context || outermost;\n        } // Add elements passing elementMatchers directly to results\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0; // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n\n            if (!context && elem.ownerDocument != document) {\n              setDocument(elem);\n              xml = !documentIsHTML;\n            }\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context || document, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n        // makes the latter nonnegative.\n\n\n        matchedCount += i; // Apply set filters to unmatched elements\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n        // no element matchers and no seed.\n        // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n        // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n        // numerically zero.\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + \" \"];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle's compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === \"function\" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren't passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property \"interpolation\"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (el) {\n      el.innerHTML = \"<a href='#'></a>\";\n      return el.firstChild.getAttribute(\"href\") === \"#\";\n    })) {\n      addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute(\"value\")\n\n\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = \"<input/>\";\n      el.firstChild.setAttribute(\"value\", \"\");\n      return el.firstChild.getAttribute(\"value\") === \"\";\n    })) {\n      addHandle(\"value\", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (el) {\n      return el.getAttribute(\"disabled\") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[\":\"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n\n  var dir = function (elem, dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n\n  var siblings = function (n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n\n  var rneedsContext = jQuery.expr.match.needsContext;\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== \"string\") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = \":not(\" + expr + \")\";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function (selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== \"string\") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function (selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function (selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function (selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n      typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === \"string\") {\n      if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function (target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function (selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== \"string\" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function (elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === \"string\") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function (selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function (elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function (elem) {\n      return dir(elem, \"parentNode\");\n    },\n    parentsUntil: function (elem, _i, until) {\n      return dir(elem, \"parentNode\", until);\n    },\n    next: function (elem) {\n      return sibling(elem, \"nextSibling\");\n    },\n    prev: function (elem) {\n      return sibling(elem, \"previousSibling\");\n    },\n    nextAll: function (elem) {\n      return dir(elem, \"nextSibling\");\n    },\n    prevAll: function (elem) {\n      return dir(elem, \"previousSibling\");\n    },\n    nextUntil: function (elem, _i, until) {\n      return dir(elem, \"nextSibling\", until);\n    },\n    prevUntil: function (elem, _i, until) {\n      return dir(elem, \"previousSibling\", until);\n    },\n    siblings: function (elem) {\n      return siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function (elem) {\n      return siblings(elem.firstChild);\n    },\n    contents: function (elem) {\n      if (elem.contentDocument != null && // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don't support it.\n\n\n      if (nodeName(elem, \"template\")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== \"Until\") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === \"string\") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    fired,\n        // Flag to prevent firing\n    locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function () {\n      // Enforce single-firing\n      locked = locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn't re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we're done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we're done firing for good\n\n      if (locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = \"\";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function () {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== \"string\") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function () {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function (fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function () {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function () {\n        locked = queue = [];\n        list = memory = \"\";\n        return this;\n      },\n      disabled: function () {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function () {\n        locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = \"\";\n        }\n\n        return this;\n      },\n      locked: function () {\n        return !!locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function (context, args) {\n        if (!locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function () {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function () {\n        return !!fired;\n      }\n    };\n\n    return self;\n  };\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function (func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          state = \"pending\",\n          promise = {\n        state: function () {\n          return state;\n        },\n        always: function () {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        \"catch\": function (fn) {\n          return promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function ()\n        /* fnDone, fnFail, fnProgress */\n        {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (_i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function (onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function () {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError(\"Thenable self-resolution\");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && ( // Support: Promises/A+ section 2.3.4\n                // https://promisesaplus.com/#point-64\n                // Only check objects and functions for thenability\n                typeof returned === \"object\" || typeof returned === \"function\") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it's otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function (obj) {\n          return obj != null ? jQuery.extend(obj, promise) : promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = \"resolved\" (i.e., fulfilled)\n            // state = \"rejected\"\n            state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      promise.promise(deferred); // Call given func if any\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function (singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = slice.call(arguments),\n          // the primary Deferred\n      primary = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function (i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\n          if (! --remaining) {\n            primary.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (primary.state() === \"pending\" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n\n      return primary.promise();\n    }\n  }); // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n    }\n  };\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  }; // The deferred used on DOM ready\n\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function (wait) {\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener(\"DOMContentLoaded\", completed);\n    window.removeEventListener(\"load\", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals \"interactive\" too soon\n\n\n  if (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener(\"DOMContentLoaded\", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener(\"load\", completed);\n  } // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it's a function\n\n\n  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === \"object\") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function (elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  }; // Matches dashed string for camelizing\n\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n  }\n\n  var acceptData = function (owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function (owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function (owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === \"string\") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function (owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function (owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the \"read\" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function (owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there's no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function (owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module's maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n  //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === \"true\") {\n      return true;\n    }\n\n    if (data === \"false\") {\n      return false;\n    }\n\n    if (data === \"null\") {\n      return null;\n    } // Only convert to a number if it doesn't change the string\n\n\n    if (data === +data + \"\") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === \"string\") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn't changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function (elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function (elem, name, data) {\n      return dataUser.access(elem, name, data);\n    },\n    removeData: function (elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function (elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function (elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function (key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf(\"data-\") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, \"hasDataAttrs\", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (typeof key === \"object\") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to \"discover\" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn't exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function (key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function (elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function (elem, type) {\n      type = type || \"fx\";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function () {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function (elem, type) {\n      var key = type + \"queueHooks\";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          dataPriv.remove(elem, [type + \"queue\", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function (type, data) {\n      var setter = 2;\n\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function (type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function (type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function (type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function () {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || \"fx\";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + \"queueHooks\");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n  var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n  var documentElement = document.documentElement;\n\n  var isAttached = function (elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function (elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  var isHiddenWithinTree = function (elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === \"none\" || elem.style.display === \"\" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, \"display\") === \"none\";\n  };\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, \"\");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, \"display\");\n    temp.parentNode.removeChild(temp);\n\n    if (display === \"none\") {\n      display = \"block\";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === \"none\") {\n          values[index] = dataPriv.get(elem, \"display\") || null;\n\n          if (!values[index]) {\n            elem.style.display = \"\";\n          }\n        }\n\n        if (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== \"none\") {\n          values[index] = \"none\"; // Remember what we're overwriting\n\n          dataPriv.set(elem, \"display\", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function () {\n      return showHide(this, true);\n    },\n    hide: function () {\n      return showHide(this);\n    },\n    toggle: function (state) {\n      if (typeof state === \"boolean\") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement(\"div\")),\n        input = document.createElement(\"input\"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute(\"type\", \"radio\");\n    input.setAttribute(\"checked\", \"checked\");\n    input.setAttribute(\"name\", \"t\");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn't clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = \"<textarea>x</textarea>\";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n\n    div.innerHTML = \"<option></option>\";\n    support.option = !!div.lastChild;\n  })(); // We have to close these tags to support XHTML (#13200)\n\n\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: IE <=9 only\n\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, \"<select multiple='multiple'>\", \"</select>\"];\n  }\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== \"undefined\") {\n      ret = context.getElementsByTagName(tag || \"*\");\n    } else if (typeof context.querySelectorAll !== \"undefined\") {\n      ret = context.querySelectorAll(tag || \"*\");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n    }\n  }\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === \"object\") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = \"\";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = \"\";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), \"script\"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || \"\")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === \"focus\");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (typeof types === \"object\") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== \"string\") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === \"string\") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function (event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function (elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Only attach events to objects that accept data\n\n      if (!acceptData(elem)) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element's event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\")\n        }, handleObjIn); // Init the event handler queue if we're the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element's handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function (elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it's no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, \"handle events\");\n      }\n    },\n    dispatch: function (nativeEvent) {\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(nativeEvent),\n          handlers = (dataPriv.get(this, \"events\") || Object.create(null))[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event's.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function (event, handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === \"click\" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don't check non-elements (#13208)\n          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = handlers[i]; // Don't conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + \" \";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function (name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function (value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function (originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            // dataPriv.set( el, \"click\", ... )\n            leverageNative(el, \"click\", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            leverageNative(el, \"click\");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we're currently inside a leveraged native-event stack\n        _default: function (event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, \"input\") && dataPriv.get(target, \"click\") || nodeName(target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function (event) {\n          // Support: Firefox 20+\n          // Firefox doesn't alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function (event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault(); // Support: Chrome 86+\n              // In Chrome, if an element having a focusout handler is blurred by\n              // clicking outside of it, it invokes the handler synchronously. If\n              // that handler calls `.remove()` on the element, the data is cleared,\n              // leaving `result` undefined. We need to guard against this.\n\n              return result && result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This \"if\" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn't have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function () {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function () {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function () {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    \"char\": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function () {\n        // Claim the first handler\n        // dataPriv.set( this, \"focus\", ... )\n        // dataPriv.set( this, \"blur\", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function () {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      // Suppress native focus or blur as it's already being fired\n      // in leverageNative.\n      _default: function () {\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function (event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn);\n    },\n    one: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn, 1);\n    },\n    off: function (types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (typeof types === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked=\"checked\" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n      return jQuery(elem).children(\"tbody\")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || \"\").slice(0, 5) === \"true/\") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute(\"type\");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n\n      if (events) {\n        dataPriv.remove(dest, \"handle events\");\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, \"script\"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || \"\").toLowerCase() !== \"module\") {\n                // Optional AJAX dependency, but won't run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute(\"nonce\")\n                  }, doc);\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, \"\"), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, \"script\"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function (html) {\n      return html;\n    },\n    clone: function (elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, \"script\");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function (elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function (selector) {\n      return remove(this, selector, true);\n    },\n    remove: function (selector) {\n      return remove(this, selector);\n    },\n    text: function (value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function () {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = \"\";\n        }\n      }\n\n      return this;\n    },\n    clone: function (dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function (value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function () {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n  var getStyles = function (elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n\n  var swap = function (elem, options, callback) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.call(elem); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var rboxStyle = new RegExp(cssExpand.join(\"|\"), \"i\");\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they're executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = \"position:absolute;left:-11111px;width:60px;\" + \"margin-top:1px;padding:0;border:0\";\n      div.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" + \"margin:auto;border:1px;padding:1px;\" + \"width:60%;top:1%\";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== \"1%\"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn't\n\n      div.style.right = \"60%\";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don't get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = \"absolute\";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableTrDimensionsVal,\n        reliableMarginLeftVal,\n        container = document.createElement(\"div\"),\n        div = document.createElement(\"div\"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = \"content-box\";\n    div.cloneNode(true).style.backgroundClip = \"\";\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n    jQuery.extend(support, {\n      boxSizingReliable: function () {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function () {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function () {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function () {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function () {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function () {\n        var table, tr, trChild, trStyle;\n\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement(\"table\");\n          tr = document.createElement(\"tr\");\n          trChild = document.createElement(\"div\");\n          table.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n          tr.style.cssText = \"border:1px solid\"; // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n\n          tr.style.height = \"1px\";\n          trChild.style.height = \"9px\"; // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to \"inline\",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n\n          trChild.style.display = \"block\";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css('filter') (IE 9 only, #12537)\n    //   .css('--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === \"\" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the \"awesome hack by Dean Edwards\"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + \"\" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we'll check on the first run if it's really needed.\n    return {\n      get: function () {\n        if (conditionFn()) {\n          // Hook not needed (or it's not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n      emptyStyle = document.createElement(\"div\").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (final) {\n      return final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  var // Swappable if display is none or starts with table\n  // except \"table\", \"table-cell\", or \"table-caption\"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      cssNormalTransform = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  };\n\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === \"width\" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? \"border\" : \"content\")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === \"margin\") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // For \"border\" or \"margin\", add border\n\n        if (box !== \"padding\") {\n          delta += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        } // If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n        // \"padding\" or \"margin\"\n\n      } else {\n        // For \"content\", subtract padding\n        if (box === \"content\") {\n          delta -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n        } // For \"content\" or \"padding\", subtract border\n\n\n        if (box !== \"margin\") {\n          delta -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it's needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = \"offset\" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = \"auto\";\n    } // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn't suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, \"tr\") || // Fall back to offsetWidth/offsetHeight when value is \"auto\"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === \"auto\" || // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, \"display\", false, styles) === \"inline\") && // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize \"\" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element's box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + \"px\";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function (elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, \"opacity\");\n            return ret === \"\" ? \"1\" : ret;\n          }\n        }\n      }\n    },\n    // Don't automatically add \"px\" to these possibly-unitless properties\n    cssNumber: {\n      \"animationIterationCount\": true,\n      \"columnCount\": true,\n      \"fillOpacity\": true,\n      \"flexGrow\": true,\n      \"flexShrink\": true,\n      \"fontWeight\": true,\n      \"gridArea\": true,\n      \"gridColumn\": true,\n      \"gridColumnEnd\": true,\n      \"gridColumnStart\": true,\n      \"gridRow\": true,\n      \"gridRowEnd\": true,\n      \"gridRowStart\": true,\n      \"lineHeight\": true,\n      \"opacity\": true,\n      \"order\": true,\n      \"orphans\": true,\n      \"widows\": true,\n      \"zIndex\": true,\n      \"zoom\": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function (elem, name, value, extra) {\n      // Don't set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we're working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we're working with the right name. We don't\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value\n\n      if (value !== undefined) {\n        type = typeof value; // Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\n        if (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = \"number\";\n        } // Make sure that null and NaN values aren't set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // \"px\" to a few hardcoded values.\n\n\n        if (type === \"number\" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n        } // background-* props affect original clone's values\n\n\n        if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n          style[name] = \"inherit\";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function (elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && \"get\" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert \"normal\" to computed value\n\n\n      if (val === \"normal\" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === \"\" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each([\"height\", \"width\"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function (elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, \"display\")) && ( // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function (elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === \"absolute\",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, \"border\", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + \"px\";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function (value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== \"margin\") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function (name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function (elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n    },\n    cur: function () {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function (percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function (tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as \"10px\" are parsed to Float;\n        // complex values such as \"rotate(1rad)\" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\n\n        return !result || result === \"auto\" ? 0 : result;\n      },\n      set: function (tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function (tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function (p) {\n      return p;\n    },\n    swing: function (p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We're done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = \"width\" in props || \"height\" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, \"fxshow\"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, \"fx\");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, \"fx\").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === \"toggle\";\n\n        if (value === (hidden ? \"hide\" : \"show\")) {\n          // Pretend to be hidden if this is a \"show\" and\n          // there is still data from a stopped show/hide\n          if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict \"overflow\" and \"display\" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, \"display\");\n      }\n\n      display = jQuery.css(elem, \"display\");\n\n      if (display === \"none\") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, \"display\");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n        if (jQuery.css(elem, \"float\") === \"none\") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === \"none\" ? \"\" : display;\n            }\n          }\n\n          style.display = \"inline-block\";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = \"hidden\";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if (\"hidden\" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, \"fxshow\", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a \"hide\" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, \"fxshow\");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && \"expand\" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.\n        // Reusing 'index' because we have the correct \"name\"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don't match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function () {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function (prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function (gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      \"*\": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function (props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = [\"*\"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function (callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && typeof speed === \"object\" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== \"number\") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> \"fx\"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = \"fx\";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function (speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css(\"opacity\", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function (prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function () {\n        // Operate on a copy of prop so per-property easing won't be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, \"finish\")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function (type, clearQueue, gotoEnd) {\n      var stopQueue = function (hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== \"string\") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue) {\n        this.queue(type || \"fx\", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + \"queueHooks\",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn't forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function (type) {\n      if (type !== false) {\n        type = type || \"fx\";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + \"queue\"],\n            hooks = data[type + \"queueHooks\"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx(\"show\"),\n    slideUp: genFx(\"hide\"),\n    slideToggle: genFx(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || \"fx\";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement(\"input\"),\n        select = document.createElement(\"select\"),\n        opt = select.appendChild(document.createElement(\"option\"));\n    input.type = \"checkbox\"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be \"on\"\n\n    support.checkOn = input.value !== \"\"; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement(\"input\");\n    input.value = \"t\";\n    input.type = \"radio\";\n    support.radioValue = input.value === \"t\";\n  })();\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function (name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function (name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === \"undefined\") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + \"\");\n        return value;\n      }\n\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function (elem, value) {\n          if (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\n            var val = elem.value;\n            elem.setAttribute(\"type\", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function (elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function (elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function (name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function (name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function (elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn't always return the\n          // correct value when it hasn't been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule \"no-unused-expressions\" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function (elem) {\n        /* eslint no-unused-expressions: \"off\" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function (elem) {\n        /* eslint no-unused-expressions: \"off\" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  }); // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(\" \");\n  }\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(\" \" + clazz + \" \") < 0) {\n                cur += clazz + \" \";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute(\"class\", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr(\"class\", \"\");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(\" \" + clazz + \" \") > -1) {\n                cur = cur.replace(\" \" + clazz + \" \", \" \");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute(\"class\", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function (value, stateVal) {\n      var type = typeof value,\n          isValidValue = type === \"string\" || Array.isArray(value);\n\n      if (typeof stateVal === \"boolean\" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === \"boolean\") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, \"__className__\", className);\n          } // If the element has a class name or if we're passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n          }\n        }\n      });\n    },\n    hasClass: function (selector) {\n      var className,\n          elem,\n          i = 0;\n      className = \" \" + selector + \" \";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function (value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === \"string\") {\n            return ret.replace(rreturn, \"\");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? \"\" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as \"\"; convert numbers to string\n\n\n        if (val == null) {\n          val = \"\";\n        } else if (typeof val === \"number\") {\n          val += \"\";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? \"\" : value + \"\";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function (elem) {\n          var val = jQuery.find.attr(elem, \"value\");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function (elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === \"select-one\",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn't update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don't need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function (elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each([\"radio\", \"checkbox\"], function () {\n    jQuery.valHooks[this] = {\n      set: function (elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  support.focusin = \"onfocusin\" in window;\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function (e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function (event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, \"type\") ? event.type : event,\n          namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we're not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(\".\") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === \"object\" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(\".\");\n      event.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, \"events\") || Object.create(null))[event.type] && dataPriv.get(cur, \"handle\");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don't do default actions on window, that's where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function (type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function (type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function (type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  }); // Support: Firefox <=44\n  // Firefox doesn't have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: \"focusin\",\n      blur: \"focusout\"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function (event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function () {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function () {\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n\n    if (!data || typeof data !== \"string\") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, \"text/xml\");\n    } catch (e) {}\n\n    parserErrorElem = xml && xml.getElementsByTagName(\"parsererror\")[0];\n\n    if (!xml || parserErrorElem) {\n      jQuery.error(\"Invalid XML: \" + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join(\"\\n\") : data));\n    }\n\n    return xml;\n  };\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (typeof v === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function (key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n    };\n\n    if (a == null) {\n      return \"\";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join(\"&\");\n  };\n\n  jQuery.fn.extend({\n    serialize: function () {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function () {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( \":disabled\" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, \"\\r\\n\")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol \"*\" can be used\n   * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol \"*\" can be used\n   * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = \"*/\".concat(\"*\"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement(\"a\");\n  originAnchor.href = location.href; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  } // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    } // Check if we're dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There's only work to do if current dataType is non-auto\n        if (current === \"*\") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== \"*\" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        \"* text\": String,\n        // Text to html (true = no transformation)\n        \"text html\": true,\n        // Evaluate text as a json expression\n        \"text json\": JSON.parse,\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML\n      },\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function (target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function (url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === \"object\") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks(\"once memory\"),\n          // Status-dependent callbacks\n      statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = \"canceled\",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function (key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + \" \"] = (responseHeaders[match[1].toLowerCase() + \" \"] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + \" \"];\n          }\n\n          return match == null ? null : match.join(\", \");\n        },\n        // Raw string\n        getAllResponseHeaders: function () {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function (name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function (type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function (map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                statusCode[code] = [statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function (statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"]; // A cross-domain request is in order when the origin doesn't match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement(\"a\"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor's host property isn't correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, \"\"); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === \"string\")) {\n          cacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it's not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, \"$1\");\n          uncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce.guid++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n        s.data = s.data.replace(r20, \"+\");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = \"abort\"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || \"\"; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Use a noop converter for missing script but not if jsonp\n\n\n        if (!isSuccess && jQuery.inArray(\"script\", s.dataTypes) > -1 && jQuery.inArray(\"json\", s.dataTypes) < 0) {\n          s.converters[\"text script\"] = function () {};\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader(\"etag\");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === \"HEAD\") {\n            statusText = \"nocontent\"; // if not modified\n          } else if (status === 304) {\n            statusText = \"notmodified\"; // If we have data, let's convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = \"error\";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(statusCode);\n        statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function (url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    },\n    getScript: function (url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    }\n  });\n  jQuery.each([\"get\", \"post\"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n\n    for (i in s.headers) {\n      if (i.toLowerCase() === \"content-type\") {\n        s.contentType = s.headers[i] || \"\";\n      }\n    }\n  });\n\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: \"GET\",\n      dataType: \"script\",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        \"text script\": function () {}\n      },\n      dataFilter: function (response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function (html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function (html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function (html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function (selector) {\n      this.parent(selector).not(\"body\").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function (headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won't change header if already provided.\n\n\n          if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          callback = function (type) {\n            return function () {\n              if (callback) {\n                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === \"abort\") {\n                  xhr.abort();\n                } else if (type === \"error\") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== \"number\") {\n                    complete(0, \"error\");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = callback(\"error\"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          callback = callback(\"abort\");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn't been notified as an error yet\n            if (callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function (text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache's special case and crossDomain\n\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = \"GET\";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport(\"script\", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, callback;\n      return {\n        send: function (_, complete) {\n          script = jQuery(\"<script>\").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on(\"load error\", callback = function (evt) {\n            script.remove();\n            callback = null;\n\n            if (evt) {\n              complete(evt.type === \"error\" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function () {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = \"json\"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn't exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return \"script\";\n    }\n  }); // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument(\"\").body;\n    body.innerHTML = \"<form></form><form></form>\";\n    return body.childNodes.length === 2;\n  }(); // Argument \"data\" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== \"string\") {\n      return [];\n    }\n\n    if (typeof context === \"boolean\") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(\"\"); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document's URL (gh-2965)\n\n        base = context.createElement(\"base\");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n  /**\n   * Load a url into a page\n   */\n\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(\" \");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it's a function\n\n\n    if (isFunction(params)) {\n      // We assume that it's the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && typeof params === \"object\") {\n      type = \"POST\";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If \"type\" variable is undefined, then \"GET\" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || \"GET\",\n        dataType: \"html\",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE 'Permission Denied' errors\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  jQuery.offset = {\n    setOffset: function (elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, \"position\"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === \"static\") {\n        elem.style.position = \"relative\";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, \"top\");\n      curCSSLeft = jQuery.css(elem, \"left\");\n      calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if (\"using\" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element's border box to the document origin\n    offset: function (options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element's margin box to its offset parent's padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function () {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, \"borderTopWidth\", true);\n          parentOffset.left += jQuery.css(offsetParent, \"borderLeftWidth\", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function () {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (method, prop) {\n    var top = \"pageYOffset\" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each([\"top\", \"left\"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (name, type) {\n    jQuery.each({\n      padding: \"inner\" + name,\n      content: type,\n      \"\": \"outer\" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n            extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function (types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function (types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function (selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function (selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    },\n    hover: function (fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  }); // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === \"string\") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = slice.call(arguments, 2);\n\n    proxy = function () {\n      return fn.apply(context || this, args.concat(slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === \"number\" || type === \"string\") && // parseFloat NaNs numeric-cast false positives (\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n\n  jQuery.trim = function (text) {\n    return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (typeof noGlobal === \"undefined\") {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});\n\n//# sourceURL=webpack:///../node_modules/jQuery/dist/jquery.js?");

/***/ }),

/***/ "../node_modules/summernote/dist/summernote.js":
/*!*****************************************************!*\
  !*** ../node_modules/summernote/dist/summernote.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\");\n/*!\n * \n * Super simple WYSIWYG editor v0.8.20\n * https://summernote.org\n *\n *\n * Copyright 2013- Alan Hong and contributors\n * Summernote may be freely distributed under the MIT license.\n *\n * Date: 2021-10-14T21:15Z\n *\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true) module.exports = factory(__webpack_require__(/*! jQuery */ \"../node_modules/jQuery/dist/jquery.js\"));else { var i, a; }\n})(self, function (__WEBPACK_EXTERNAL_MODULE__1145__) {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = {\n        /***/\n        9770:\n        /***/\n        (__unused_webpack_module, __unused_webpack___webpack_exports__, __nested_webpack_require_981__) => {\n          /* harmony import */\n          var jquery__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_981__(1145);\n          /* harmony import */\n\n\n          var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_981__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n          jquery__WEBPACK_IMPORTED_MODULE_0___default().summernote = jquery__WEBPACK_IMPORTED_MODULE_0___default().summernote || {\n            lang: {}\n          };\n          jquery__WEBPACK_IMPORTED_MODULE_0___default().extend(jquery__WEBPACK_IMPORTED_MODULE_0___default().summernote.lang, {\n            'en-US': {\n              font: {\n                bold: 'Bold',\n                italic: 'Italic',\n                underline: 'Underline',\n                clear: 'Remove Font Style',\n                height: 'Line Height',\n                name: 'Font Family',\n                strikethrough: 'Strikethrough',\n                subscript: 'Subscript',\n                superscript: 'Superscript',\n                size: 'Font Size',\n                sizeunit: 'Font Size Unit'\n              },\n              image: {\n                image: 'Picture',\n                insert: 'Insert Image',\n                resizeFull: 'Resize full',\n                resizeHalf: 'Resize half',\n                resizeQuarter: 'Resize quarter',\n                resizeNone: 'Original size',\n                floatLeft: 'Float Left',\n                floatRight: 'Float Right',\n                floatNone: 'Remove float',\n                shapeRounded: 'Shape: Rounded',\n                shapeCircle: 'Shape: Circle',\n                shapeThumbnail: 'Shape: Thumbnail',\n                shapeNone: 'Shape: None',\n                dragImageHere: 'Drag image or text here',\n                dropImage: 'Drop image or Text',\n                selectFromFiles: 'Select from files',\n                maximumFileSize: 'Maximum file size',\n                maximumFileSizeError: 'Maximum file size exceeded.',\n                url: 'Image URL',\n                remove: 'Remove Image',\n                original: 'Original'\n              },\n              video: {\n                video: 'Video',\n                videoLink: 'Video Link',\n                insert: 'Insert Video',\n                url: 'Video URL',\n                providers: '(YouTube, Google Drive, Vimeo, Vine, Instagram, DailyMotion, Youku, Peertube)'\n              },\n              link: {\n                link: 'Link',\n                insert: 'Insert Link',\n                unlink: 'Unlink',\n                edit: 'Edit',\n                textToDisplay: 'Text to display',\n                url: 'To what URL should this link go?',\n                openInNewWindow: 'Open in new window',\n                useProtocol: 'Use default protocol'\n              },\n              table: {\n                table: 'Table',\n                addRowAbove: 'Add row above',\n                addRowBelow: 'Add row below',\n                addColLeft: 'Add column left',\n                addColRight: 'Add column right',\n                delRow: 'Delete row',\n                delCol: 'Delete column',\n                delTable: 'Delete table'\n              },\n              hr: {\n                insert: 'Insert Horizontal Rule'\n              },\n              style: {\n                style: 'Style',\n                p: 'Normal',\n                blockquote: 'Quote',\n                pre: 'Code',\n                h1: 'Header 1',\n                h2: 'Header 2',\n                h3: 'Header 3',\n                h4: 'Header 4',\n                h5: 'Header 5',\n                h6: 'Header 6'\n              },\n              lists: {\n                unordered: 'Unordered list',\n                ordered: 'Ordered list'\n              },\n              options: {\n                help: 'Help',\n                fullscreen: 'Full Screen',\n                codeview: 'Code View'\n              },\n              paragraph: {\n                paragraph: 'Paragraph',\n                outdent: 'Outdent',\n                indent: 'Indent',\n                left: 'Align left',\n                center: 'Align center',\n                right: 'Align right',\n                justify: 'Justify full'\n              },\n              color: {\n                recent: 'Recent Color',\n                more: 'More Color',\n                background: 'Background Color',\n                foreground: 'Text Color',\n                transparent: 'Transparent',\n                setTransparent: 'Set transparent',\n                reset: 'Reset',\n                resetToDefault: 'Reset to default',\n                cpSelect: 'Select'\n              },\n              shortcut: {\n                shortcuts: 'Keyboard shortcuts',\n                close: 'Close',\n                textFormatting: 'Text formatting',\n                action: 'Action',\n                paragraphFormatting: 'Paragraph formatting',\n                documentStyle: 'Document Style',\n                extraKeys: 'Extra keys'\n              },\n              help: {\n                'escape': 'Escape',\n                'insertParagraph': 'Insert Paragraph',\n                'undo': 'Undo the last command',\n                'redo': 'Redo the last command',\n                'tab': 'Tab',\n                'untab': 'Untab',\n                'bold': 'Set a bold style',\n                'italic': 'Set a italic style',\n                'underline': 'Set a underline style',\n                'strikethrough': 'Set a strikethrough style',\n                'removeFormat': 'Clean a style',\n                'justifyLeft': 'Set left align',\n                'justifyCenter': 'Set center align',\n                'justifyRight': 'Set right align',\n                'justifyFull': 'Set full align',\n                'insertUnorderedList': 'Toggle unordered list',\n                'insertOrderedList': 'Toggle ordered list',\n                'outdent': 'Outdent on current paragraph',\n                'indent': 'Indent on current paragraph',\n                'formatPara': 'Change current block\\'s format as a paragraph(P tag)',\n                'formatH1': 'Change current block\\'s format as H1',\n                'formatH2': 'Change current block\\'s format as H2',\n                'formatH3': 'Change current block\\'s format as H3',\n                'formatH4': 'Change current block\\'s format as H4',\n                'formatH5': 'Change current block\\'s format as H5',\n                'formatH6': 'Change current block\\'s format as H6',\n                'insertHorizontalRule': 'Insert horizontal rule',\n                'linkDialog.show': 'Show Link Dialog'\n              },\n              history: {\n                undo: 'Undo',\n                redo: 'Redo'\n              },\n              specialChar: {\n                specialChar: 'SPECIAL CHARACTERS',\n                select: 'Select Special characters'\n              },\n              output: {\n                noSelection: 'No Selection Made!'\n              }\n            }\n          });\n          /***/\n        },\n\n        /***/\n        1145:\n        /***/\n        module => {\n          module.exports = __WEBPACK_EXTERNAL_MODULE__1145__;\n          /***/\n        }\n        /******/\n\n      };\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __nested_webpack_require_8389__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_8389__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n      /******/\n\n      /* webpack/runtime/compat get default export */\n\n      /******/\n\n\n      (() => {\n        /******/\n        // getDefaultExport function for compatibility with non-harmony modules\n\n        /******/\n        __nested_webpack_require_8389__.n = module => {\n          /******/\n          var getter = module && module.__esModule ?\n          /******/\n          () => module['default'] :\n          /******/\n          () => module;\n          /******/\n\n          __nested_webpack_require_8389__.d(getter, {\n            a: getter\n          });\n          /******/\n\n\n          return getter;\n          /******/\n        };\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/define property getters */\n\n      /******/\n\n\n      (() => {\n        /******/\n        // define getter functions for harmony exports\n\n        /******/\n        __nested_webpack_require_8389__.d = (exports, definition) => {\n          /******/\n          for (var key in definition) {\n            /******/\n            if (__nested_webpack_require_8389__.o(definition, key) && !__nested_webpack_require_8389__.o(exports, key)) {\n              /******/\n              Object.defineProperty(exports, key, {\n                enumerable: true,\n                get: definition[key]\n              });\n              /******/\n            }\n            /******/\n\n          }\n          /******/\n\n        };\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/hasOwnProperty shorthand */\n\n      /******/\n\n\n      (() => {\n        /******/\n        __nested_webpack_require_8389__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/make namespace object */\n\n      /******/\n\n\n      (() => {\n        /******/\n        // define __esModule on exports\n\n        /******/\n        __nested_webpack_require_8389__.r = exports => {\n          /******/\n          if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/\n            Object.defineProperty(exports, Symbol.toStringTag, {\n              value: 'Module'\n            });\n            /******/\n          }\n          /******/\n\n\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          /******/\n        };\n        /******/\n\n      })();\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        // ESM COMPAT FLAG\n        __nested_webpack_require_8389__.r(__webpack_exports__); // EXTERNAL MODULE: external \"jQuery\"\n\n\n        var external_jQuery_ = __nested_webpack_require_8389__(1145);\n\n        var external_jQuery_default = /*#__PURE__*/__nested_webpack_require_8389__.n(external_jQuery_); // EXTERNAL MODULE: ./src/lang/summernote-en-US.js\n\n\n        var summernote_en_US = __nested_webpack_require_8389__(9770);\n\n        ; // CONCATENATED MODULE: ./src/js/core/env.js\n\n        /**\n         * returns whether font is installed or not.\n         *\n         * @param {String} fontName\n         * @return {Boolean}\n         */\n\n        var genericFontFamilies = ['sans-serif', 'serif', 'monospace', 'cursive', 'fantasy'];\n\n        function validFontName(fontName) {\n          return external_jQuery_default().inArray(fontName.toLowerCase(), genericFontFamilies) === -1 ? \"'\".concat(fontName, \"'\") : fontName;\n        }\n\n        function isFontInstalled(fontName) {\n          var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';\n          var testText = 'mmmmmmmmmmwwwww';\n          var testSize = '200px';\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n          context.font = testSize + \" '\" + testFontName + \"'\";\n          var originalWidth = context.measureText(testText).width;\n          context.font = testSize + ' ' + validFontName(fontName) + ', \"' + testFontName + '\"';\n          var width = context.measureText(testText).width;\n          return originalWidth !== width;\n        }\n\n        var userAgent = navigator.userAgent;\n        var isMSIE = /MSIE|Trident/i.test(userAgent);\n        var browserVersion;\n\n        if (isMSIE) {\n          var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);\n\n          if (matches) {\n            browserVersion = parseFloat(matches[1]);\n          }\n\n          matches = /Trident\\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(userAgent);\n\n          if (matches) {\n            browserVersion = parseFloat(matches[1]);\n          }\n        }\n\n        var isEdge = /Edge\\/\\d+/.test(userAgent);\n        var isSupportTouch = 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0; // [workaround] IE doesn't have input events for contentEditable\n        // - see: https://goo.gl/4bfIvA\n\n        var inputEventName = isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';\n        /**\n         * @class core.env\n         *\n         * Object which check platform and agent\n         *\n         * @singleton\n         * @alternateClassName env\n         */\n\n        /* harmony default export */\n\n        const env = {\n          isMac: navigator.appVersion.indexOf('Mac') > -1,\n          isMSIE: isMSIE,\n          isEdge: isEdge,\n          isFF: !isEdge && /firefox/i.test(userAgent),\n          isPhantom: /PhantomJS/i.test(userAgent),\n          isWebkit: !isEdge && /webkit/i.test(userAgent),\n          isChrome: !isEdge && /chrome/i.test(userAgent),\n          isSafari: !isEdge && /safari/i.test(userAgent) && !/chrome/i.test(userAgent),\n          browserVersion: browserVersion,\n          isSupportTouch: isSupportTouch,\n          isFontInstalled: isFontInstalled,\n          isW3CRangeSupport: !!document.createRange,\n          inputEventName: inputEventName,\n          genericFontFamilies: genericFontFamilies,\n          validFontName: validFontName\n        };\n        ; // CONCATENATED MODULE: ./src/js/core/func.js\n\n        /**\n         * @class core.func\n         *\n         * func utils (for high-order func's arg)\n         *\n         * @singleton\n         * @alternateClassName func\n         */\n\n        function eq(itemA) {\n          return function (itemB) {\n            return itemA === itemB;\n          };\n        }\n\n        function eq2(itemA, itemB) {\n          return itemA === itemB;\n        }\n\n        function peq2(propName) {\n          return function (itemA, itemB) {\n            return itemA[propName] === itemB[propName];\n          };\n        }\n\n        function ok() {\n          return true;\n        }\n\n        function fail() {\n          return false;\n        }\n\n        function not(f) {\n          return function () {\n            return !f.apply(f, arguments);\n          };\n        }\n\n        function and(fA, fB) {\n          return function (item) {\n            return fA(item) && fB(item);\n          };\n        }\n\n        function func_self(a) {\n          return a;\n        }\n\n        function invoke(obj, method) {\n          return function () {\n            return obj[method].apply(obj, arguments);\n          };\n        }\n\n        var idCounter = 0;\n        /**\n         * reset globally-unique id\n         *\n         */\n\n        function resetUniqueId() {\n          idCounter = 0;\n        }\n        /**\n         * generate a globally-unique id\n         *\n         * @param {String} [prefix]\n         */\n\n\n        function uniqueId(prefix) {\n          var id = ++idCounter + '';\n          return prefix ? prefix + id : id;\n        }\n        /**\n         * returns bnd (bounds) from rect\n         *\n         * - IE Compatibility Issue: http://goo.gl/sRLOAo\n         * - Scroll Issue: http://goo.gl/sNjUc\n         *\n         * @param {Rect} rect\n         * @return {Object} bounds\n         * @return {Number} bounds.top\n         * @return {Number} bounds.left\n         * @return {Number} bounds.width\n         * @return {Number} bounds.height\n         */\n\n\n        function rect2bnd(rect) {\n          var $document = external_jQuery_default()(document);\n          return {\n            top: rect.top + $document.scrollTop(),\n            left: rect.left + $document.scrollLeft(),\n            width: rect.right - rect.left,\n            height: rect.bottom - rect.top\n          };\n        }\n        /**\n         * returns a copy of the object where the keys have become the values and the values the keys.\n         * @param {Object} obj\n         * @return {Object}\n         */\n\n\n        function invertObject(obj) {\n          var inverted = {};\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              inverted[obj[key]] = key;\n            }\n          }\n\n          return inverted;\n        }\n        /**\n         * @param {String} namespace\n         * @param {String} [prefix]\n         * @return {String}\n         */\n\n\n        function namespaceToCamel(namespace, prefix) {\n          prefix = prefix || '';\n          return prefix + namespace.split('.').map(function (name) {\n            return name.substring(0, 1).toUpperCase() + name.substring(1);\n          }).join('');\n        }\n        /**\n         * Returns a function, that, as long as it continues to be invoked, will not\n         * be triggered. The function will be called after it stops being called for\n         * N milliseconds. If `immediate` is passed, trigger the function on the\n         * leading edge, instead of the trailing.\n         * @param {Function} func\n         * @param {Number} wait\n         * @param {Boolean} immediate\n         * @return {Function}\n         */\n\n\n        function debounce(func, wait, immediate) {\n          var timeout;\n          return function () {\n            var context = this;\n            var args = arguments;\n\n            var later = function later() {\n              timeout = null;\n\n              if (!immediate) {\n                func.apply(context, args);\n              }\n            };\n\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n\n            if (callNow) {\n              func.apply(context, args);\n            }\n          };\n        }\n        /**\n         *\n         * @param {String} url\n         * @return {Boolean}\n         */\n\n\n        function isValidUrl(url) {\n          var expression = /[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n          return expression.test(url);\n        }\n        /* harmony default export */\n\n\n        const func = {\n          eq: eq,\n          eq2: eq2,\n          peq2: peq2,\n          ok: ok,\n          fail: fail,\n          self: func_self,\n          not: not,\n          and: and,\n          invoke: invoke,\n          resetUniqueId: resetUniqueId,\n          uniqueId: uniqueId,\n          rect2bnd: rect2bnd,\n          invertObject: invertObject,\n          namespaceToCamel: namespaceToCamel,\n          debounce: debounce,\n          isValidUrl: isValidUrl\n        };\n        ; // CONCATENATED MODULE: ./src/js/core/lists.js\n\n        /**\n         * returns the first item of an array.\n         *\n         * @param {Array} array\n         */\n\n        function head(array) {\n          return array[0];\n        }\n        /**\n         * returns the last item of an array.\n         *\n         * @param {Array} array\n         */\n\n\n        function last(array) {\n          return array[array.length - 1];\n        }\n        /**\n         * returns everything but the last entry of the array.\n         *\n         * @param {Array} array\n         */\n\n\n        function initial(array) {\n          return array.slice(0, array.length - 1);\n        }\n        /**\n         * returns the rest of the items in an array.\n         *\n         * @param {Array} array\n         */\n\n\n        function tail(array) {\n          return array.slice(1);\n        }\n        /**\n         * returns item of array\n         */\n\n\n        function find(array, pred) {\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            var item = array[idx];\n\n            if (pred(item)) {\n              return item;\n            }\n          }\n        }\n        /**\n         * returns true if all of the values in the array pass the predicate truth test.\n         */\n\n\n        function lists_all(array, pred) {\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (!pred(array[idx])) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n        /**\n         * returns true if the value is present in the list.\n         */\n\n\n        function contains(array, item) {\n          if (array && array.length && item) {\n            if (array.indexOf) {\n              return array.indexOf(item) !== -1;\n            } else if (array.contains) {\n              // `DOMTokenList` doesn't implement `.indexOf`, but it implements `.contains`\n              return array.contains(item);\n            }\n          }\n\n          return false;\n        }\n        /**\n         * get sum from a list\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - iterator\n         */\n\n\n        function sum(array, fn) {\n          fn = fn || func.self;\n          return array.reduce(function (memo, v) {\n            return memo + fn(v);\n          }, 0);\n        }\n        /**\n         * returns a copy of the collection with array type.\n         * @param {Collection} collection - collection eg) node.childNodes, ...\n         */\n\n\n        function from(collection) {\n          var result = [];\n          var length = collection.length;\n          var idx = -1;\n\n          while (++idx < length) {\n            result[idx] = collection[idx];\n          }\n\n          return result;\n        }\n        /**\n         * returns whether list is empty or not\n         */\n\n\n        function isEmpty(array) {\n          return !array || !array.length;\n        }\n        /**\n         * cluster elements by predicate function.\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - predicate function for cluster rule\n         * @param {Array[]}\n         */\n\n\n        function clusterBy(array, fn) {\n          if (!array.length) {\n            return [];\n          }\n\n          var aTail = tail(array);\n          return aTail.reduce(function (memo, v) {\n            var aLast = last(memo);\n\n            if (fn(last(aLast), v)) {\n              aLast[aLast.length] = v;\n            } else {\n              memo[memo.length] = [v];\n            }\n\n            return memo;\n          }, [[head(array)]]);\n        }\n        /**\n         * returns a copy of the array with all false values removed\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - predicate function for cluster rule\n         */\n\n\n        function compact(array) {\n          var aResult = [];\n\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (array[idx]) {\n              aResult.push(array[idx]);\n            }\n          }\n\n          return aResult;\n        }\n        /**\n         * produces a duplicate-free version of the array\n         *\n         * @param {Array} array\n         */\n\n\n        function unique(array) {\n          var results = [];\n\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (!contains(results, array[idx])) {\n              results.push(array[idx]);\n            }\n          }\n\n          return results;\n        }\n        /**\n         * returns next item.\n         * @param {Array} array\n         */\n\n\n        function next(array, item) {\n          if (array && array.length && item) {\n            var idx = array.indexOf(item);\n            return idx === -1 ? null : array[idx + 1];\n          }\n\n          return null;\n        }\n        /**\n         * returns prev item.\n         * @param {Array} array\n         */\n\n\n        function prev(array, item) {\n          if (array && array.length && item) {\n            var idx = array.indexOf(item);\n            return idx === -1 ? null : array[idx - 1];\n          }\n\n          return null;\n        }\n        /**\n         * @class core.list\n         *\n         * list utils\n         *\n         * @singleton\n         * @alternateClassName list\n         */\n\n        /* harmony default export */\n\n\n        const lists = {\n          head: head,\n          last: last,\n          initial: initial,\n          tail: tail,\n          prev: prev,\n          next: next,\n          find: find,\n          contains: contains,\n          all: lists_all,\n          sum: sum,\n          from: from,\n          isEmpty: isEmpty,\n          clusterBy: clusterBy,\n          compact: compact,\n          unique: unique\n        };\n        ; // CONCATENATED MODULE: ./src/js/core/dom.js\n\n        var NBSP_CHAR = String.fromCharCode(160);\n        var ZERO_WIDTH_NBSP_CHAR = \"\\uFEFF\";\n        /**\n         * @method isEditable\n         *\n         * returns whether node is `note-editable` or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n        function isEditable(node) {\n          return node && external_jQuery_default()(node).hasClass('note-editable');\n        }\n        /**\n         * @method isControlSizing\n         *\n         * returns whether node is `note-control-sizing` or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function isControlSizing(node) {\n          return node && external_jQuery_default()(node).hasClass('note-control-sizing');\n        }\n        /**\n         * @method makePredByNodeName\n         *\n         * returns predicate which judge whether nodeName is same\n         *\n         * @param {String} nodeName\n         * @return {Function}\n         */\n\n\n        function makePredByNodeName(nodeName) {\n          nodeName = nodeName.toUpperCase();\n          return function (node) {\n            return node && node.nodeName.toUpperCase() === nodeName;\n          };\n        }\n        /**\n         * @method isText\n         *\n         *\n         *\n         * @param {Node} node\n         * @return {Boolean} true if node's type is text(3)\n         */\n\n\n        function isText(node) {\n          return node && node.nodeType === 3;\n        }\n        /**\n         * @method isElement\n         *\n         *\n         *\n         * @param {Node} node\n         * @return {Boolean} true if node's type is element(1)\n         */\n\n\n        function isElement(node) {\n          return node && node.nodeType === 1;\n        }\n        /**\n         * ex) br, col, embed, hr, img, input, ...\n         * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n         */\n\n\n        function isVoid(node) {\n          return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(node.nodeName.toUpperCase());\n        }\n\n        function isPara(node) {\n          if (isEditable(node)) {\n            return false;\n          } // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph\n\n\n          return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());\n        }\n\n        function isHeading(node) {\n          return node && /^H[1-7]/.test(node.nodeName.toUpperCase());\n        }\n\n        var isPre = makePredByNodeName('PRE');\n        var isLi = makePredByNodeName('LI');\n\n        function isPurePara(node) {\n          return isPara(node) && !isLi(node);\n        }\n\n        var isTable = makePredByNodeName('TABLE');\n        var isData = makePredByNodeName('DATA');\n\n        function isInline(node) {\n          return !isBodyContainer(node) && !isList(node) && !isHr(node) && !isPara(node) && !isTable(node) && !isBlockquote(node) && !isData(node);\n        }\n\n        function isList(node) {\n          return node && /^UL|^OL/.test(node.nodeName.toUpperCase());\n        }\n\n        var isHr = makePredByNodeName('HR');\n\n        function isCell(node) {\n          return node && /^TD|^TH/.test(node.nodeName.toUpperCase());\n        }\n\n        var isBlockquote = makePredByNodeName('BLOCKQUOTE');\n\n        function isBodyContainer(node) {\n          return isCell(node) || isBlockquote(node) || isEditable(node);\n        }\n\n        var isAnchor = makePredByNodeName('A');\n\n        function isParaInline(node) {\n          return isInline(node) && !!ancestor(node, isPara);\n        }\n\n        function isBodyInline(node) {\n          return isInline(node) && !ancestor(node, isPara);\n        }\n\n        var isBody = makePredByNodeName('BODY');\n        /**\n         * returns whether nodeB is closest sibling of nodeA\n         *\n         * @param {Node} nodeA\n         * @param {Node} nodeB\n         * @return {Boolean}\n         */\n\n        function isClosestSibling(nodeA, nodeB) {\n          return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB;\n        }\n        /**\n         * returns array of closest siblings with node\n         *\n         * @param {Node} node\n         * @param {function} [pred] - predicate function\n         * @return {Node[]}\n         */\n\n\n        function withClosestSiblings(node, pred) {\n          pred = pred || func.ok;\n          var siblings = [];\n\n          if (node.previousSibling && pred(node.previousSibling)) {\n            siblings.push(node.previousSibling);\n          }\n\n          siblings.push(node);\n\n          if (node.nextSibling && pred(node.nextSibling)) {\n            siblings.push(node.nextSibling);\n          }\n\n          return siblings;\n        }\n        /**\n         * blank HTML for cursor position\n         * - [workaround] old IE only works with &nbsp;\n         * - [workaround] IE11 and other browser works with bogus br\n         */\n\n\n        var blankHTML = env.isMSIE && env.browserVersion < 11 ? '&nbsp;' : '<br>';\n        /**\n         * @method nodeLength\n         *\n         * returns #text's text size or element's childNodes size\n         *\n         * @param {Node} node\n         */\n\n        function nodeLength(node) {\n          if (isText(node)) {\n            return node.nodeValue.length;\n          }\n\n          if (node) {\n            return node.childNodes.length;\n          }\n\n          return 0;\n        }\n        /**\n         * returns whether deepest child node is empty or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function deepestChildIsEmpty(node) {\n          do {\n            if (node.firstElementChild === null || node.firstElementChild.innerHTML === '') break;\n          } while (node = node.firstElementChild);\n\n          return dom_isEmpty(node);\n        }\n        /**\n         * returns whether node is empty or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function dom_isEmpty(node) {\n          var len = nodeLength(node);\n\n          if (len === 0) {\n            return true;\n          } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {\n            // ex) <p><br></p>, <span><br></span>\n            return true;\n          } else if (lists.all(node.childNodes, isText) && node.innerHTML === '') {\n            // ex) <p></p>, <span></span>\n            return true;\n          }\n\n          return false;\n        }\n        /**\n         * padding blankHTML if node is empty (for cursor position)\n         */\n\n\n        function paddingBlankHTML(node) {\n          if (!isVoid(node) && !nodeLength(node)) {\n            node.innerHTML = blankHTML;\n          }\n        }\n        /**\n         * find nearest ancestor predicate hit\n         *\n         * @param {Node} node\n         * @param {Function} pred - predicate function\n         */\n\n\n        function ancestor(node, pred) {\n          while (node) {\n            if (pred(node)) {\n              return node;\n            }\n\n            if (isEditable(node)) {\n              break;\n            }\n\n            node = node.parentNode;\n          }\n\n          return null;\n        }\n        /**\n         * find nearest ancestor only single child blood line and predicate hit\n         *\n         * @param {Node} node\n         * @param {Function} pred - predicate function\n         */\n\n\n        function singleChildAncestor(node, pred) {\n          node = node.parentNode;\n\n          while (node) {\n            if (nodeLength(node) !== 1) {\n              break;\n            }\n\n            if (pred(node)) {\n              return node;\n            }\n\n            if (isEditable(node)) {\n              break;\n            }\n\n            node = node.parentNode;\n          }\n\n          return null;\n        }\n        /**\n         * returns new array of ancestor nodes (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [optional] pred - predicate function\n         */\n\n\n        function listAncestor(node, pred) {\n          pred = pred || func.fail;\n          var ancestors = [];\n          ancestor(node, function (el) {\n            if (!isEditable(el)) {\n              ancestors.push(el);\n            }\n\n            return pred(el);\n          });\n          return ancestors;\n        }\n        /**\n         * find farthest ancestor predicate hit\n         */\n\n\n        function lastAncestor(node, pred) {\n          var ancestors = listAncestor(node);\n          return lists.last(ancestors.filter(pred));\n        }\n        /**\n         * returns common ancestor node between two nodes.\n         *\n         * @param {Node} nodeA\n         * @param {Node} nodeB\n         */\n\n\n        function commonAncestor(nodeA, nodeB) {\n          var ancestors = listAncestor(nodeA);\n\n          for (var n = nodeB; n; n = n.parentNode) {\n            if (ancestors.indexOf(n) > -1) return n;\n          }\n\n          return null; // difference document area\n        }\n        /**\n         * listing all previous siblings (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [optional] pred - predicate function\n         */\n\n\n        function listPrev(node, pred) {\n          pred = pred || func.fail;\n          var nodes = [];\n\n          while (node) {\n            if (pred(node)) {\n              break;\n            }\n\n            nodes.push(node);\n            node = node.previousSibling;\n          }\n\n          return nodes;\n        }\n        /**\n         * listing next siblings (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [pred] - predicate function\n         */\n\n\n        function listNext(node, pred) {\n          pred = pred || func.fail;\n          var nodes = [];\n\n          while (node) {\n            if (pred(node)) {\n              break;\n            }\n\n            nodes.push(node);\n            node = node.nextSibling;\n          }\n\n          return nodes;\n        }\n        /**\n         * listing descendant nodes\n         *\n         * @param {Node} node\n         * @param {Function} [pred] - predicate function\n         */\n\n\n        function listDescendant(node, pred) {\n          var descendants = [];\n          pred = pred || func.ok; // start DFS(depth first search) with node\n\n          (function fnWalk(current) {\n            if (node !== current && pred(current)) {\n              descendants.push(current);\n            }\n\n            for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {\n              fnWalk(current.childNodes[idx]);\n            }\n          })(node);\n\n          return descendants;\n        }\n        /**\n         * wrap node with new tag.\n         *\n         * @param {Node} node\n         * @param {Node} tagName of wrapper\n         * @return {Node} - wrapper\n         */\n\n\n        function wrap(node, wrapperName) {\n          var parent = node.parentNode;\n          var wrapper = external_jQuery_default()('<' + wrapperName + '>')[0];\n          parent.insertBefore(wrapper, node);\n          wrapper.appendChild(node);\n          return wrapper;\n        }\n        /**\n         * insert node after preceding\n         *\n         * @param {Node} node\n         * @param {Node} preceding - predicate function\n         */\n\n\n        function insertAfter(node, preceding) {\n          var next = preceding.nextSibling;\n          var parent = preceding.parentNode;\n\n          if (next) {\n            parent.insertBefore(node, next);\n          } else {\n            parent.appendChild(node);\n          }\n\n          return node;\n        }\n        /**\n         * append elements.\n         *\n         * @param {Node} node\n         * @param {Collection} aChild\n         */\n\n\n        function appendChildNodes(node, aChild) {\n          external_jQuery_default().each(aChild, function (idx, child) {\n            node.appendChild(child);\n          });\n          return node;\n        }\n        /**\n         * returns whether boundaryPoint is left edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isLeftEdgePoint(point) {\n          return point.offset === 0;\n        }\n        /**\n         * returns whether boundaryPoint is right edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgePoint(point) {\n          return point.offset === nodeLength(point.node);\n        }\n        /**\n         * returns whether boundaryPoint is edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isEdgePoint(point) {\n          return isLeftEdgePoint(point) || isRightEdgePoint(point);\n        }\n        /**\n         * returns whether node is left edge of ancestor or not.\n         *\n         * @param {Node} node\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isLeftEdgeOf(node, ancestor) {\n          while (node && node !== ancestor) {\n            if (position(node) !== 0) {\n              return false;\n            }\n\n            node = node.parentNode;\n          }\n\n          return true;\n        }\n        /**\n         * returns whether node is right edge of ancestor or not.\n         *\n         * @param {Node} node\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgeOf(node, ancestor) {\n          if (!ancestor) {\n            return false;\n          }\n\n          while (node && node !== ancestor) {\n            if (position(node) !== nodeLength(node.parentNode) - 1) {\n              return false;\n            }\n\n            node = node.parentNode;\n          }\n\n          return true;\n        }\n        /**\n         * returns whether point is left edge of ancestor or not.\n         * @param {BoundaryPoint} point\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isLeftEdgePointOf(point, ancestor) {\n          return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);\n        }\n        /**\n         * returns whether point is right edge of ancestor or not.\n         * @param {BoundaryPoint} point\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgePointOf(point, ancestor) {\n          return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);\n        }\n        /**\n         * returns offset from parent.\n         *\n         * @param {Node} node\n         */\n\n\n        function position(node) {\n          var offset = 0;\n\n          while (node = node.previousSibling) {\n            offset += 1;\n          }\n\n          return offset;\n        }\n\n        function hasChildren(node) {\n          return !!(node && node.childNodes && node.childNodes.length);\n        }\n        /**\n         * returns previous boundaryPoint\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function prevPoint(point, isSkipInnerOffset) {\n          var node;\n          var offset;\n\n          if (point.offset === 0) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            node = point.node.parentNode;\n            offset = position(point.node);\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset - 1];\n            offset = nodeLength(node);\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? 0 : point.offset - 1;\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /**\n         * returns next boundaryPoint\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function nextPoint(point, isSkipInnerOffset) {\n          var node, offset;\n\n          if (nodeLength(point.node) === point.offset) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            var nextTextNode = getNextTextNode(point.node);\n\n            if (nextTextNode) {\n              node = nextTextNode;\n              offset = 0;\n            } else {\n              node = point.node.parentNode;\n              offset = position(point.node) + 1;\n            }\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset];\n            offset = 0;\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /**\n         * returns next boundaryPoint with empty node\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function nextPointWithEmptyNode(point, isSkipInnerOffset) {\n          var node,\n              offset = 0; // if node is empty string node, return current node's sibling.\n\n          if (dom_isEmpty(point.node)) {\n            if (point.node === null) {\n              return null;\n            }\n\n            node = point.node.nextSibling;\n            offset = 0;\n            return {\n              node: node,\n              offset: offset\n            };\n          }\n\n          if (nodeLength(point.node) === point.offset) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            node = point.node.parentNode;\n            offset = position(point.node) + 1; // if next node is editable ,  return current node's sibling node.\n\n            if (isEditable(node)) {\n              node = point.node.nextSibling;\n              offset = 0;\n            }\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset];\n            offset = 0;\n\n            if (dom_isEmpty(node)) {\n              if (!dom_isEmpty(point.node.nextSibling)) {\n                return {\n                  node: point.node.nextSibling,\n                  offset: offset\n                };\n              }\n\n              return null;\n            }\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\n\n            if (dom_isEmpty(node)) {\n              return null;\n            }\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /*\n        * returns the next Text node index or 0 if not found.\n        */\n\n\n        function getNextTextNode(actual) {\n          if (!actual.nextSibling) return undefined;\n          if (actual.parent !== actual.nextSibling.parent) return undefined;\n          if (isText(actual.nextSibling)) return actual.nextSibling;else return getNextTextNode(actual.nextSibling);\n        }\n        /**\n         * returns whether pointA and pointB is same or not.\n         *\n         * @param {BoundaryPoint} pointA\n         * @param {BoundaryPoint} pointB\n         * @return {Boolean}\n         */\n\n\n        function isSamePoint(pointA, pointB) {\n          return pointA.node === pointB.node && pointA.offset === pointB.offset;\n        }\n        /**\n         * returns whether point is visible (can set cursor) or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isVisiblePoint(point) {\n          if (isText(point.node) || !hasChildren(point.node) || dom_isEmpty(point.node)) {\n            return true;\n          }\n\n          var leftNode = point.node.childNodes[point.offset - 1];\n          var rightNode = point.node.childNodes[point.offset];\n\n          if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode)) || isTable(rightNode)) {\n            return true;\n          }\n\n          return false;\n        }\n        /**\n         * @method prevPointUtil\n         *\n         * @param {BoundaryPoint} point\n         * @param {Function} pred\n         * @return {BoundaryPoint}\n         */\n\n\n        function prevPointUntil(point, pred) {\n          while (point) {\n            if (pred(point)) {\n              return point;\n            }\n\n            point = prevPoint(point);\n          }\n\n          return null;\n        }\n        /**\n         * @method nextPointUntil\n         *\n         * @param {BoundaryPoint} point\n         * @param {Function} pred\n         * @return {BoundaryPoint}\n         */\n\n\n        function nextPointUntil(point, pred) {\n          while (point) {\n            if (pred(point)) {\n              return point;\n            }\n\n            point = nextPoint(point);\n          }\n\n          return null;\n        }\n        /**\n         * returns whether point has character or not.\n         *\n         * @param {Point} point\n         * @return {Boolean}\n         */\n\n\n        function isCharPoint(point) {\n          if (!isText(point.node)) {\n            return false;\n          }\n\n          var ch = point.node.nodeValue.charAt(point.offset - 1);\n          return ch && ch !== ' ' && ch !== NBSP_CHAR;\n        }\n        /**\n         * returns whether point has space or not.\n         *\n         * @param {Point} point\n         * @return {Boolean}\n         */\n\n\n        function isSpacePoint(point) {\n          if (!isText(point.node)) {\n            return false;\n          }\n\n          var ch = point.node.nodeValue.charAt(point.offset - 1);\n          return ch === ' ' || ch === NBSP_CHAR;\n        }\n        /**\n         * @method walkPoint\n         *\n         * @param {BoundaryPoint} startPoint\n         * @param {BoundaryPoint} endPoint\n         * @param {Function} handler\n         * @param {Boolean} isSkipInnerOffset\n         */\n\n\n        function walkPoint(startPoint, endPoint, handler, isSkipInnerOffset) {\n          var point = startPoint;\n\n          while (point) {\n            handler(point);\n\n            if (isSamePoint(point, endPoint)) {\n              break;\n            }\n\n            var isSkipOffset = isSkipInnerOffset && startPoint.node !== point.node && endPoint.node !== point.node;\n            point = nextPointWithEmptyNode(point, isSkipOffset);\n          }\n        }\n        /**\n         * @method makeOffsetPath\n         *\n         * return offsetPath(array of offset) from ancestor\n         *\n         * @param {Node} ancestor - ancestor node\n         * @param {Node} node\n         */\n\n\n        function makeOffsetPath(ancestor, node) {\n          var ancestors = listAncestor(node, func.eq(ancestor));\n          return ancestors.map(position).reverse();\n        }\n        /**\n         * @method fromOffsetPath\n         *\n         * return element from offsetPath(array of offset)\n         *\n         * @param {Node} ancestor - ancestor node\n         * @param {array} offsets - offsetPath\n         */\n\n\n        function fromOffsetPath(ancestor, offsets) {\n          var current = ancestor;\n\n          for (var i = 0, len = offsets.length; i < len; i++) {\n            if (current.childNodes.length <= offsets[i]) {\n              current = current.childNodes[current.childNodes.length - 1];\n            } else {\n              current = current.childNodes[offsets[i]];\n            }\n          }\n\n          return current;\n        }\n        /**\n         * @method splitNode\n         *\n         * split element or #text\n         *\n         * @param {BoundaryPoint} point\n         * @param {Object} [options]\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n         * @param {Boolean} [options.isDiscardEmptySplits] - default: false\n         * @return {Node} right node of boundaryPoint\n         */\n\n\n        function splitNode(point, options) {\n          var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;\n          var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;\n          var isDiscardEmptySplits = options && options.isDiscardEmptySplits;\n\n          if (isDiscardEmptySplits) {\n            isSkipPaddingBlankHTML = true;\n          } // edge case\n\n\n          if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {\n            if (isLeftEdgePoint(point)) {\n              return point.node;\n            } else if (isRightEdgePoint(point)) {\n              return point.node.nextSibling;\n            }\n          } // split #text\n\n\n          if (isText(point.node)) {\n            return point.node.splitText(point.offset);\n          } else {\n            var childNode = point.node.childNodes[point.offset];\n            var clone = insertAfter(point.node.cloneNode(false), point.node);\n            appendChildNodes(clone, listNext(childNode));\n\n            if (!isSkipPaddingBlankHTML) {\n              paddingBlankHTML(point.node);\n              paddingBlankHTML(clone);\n            }\n\n            if (isDiscardEmptySplits) {\n              if (dom_isEmpty(point.node)) {\n                remove(point.node);\n              }\n\n              if (dom_isEmpty(clone)) {\n                remove(clone);\n                return point.node.nextSibling;\n              }\n            }\n\n            return clone;\n          }\n        }\n        /**\n         * @method splitTree\n         *\n         * split tree by point\n         *\n         * @param {Node} root - split root\n         * @param {BoundaryPoint} point\n         * @param {Object} [options]\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n         * @return {Node} right node of boundaryPoint\n         */\n\n\n        function splitTree(root, point, options) {\n          // ex) [#text, <span>, <p>]\n          var ancestors = listAncestor(point.node, func.eq(root));\n\n          if (!ancestors.length) {\n            return null;\n          } else if (ancestors.length === 1) {\n            return splitNode(point, options);\n          }\n\n          return ancestors.reduce(function (node, parent) {\n            if (node === point.node) {\n              node = splitNode(point, options);\n            }\n\n            return splitNode({\n              node: parent,\n              offset: node ? position(node) : nodeLength(parent)\n            }, options);\n          });\n        }\n        /**\n         * split point\n         *\n         * @param {Point} point\n         * @param {Boolean} isInline\n         * @return {Object}\n         */\n\n\n        function splitPoint(point, isInline) {\n          // find splitRoot, container\n          //  - inline: splitRoot is a child of paragraph\n          //  - block: splitRoot is a child of bodyContainer\n          var pred = isInline ? isPara : isBodyContainer;\n          var ancestors = listAncestor(point.node, pred);\n          var topAncestor = lists.last(ancestors) || point.node;\n          var splitRoot, container;\n\n          if (pred(topAncestor)) {\n            splitRoot = ancestors[ancestors.length - 2];\n            container = topAncestor;\n          } else {\n            splitRoot = topAncestor;\n            container = splitRoot.parentNode;\n          } // if splitRoot is exists, split with splitTree\n\n\n          var pivot = splitRoot && splitTree(splitRoot, point, {\n            isSkipPaddingBlankHTML: isInline,\n            isNotSplitEdgePoint: isInline\n          }); // if container is point.node, find pivot with point.offset\n\n          if (!pivot && container === point.node) {\n            pivot = point.node.childNodes[point.offset];\n          }\n\n          return {\n            rightNode: pivot,\n            container: container\n          };\n        }\n\n        function create(nodeName) {\n          return document.createElement(nodeName);\n        }\n\n        function createText(text) {\n          return document.createTextNode(text);\n        }\n        /**\n         * @method remove\n         *\n         * remove node, (isRemoveChild: remove child or not)\n         *\n         * @param {Node} node\n         * @param {Boolean} isRemoveChild\n         */\n\n\n        function remove(node, isRemoveChild) {\n          if (!node || !node.parentNode) {\n            return;\n          }\n\n          if (node.removeNode) {\n            return node.removeNode(isRemoveChild);\n          }\n\n          var parent = node.parentNode;\n\n          if (!isRemoveChild) {\n            var nodes = [];\n\n            for (var i = 0, len = node.childNodes.length; i < len; i++) {\n              nodes.push(node.childNodes[i]);\n            }\n\n            for (var _i = 0, _len = nodes.length; _i < _len; _i++) {\n              parent.insertBefore(nodes[_i], node);\n            }\n          }\n\n          parent.removeChild(node);\n        }\n        /**\n         * @method removeWhile\n         *\n         * @param {Node} node\n         * @param {Function} pred\n         */\n\n\n        function removeWhile(node, pred) {\n          while (node) {\n            if (isEditable(node) || !pred(node)) {\n              break;\n            }\n\n            var parent = node.parentNode;\n            remove(node);\n            node = parent;\n          }\n        }\n        /**\n         * @method replace\n         *\n         * replace node with provided nodeName\n         *\n         * @param {Node} node\n         * @param {String} nodeName\n         * @return {Node} - new node\n         */\n\n\n        function replace(node, nodeName) {\n          if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            return node;\n          }\n\n          var newNode = create(nodeName);\n\n          if (node.style.cssText) {\n            newNode.style.cssText = node.style.cssText;\n          }\n\n          appendChildNodes(newNode, lists.from(node.childNodes));\n          insertAfter(newNode, node);\n          remove(node);\n          return newNode;\n        }\n\n        var isTextarea = makePredByNodeName('TEXTAREA');\n        /**\n         * @param {jQuery} $node\n         * @param {Boolean} [stripLinebreaks] - default: false\n         */\n\n        function value($node, stripLinebreaks) {\n          var val = isTextarea($node[0]) ? $node.val() : $node.html();\n\n          if (stripLinebreaks) {\n            return val.replace(/[\\n\\r]/g, '');\n          }\n\n          return val;\n        }\n        /**\n         * @method html\n         *\n         * get the HTML contents of node\n         *\n         * @param {jQuery} $node\n         * @param {Boolean} [isNewlineOnBlock]\n         */\n\n\n        function html($node, isNewlineOnBlock) {\n          var markup = value($node);\n\n          if (isNewlineOnBlock) {\n            var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;\n            markup = markup.replace(regexTag, function (match, endSlash, name) {\n              name = name.toUpperCase();\n              var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) && !!endSlash;\n              var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);\n              return match + (isEndOfInlineContainer || isBlockNode ? '\\n' : '');\n            });\n            markup = markup.trim();\n          }\n\n          return markup;\n        }\n\n        function posFromPlaceholder(placeholder) {\n          var $placeholder = external_jQuery_default()(placeholder);\n          var pos = $placeholder.offset();\n          var height = $placeholder.outerHeight(true); // include margin\n\n          return {\n            left: pos.left,\n            top: pos.top + height\n          };\n        }\n\n        function attachEvents($node, events) {\n          Object.keys(events).forEach(function (key) {\n            $node.on(key, events[key]);\n          });\n        }\n\n        function detachEvents($node, events) {\n          Object.keys(events).forEach(function (key) {\n            $node.off(key, events[key]);\n          });\n        }\n        /**\n         * @method isCustomStyleTag\n         *\n         * assert if a node contains a \"note-styletag\" class,\n         * which implies that's a custom-made style tag node\n         *\n         * @param {Node} an HTML DOM node\n         */\n\n\n        function isCustomStyleTag(node) {\n          return node && !isText(node) && lists.contains(node.classList, 'note-styletag');\n        }\n        /* harmony default export */\n\n\n        const dom = {\n          /** @property {String} NBSP_CHAR */\n          NBSP_CHAR: NBSP_CHAR,\n\n          /** @property {String} ZERO_WIDTH_NBSP_CHAR */\n          ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,\n\n          /** @property {String} blank */\n          blank: blankHTML,\n\n          /** @property {String} emptyPara */\n          emptyPara: \"<p>\".concat(blankHTML, \"</p>\"),\n          makePredByNodeName: makePredByNodeName,\n          isEditable: isEditable,\n          isControlSizing: isControlSizing,\n          isText: isText,\n          isElement: isElement,\n          isVoid: isVoid,\n          isPara: isPara,\n          isPurePara: isPurePara,\n          isHeading: isHeading,\n          isInline: isInline,\n          isBlock: func.not(isInline),\n          isBodyInline: isBodyInline,\n          isBody: isBody,\n          isParaInline: isParaInline,\n          isPre: isPre,\n          isList: isList,\n          isTable: isTable,\n          isData: isData,\n          isCell: isCell,\n          isBlockquote: isBlockquote,\n          isBodyContainer: isBodyContainer,\n          isAnchor: isAnchor,\n          isDiv: makePredByNodeName('DIV'),\n          isLi: isLi,\n          isBR: makePredByNodeName('BR'),\n          isSpan: makePredByNodeName('SPAN'),\n          isB: makePredByNodeName('B'),\n          isU: makePredByNodeName('U'),\n          isS: makePredByNodeName('S'),\n          isI: makePredByNodeName('I'),\n          isImg: makePredByNodeName('IMG'),\n          isTextarea: isTextarea,\n          deepestChildIsEmpty: deepestChildIsEmpty,\n          isEmpty: dom_isEmpty,\n          isEmptyAnchor: func.and(isAnchor, dom_isEmpty),\n          isClosestSibling: isClosestSibling,\n          withClosestSiblings: withClosestSiblings,\n          nodeLength: nodeLength,\n          isLeftEdgePoint: isLeftEdgePoint,\n          isRightEdgePoint: isRightEdgePoint,\n          isEdgePoint: isEdgePoint,\n          isLeftEdgeOf: isLeftEdgeOf,\n          isRightEdgeOf: isRightEdgeOf,\n          isLeftEdgePointOf: isLeftEdgePointOf,\n          isRightEdgePointOf: isRightEdgePointOf,\n          prevPoint: prevPoint,\n          nextPoint: nextPoint,\n          nextPointWithEmptyNode: nextPointWithEmptyNode,\n          isSamePoint: isSamePoint,\n          isVisiblePoint: isVisiblePoint,\n          prevPointUntil: prevPointUntil,\n          nextPointUntil: nextPointUntil,\n          isCharPoint: isCharPoint,\n          isSpacePoint: isSpacePoint,\n          walkPoint: walkPoint,\n          ancestor: ancestor,\n          singleChildAncestor: singleChildAncestor,\n          listAncestor: listAncestor,\n          lastAncestor: lastAncestor,\n          listNext: listNext,\n          listPrev: listPrev,\n          listDescendant: listDescendant,\n          commonAncestor: commonAncestor,\n          wrap: wrap,\n          insertAfter: insertAfter,\n          appendChildNodes: appendChildNodes,\n          position: position,\n          hasChildren: hasChildren,\n          makeOffsetPath: makeOffsetPath,\n          fromOffsetPath: fromOffsetPath,\n          splitTree: splitTree,\n          splitPoint: splitPoint,\n          create: create,\n          createText: createText,\n          remove: remove,\n          removeWhile: removeWhile,\n          replace: replace,\n          html: html,\n          value: value,\n          posFromPlaceholder: posFromPlaceholder,\n          attachEvents: attachEvents,\n          detachEvents: detachEvents,\n          isCustomStyleTag: isCustomStyleTag\n        };\n        ; // CONCATENATED MODULE: ./src/js/Context.js\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Context = /*#__PURE__*/function () {\n          /**\n           * @param {jQuery} $note\n           * @param {Object} options\n           */\n          function Context($note, options) {\n            _classCallCheck(this, Context);\n\n            this.$note = $note;\n            this.memos = {};\n            this.modules = {};\n            this.layoutInfo = {};\n            this.options = external_jQuery_default().extend(true, {}, options); // init ui with options\n\n            external_jQuery_default().summernote.ui = external_jQuery_default().summernote.ui_template(this.options);\n            this.ui = external_jQuery_default().summernote.ui;\n            this.initialize();\n          }\n          /**\n           * create layout and initialize modules and other resources\n           */\n\n\n          _createClass(Context, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.layoutInfo = this.ui.createLayout(this.$note);\n\n              this._initialize();\n\n              this.$note.hide();\n              return this;\n            }\n            /**\n             * destroy modules and other resources and remove layout\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this._destroy();\n\n              this.$note.removeData('summernote');\n              this.ui.removeLayout(this.$note, this.layoutInfo);\n            }\n            /**\n             * destory modules and other resources and initialize it again\n             */\n\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              var disabled = this.isDisabled();\n              this.code(dom.emptyPara);\n\n              this._destroy();\n\n              this._initialize();\n\n              if (disabled) {\n                this.disable();\n              }\n            }\n          }, {\n            key: \"_initialize\",\n            value: function _initialize() {\n              var _this = this; // set own id\n\n\n              this.options.id = func.uniqueId(external_jQuery_default().now()); // set default container for tooltips, popovers, and dialogs\n\n              this.options.container = this.options.container || this.layoutInfo.editor; // add optional buttons\n\n              var buttons = external_jQuery_default().extend({}, this.options.buttons);\n              Object.keys(buttons).forEach(function (key) {\n                _this.memo('button.' + key, buttons[key]);\n              });\n              var modules = external_jQuery_default().extend({}, this.options.modules, external_jQuery_default().summernote.plugins || {}); // add and initialize modules\n\n              Object.keys(modules).forEach(function (key) {\n                _this.module(key, modules[key], true);\n              });\n              Object.keys(this.modules).forEach(function (key) {\n                _this.initializeModule(key);\n              });\n            }\n          }, {\n            key: \"_destroy\",\n            value: function _destroy() {\n              var _this2 = this; // destroy modules with reversed order\n\n\n              Object.keys(this.modules).reverse().forEach(function (key) {\n                _this2.removeModule(key);\n              });\n              Object.keys(this.memos).forEach(function (key) {\n                _this2.removeMemo(key);\n              }); // trigger custom onDestroy callback\n\n              this.triggerEvent('destroy', this);\n            }\n          }, {\n            key: \"code\",\n            value: function code(html) {\n              var isActivated = this.invoke('codeview.isActivated');\n\n              if (html === undefined) {\n                this.invoke('codeview.sync');\n                return isActivated ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();\n              } else {\n                if (isActivated) {\n                  this.invoke('codeview.sync', html);\n                } else {\n                  this.layoutInfo.editable.html(html);\n                }\n\n                this.$note.val(html);\n                this.triggerEvent('change', html, this.layoutInfo.editable);\n              }\n            }\n          }, {\n            key: \"isDisabled\",\n            value: function isDisabled() {\n              return this.layoutInfo.editable.attr('contenteditable') === 'false';\n            }\n          }, {\n            key: \"enable\",\n            value: function enable() {\n              this.layoutInfo.editable.attr('contenteditable', true);\n              this.invoke('toolbar.activate', true);\n              this.triggerEvent('disable', false);\n              this.options.editing = true;\n            }\n          }, {\n            key: \"disable\",\n            value: function disable() {\n              // close codeview if codeview is opend\n              if (this.invoke('codeview.isActivated')) {\n                this.invoke('codeview.deactivate');\n              }\n\n              this.layoutInfo.editable.attr('contenteditable', false);\n              this.options.editing = false;\n              this.invoke('toolbar.deactivate', true);\n              this.triggerEvent('disable', true);\n            }\n          }, {\n            key: \"triggerEvent\",\n            value: function triggerEvent() {\n              var namespace = lists.head(arguments);\n              var args = lists.tail(lists.from(arguments));\n              var callback = this.options.callbacks[func.namespaceToCamel(namespace, 'on')];\n\n              if (callback) {\n                callback.apply(this.$note[0], args);\n              }\n\n              this.$note.trigger('summernote.' + namespace, args);\n            }\n          }, {\n            key: \"initializeModule\",\n            value: function initializeModule(key) {\n              var module = this.modules[key];\n              module.shouldInitialize = module.shouldInitialize || func.ok;\n\n              if (!module.shouldInitialize()) {\n                return;\n              } // initialize module\n\n\n              if (module.initialize) {\n                module.initialize();\n              } // attach events\n\n\n              if (module.events) {\n                dom.attachEvents(this.$note, module.events);\n              }\n            }\n          }, {\n            key: \"module\",\n            value: function module(key, ModuleClass, withoutIntialize) {\n              if (arguments.length === 1) {\n                return this.modules[key];\n              }\n\n              this.modules[key] = new ModuleClass(this);\n\n              if (!withoutIntialize) {\n                this.initializeModule(key);\n              }\n            }\n          }, {\n            key: \"removeModule\",\n            value: function removeModule(key) {\n              var module = this.modules[key];\n\n              if (module.shouldInitialize()) {\n                if (module.events) {\n                  dom.detachEvents(this.$note, module.events);\n                }\n\n                if (module.destroy) {\n                  module.destroy();\n                }\n              }\n\n              delete this.modules[key];\n            }\n          }, {\n            key: \"memo\",\n            value: function memo(key, obj) {\n              if (arguments.length === 1) {\n                return this.memos[key];\n              }\n\n              this.memos[key] = obj;\n            }\n          }, {\n            key: \"removeMemo\",\n            value: function removeMemo(key) {\n              if (this.memos[key] && this.memos[key].destroy) {\n                this.memos[key].destroy();\n              }\n\n              delete this.memos[key];\n            }\n            /**\n             * Some buttons need to change their visual style immediately once they get pressed\n             */\n\n          }, {\n            key: \"createInvokeHandlerAndUpdateState\",\n            value: function createInvokeHandlerAndUpdateState(namespace, value) {\n              var _this3 = this;\n\n              return function (event) {\n                _this3.createInvokeHandler(namespace, value)(event);\n\n                _this3.invoke('buttons.updateCurrentStyle');\n              };\n            }\n          }, {\n            key: \"createInvokeHandler\",\n            value: function createInvokeHandler(namespace, value) {\n              var _this4 = this;\n\n              return function (event) {\n                event.preventDefault();\n                var $target = external_jQuery_default()(event.target);\n\n                _this4.invoke(namespace, value || $target.closest('[data-value]').data('value'), $target);\n              };\n            }\n          }, {\n            key: \"invoke\",\n            value: function invoke() {\n              var namespace = lists.head(arguments);\n              var args = lists.tail(lists.from(arguments));\n              var splits = namespace.split('.');\n              var hasSeparator = splits.length > 1;\n              var moduleName = hasSeparator && lists.head(splits);\n              var methodName = hasSeparator ? lists.last(splits) : lists.head(splits);\n              var module = this.modules[moduleName || 'editor'];\n\n              if (!moduleName && this[methodName]) {\n                return this[methodName].apply(this, args);\n              } else if (module && module[methodName] && module.shouldInitialize()) {\n                return module[methodName].apply(module, args);\n              }\n            }\n          }]);\n\n          return Context;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/summernote.js\n\n        external_jQuery_default().fn.extend({\n          /**\n           * Summernote API\n           *\n           * @param {Object|String}\n           * @return {this}\n           */\n          summernote: function summernote() {\n            var type = external_jQuery_default().type(lists.head(arguments));\n            var isExternalAPICalled = type === 'string';\n            var hasInitOptions = type === 'object';\n            var options = external_jQuery_default().extend({}, external_jQuery_default().summernote.options, hasInitOptions ? lists.head(arguments) : {}); // Update options\n\n            options.langInfo = external_jQuery_default().extend(true, {}, external_jQuery_default().summernote.lang[\"en-US\"], external_jQuery_default().summernote.lang[options.lang]);\n            options.icons = external_jQuery_default().extend(true, {}, external_jQuery_default().summernote.options.icons, options.icons);\n            options.tooltip = options.tooltip === 'auto' ? !env.isSupportTouch : options.tooltip;\n            this.each(function (idx, note) {\n              var $note = external_jQuery_default()(note);\n\n              if (!$note.data('summernote')) {\n                var context = new Context($note, options);\n                $note.data('summernote', context);\n                $note.data('summernote').triggerEvent('init', context.layoutInfo);\n              }\n            });\n            var $note = this.first();\n\n            if ($note.length) {\n              var context = $note.data('summernote');\n\n              if (isExternalAPICalled) {\n                return context.invoke.apply(context, lists.from(arguments));\n              } else if (options.focus) {\n                context.invoke('editor.focus');\n              }\n            }\n\n            return this;\n          }\n        });\n        ; // CONCATENATED MODULE: ./src/js/core/range.js\n\n        function range_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function range_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function range_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) range_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) range_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js\n         *\n         * @param {TextRange} textRange\n         * @param {Boolean} isStart\n         * @return {BoundaryPoint}\n         *\n         * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx\n         */\n\n\n        function textRangeToPoint(textRange, isStart) {\n          var container = textRange.parentElement();\n          var offset;\n          var tester = document.body.createTextRange();\n          var prevContainer;\n          var childNodes = lists.from(container.childNodes);\n\n          for (offset = 0; offset < childNodes.length; offset++) {\n            if (dom.isText(childNodes[offset])) {\n              continue;\n            }\n\n            tester.moveToElementText(childNodes[offset]);\n\n            if (tester.compareEndPoints('StartToStart', textRange) >= 0) {\n              break;\n            }\n\n            prevContainer = childNodes[offset];\n          }\n\n          if (offset !== 0 && dom.isText(childNodes[offset - 1])) {\n            var textRangeStart = document.body.createTextRange();\n            var curTextNode = null;\n            textRangeStart.moveToElementText(prevContainer || container);\n            textRangeStart.collapse(!prevContainer);\n            curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;\n            var pointTester = textRange.duplicate();\n            pointTester.setEndPoint('StartToStart', textRangeStart);\n            var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;\n\n            while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {\n              textCount -= curTextNode.nodeValue.length;\n              curTextNode = curTextNode.nextSibling;\n            } // [workaround] enforce IE to re-reference curTextNode, hack\n\n\n            var dummy = curTextNode.nodeValue; // eslint-disable-line\n\n            if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) && textCount === curTextNode.nodeValue.length) {\n              textCount -= curTextNode.nodeValue.length;\n              curTextNode = curTextNode.nextSibling;\n            }\n\n            container = curTextNode;\n            offset = textCount;\n          }\n\n          return {\n            cont: container,\n            offset: offset\n          };\n        }\n        /**\n         * return TextRange from boundary point (inspired by google closure-library)\n         * @param {BoundaryPoint} point\n         * @return {TextRange}\n         */\n\n\n        function pointToTextRange(point) {\n          var textRangeInfo = function textRangeInfo(container, offset) {\n            var node, isCollapseToStart;\n\n            if (dom.isText(container)) {\n              var prevTextNodes = dom.listPrev(container, func.not(dom.isText));\n              var prevContainer = lists.last(prevTextNodes).previousSibling;\n              node = prevContainer || container.parentNode;\n              offset += lists.sum(lists.tail(prevTextNodes), dom.nodeLength);\n              isCollapseToStart = !prevContainer;\n            } else {\n              node = container.childNodes[offset] || container;\n\n              if (dom.isText(node)) {\n                return textRangeInfo(node, 0);\n              }\n\n              offset = 0;\n              isCollapseToStart = false;\n            }\n\n            return {\n              node: node,\n              collapseToStart: isCollapseToStart,\n              offset: offset\n            };\n          };\n\n          var textRange = document.body.createTextRange();\n          var info = textRangeInfo(point.node, point.offset);\n          textRange.moveToElementText(info.node);\n          textRange.collapse(info.collapseToStart);\n          textRange.moveStart('character', info.offset);\n          return textRange;\n        }\n        /**\n           * Wrapped Range\n           *\n           * @constructor\n           * @param {Node} sc - start container\n           * @param {Number} so - start offset\n           * @param {Node} ec - end container\n           * @param {Number} eo - end offset\n           */\n\n\n        var WrappedRange = /*#__PURE__*/function () {\n          function WrappedRange(sc, so, ec, eo) {\n            range_classCallCheck(this, WrappedRange);\n            this.sc = sc;\n            this.so = so;\n            this.ec = ec;\n            this.eo = eo; // isOnEditable: judge whether range is on editable or not\n\n            this.isOnEditable = this.makeIsOn(dom.isEditable); // isOnList: judge whether range is on list node or not\n\n            this.isOnList = this.makeIsOn(dom.isList); // isOnAnchor: judge whether range is on anchor node or not\n\n            this.isOnAnchor = this.makeIsOn(dom.isAnchor); // isOnCell: judge whether range is on cell node or not\n\n            this.isOnCell = this.makeIsOn(dom.isCell); // isOnData: judge whether range is on data node or not\n\n            this.isOnData = this.makeIsOn(dom.isData);\n          } // nativeRange: get nativeRange from sc, so, ec, eo\n\n\n          range_createClass(WrappedRange, [{\n            key: \"nativeRange\",\n            value: function nativeRange() {\n              if (env.isW3CRangeSupport) {\n                var w3cRange = document.createRange();\n                w3cRange.setStart(this.sc, this.so);\n                w3cRange.setEnd(this.ec, this.eo);\n                return w3cRange;\n              } else {\n                var textRange = pointToTextRange({\n                  node: this.sc,\n                  offset: this.so\n                });\n                textRange.setEndPoint('EndToEnd', pointToTextRange({\n                  node: this.ec,\n                  offset: this.eo\n                }));\n                return textRange;\n              }\n            }\n          }, {\n            key: \"getPoints\",\n            value: function getPoints() {\n              return {\n                sc: this.sc,\n                so: this.so,\n                ec: this.ec,\n                eo: this.eo\n              };\n            }\n          }, {\n            key: \"getStartPoint\",\n            value: function getStartPoint() {\n              return {\n                node: this.sc,\n                offset: this.so\n              };\n            }\n          }, {\n            key: \"getEndPoint\",\n            value: function getEndPoint() {\n              return {\n                node: this.ec,\n                offset: this.eo\n              };\n            }\n            /**\n             * select update visible range\n             */\n\n          }, {\n            key: \"select\",\n            value: function select() {\n              var nativeRng = this.nativeRange();\n\n              if (env.isW3CRangeSupport) {\n                var selection = document.getSelection();\n\n                if (selection.rangeCount > 0) {\n                  selection.removeAllRanges();\n                }\n\n                selection.addRange(nativeRng);\n              } else {\n                nativeRng.select();\n              }\n\n              return this;\n            }\n            /**\n             * Moves the scrollbar to start container(sc) of current range\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"scrollIntoView\",\n            value: function scrollIntoView(container) {\n              var height = external_jQuery_default()(container).height();\n\n              if (container.scrollTop + height < this.sc.offsetTop) {\n                container.scrollTop += Math.abs(container.scrollTop + height - this.sc.offsetTop);\n              }\n\n              return this;\n            }\n            /**\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"normalize\",\n            value: function normalize() {\n              /**\n               * @param {BoundaryPoint} point\n               * @param {Boolean} isLeftToRight - true: prefer to choose right node\n               *                                - false: prefer to choose left node\n               * @return {BoundaryPoint}\n               */\n              var getVisiblePoint = function getVisiblePoint(point, isLeftToRight) {\n                if (!point) {\n                  return point;\n                } // Just use the given point [XXX:Adhoc]\n                //  - case 01. if the point is on the middle of the node\n                //  - case 02. if the point is on the right edge and prefer to choose left node\n                //  - case 03. if the point is on the left edge and prefer to choose right node\n                //  - case 04. if the point is on the right edge and prefer to choose right node but the node is void\n                //  - case 05. if the point is on the left edge and prefer to choose left node but the node is void\n                //  - case 06. if the point is on the block node and there is no children\n\n\n                if (dom.isVisiblePoint(point)) {\n                  if (!dom.isEdgePoint(point) || dom.isRightEdgePoint(point) && !isLeftToRight || dom.isLeftEdgePoint(point) && isLeftToRight || dom.isRightEdgePoint(point) && isLeftToRight && dom.isVoid(point.node.nextSibling) || dom.isLeftEdgePoint(point) && !isLeftToRight && dom.isVoid(point.node.previousSibling) || dom.isBlock(point.node) && dom.isEmpty(point.node)) {\n                    return point;\n                  }\n                } // point on block's edge\n\n\n                var block = dom.ancestor(point.node, dom.isBlock);\n                var hasRightNode = false;\n\n                if (!hasRightNode) {\n                  var prevPoint = dom.prevPoint(point) || {\n                    node: null\n                  };\n                  hasRightNode = (dom.isLeftEdgePointOf(point, block) || dom.isVoid(prevPoint.node)) && !isLeftToRight;\n                }\n\n                var hasLeftNode = false;\n\n                if (!hasLeftNode) {\n                  var _nextPoint = dom.nextPoint(point) || {\n                    node: null\n                  };\n\n                  hasLeftNode = (dom.isRightEdgePointOf(point, block) || dom.isVoid(_nextPoint.node)) && isLeftToRight;\n                }\n\n                if (hasRightNode || hasLeftNode) {\n                  // returns point already on visible point\n                  if (dom.isVisiblePoint(point)) {\n                    return point;\n                  } // reverse direction\n\n\n                  isLeftToRight = !isLeftToRight;\n                }\n\n                var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) : dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);\n                return nextPoint || point;\n              };\n\n              var endPoint = getVisiblePoint(this.getEndPoint(), false);\n              var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns matched nodes on range\n             *\n             * @param {Function} [pred] - predicate function\n             * @param {Object} [options]\n             * @param {Boolean} [options.includeAncestor]\n             * @param {Boolean} [options.fullyContains]\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"nodes\",\n            value: function nodes(pred, options) {\n              pred = pred || func.ok;\n              var includeAncestor = options && options.includeAncestor;\n              var fullyContains = options && options.fullyContains; // TODO compare points and sort\n\n              var startPoint = this.getStartPoint();\n              var endPoint = this.getEndPoint();\n              var nodes = [];\n              var leftEdgeNodes = [];\n              dom.walkPoint(startPoint, endPoint, function (point) {\n                if (dom.isEditable(point.node)) {\n                  return;\n                }\n\n                var node;\n\n                if (fullyContains) {\n                  if (dom.isLeftEdgePoint(point)) {\n                    leftEdgeNodes.push(point.node);\n                  }\n\n                  if (dom.isRightEdgePoint(point) && lists.contains(leftEdgeNodes, point.node)) {\n                    node = point.node;\n                  }\n                } else if (includeAncestor) {\n                  node = dom.ancestor(point.node, pred);\n                } else {\n                  node = point.node;\n                }\n\n                if (node && pred(node)) {\n                  nodes.push(node);\n                }\n              }, true);\n              return lists.unique(nodes);\n            }\n            /**\n             * returns commonAncestor of range\n             * @return {Element} - commonAncestor\n             */\n\n          }, {\n            key: \"commonAncestor\",\n            value: function commonAncestor() {\n              return dom.commonAncestor(this.sc, this.ec);\n            }\n            /**\n             * returns expanded range by pred\n             *\n             * @param {Function} pred - predicate function\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"expand\",\n            value: function expand(pred) {\n              var startAncestor = dom.ancestor(this.sc, pred);\n              var endAncestor = dom.ancestor(this.ec, pred);\n\n              if (!startAncestor && !endAncestor) {\n                return new WrappedRange(this.sc, this.so, this.ec, this.eo);\n              }\n\n              var boundaryPoints = this.getPoints();\n\n              if (startAncestor) {\n                boundaryPoints.sc = startAncestor;\n                boundaryPoints.so = 0;\n              }\n\n              if (endAncestor) {\n                boundaryPoints.ec = endAncestor;\n                boundaryPoints.eo = dom.nodeLength(endAncestor);\n              }\n\n              return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);\n            }\n            /**\n             * @param {Boolean} isCollapseToStart\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"collapse\",\n            value: function collapse(isCollapseToStart) {\n              if (isCollapseToStart) {\n                return new WrappedRange(this.sc, this.so, this.sc, this.so);\n              } else {\n                return new WrappedRange(this.ec, this.eo, this.ec, this.eo);\n              }\n            }\n            /**\n             * splitText on range\n             */\n\n          }, {\n            key: \"splitText\",\n            value: function splitText() {\n              var isSameContainer = this.sc === this.ec;\n              var boundaryPoints = this.getPoints();\n\n              if (dom.isText(this.ec) && !dom.isEdgePoint(this.getEndPoint())) {\n                this.ec.splitText(this.eo);\n              }\n\n              if (dom.isText(this.sc) && !dom.isEdgePoint(this.getStartPoint())) {\n                boundaryPoints.sc = this.sc.splitText(this.so);\n                boundaryPoints.so = 0;\n\n                if (isSameContainer) {\n                  boundaryPoints.ec = boundaryPoints.sc;\n                  boundaryPoints.eo = this.eo - this.so;\n                }\n              }\n\n              return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);\n            }\n            /**\n             * delete contents on range\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"deleteContents\",\n            value: function deleteContents() {\n              if (this.isCollapsed()) {\n                return this;\n              }\n\n              var rng = this.splitText();\n              var nodes = rng.nodes(null, {\n                fullyContains: true\n              }); // find new cursor point\n\n              var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {\n                return !lists.contains(nodes, point.node);\n              });\n              var emptyParents = [];\n              external_jQuery_default().each(nodes, function (idx, node) {\n                // find empty parents\n                var parent = node.parentNode;\n\n                if (point.node !== parent && dom.nodeLength(parent) === 1) {\n                  emptyParents.push(parent);\n                }\n\n                dom.remove(node, false);\n              }); // remove empty parents\n\n              external_jQuery_default().each(emptyParents, function (idx, node) {\n                dom.remove(node, false);\n              });\n              return new WrappedRange(point.node, point.offset, point.node, point.offset).normalize();\n            }\n            /**\n             * makeIsOn: return isOn(pred) function\n             */\n\n          }, {\n            key: \"makeIsOn\",\n            value: function makeIsOn(pred) {\n              return function () {\n                var ancestor = dom.ancestor(this.sc, pred);\n                return !!ancestor && ancestor === dom.ancestor(this.ec, pred);\n              };\n            }\n            /**\n             * @param {Function} pred\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isLeftEdgeOf\",\n            value: function isLeftEdgeOf(pred) {\n              if (!dom.isLeftEdgePoint(this.getStartPoint())) {\n                return false;\n              }\n\n              var node = dom.ancestor(this.sc, pred);\n              return node && dom.isLeftEdgeOf(this.sc, node);\n            }\n            /**\n             * returns whether range was collapsed or not\n             */\n\n          }, {\n            key: \"isCollapsed\",\n            value: function isCollapsed() {\n              return this.sc === this.ec && this.so === this.eo;\n            }\n            /**\n             * wrap inline nodes which children of body with paragraph\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"wrapBodyInlineWithPara\",\n            value: function wrapBodyInlineWithPara() {\n              if (dom.isBodyContainer(this.sc) && dom.isEmpty(this.sc)) {\n                this.sc.innerHTML = dom.emptyPara;\n                return new WrappedRange(this.sc.firstChild, 0, this.sc.firstChild, 0);\n              }\n              /**\n               * [workaround] firefox often create range on not visible point. so normalize here.\n               *  - firefox: |<p>text</p>|\n               *  - chrome: <p>|text|</p>\n               */\n\n\n              var rng = this.normalize();\n\n              if (dom.isParaInline(this.sc) || dom.isPara(this.sc)) {\n                return rng;\n              } // find inline top ancestor\n\n\n              var topAncestor;\n\n              if (dom.isInline(rng.sc)) {\n                var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));\n                topAncestor = lists.last(ancestors);\n\n                if (!dom.isInline(topAncestor)) {\n                  topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];\n                }\n              } else {\n                topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];\n              }\n\n              if (topAncestor) {\n                // siblings not in paragraph\n                var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();\n                inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline)); // wrap with paragraph\n\n                if (inlineSiblings.length) {\n                  var para = dom.wrap(lists.head(inlineSiblings), 'p');\n                  dom.appendChildNodes(para, lists.tail(inlineSiblings));\n                }\n              }\n\n              return this.normalize();\n            }\n            /**\n             * insert node at current cursor\n             *\n             * @param {Node} node\n             * @return {Node}\n             */\n\n          }, {\n            key: \"insertNode\",\n            value: function insertNode(node) {\n              var rng = this;\n\n              if (dom.isText(node) || dom.isInline(node)) {\n                rng = this.wrapBodyInlineWithPara().deleteContents();\n              }\n\n              var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));\n\n              if (info.rightNode) {\n                info.rightNode.parentNode.insertBefore(node, info.rightNode);\n\n                if (dom.isEmpty(info.rightNode) && dom.isPara(node)) {\n                  info.rightNode.parentNode.removeChild(info.rightNode);\n                }\n              } else {\n                info.container.appendChild(node);\n              }\n\n              return node;\n            }\n            /**\n             * insert html at current cursor\n             */\n\n          }, {\n            key: \"pasteHTML\",\n            value: function pasteHTML(markup) {\n              markup = external_jQuery_default().trim(markup);\n              var contentsContainer = external_jQuery_default()('<div></div>').html(markup)[0];\n              var childNodes = lists.from(contentsContainer.childNodes); // const rng = this.wrapBodyInlineWithPara().deleteContents();\n\n              var rng = this;\n              var reversed = false;\n\n              if (rng.so >= 0) {\n                childNodes = childNodes.reverse();\n                reversed = true;\n              }\n\n              childNodes = childNodes.map(function (childNode) {\n                return rng.insertNode(childNode);\n              });\n\n              if (reversed) {\n                childNodes = childNodes.reverse();\n              }\n\n              return childNodes;\n            }\n            /**\n             * returns text in range\n             *\n             * @return {String}\n             */\n\n          }, {\n            key: \"toString\",\n            value: function toString() {\n              var nativeRng = this.nativeRange();\n              return env.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;\n            }\n            /**\n             * returns range for word before cursor\n             *\n             * @param {Boolean} [findAfter] - find after cursor, default: false\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getWordRange\",\n            value: function getWordRange(findAfter) {\n              var endPoint = this.getEndPoint();\n\n              if (!dom.isCharPoint(endPoint)) {\n                return this;\n              }\n\n              var startPoint = dom.prevPointUntil(endPoint, function (point) {\n                return !dom.isCharPoint(point);\n              });\n\n              if (findAfter) {\n                endPoint = dom.nextPointUntil(endPoint, function (point) {\n                  return !dom.isCharPoint(point);\n                });\n              }\n\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns range for words before cursor\n             *\n             * @param {Boolean} [findAfter] - find after cursor, default: false\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getWordsRange\",\n            value: function getWordsRange(findAfter) {\n              var endPoint = this.getEndPoint();\n\n              var isNotTextPoint = function isNotTextPoint(point) {\n                return !dom.isCharPoint(point) && !dom.isSpacePoint(point);\n              };\n\n              if (isNotTextPoint(endPoint)) {\n                return this;\n              }\n\n              var startPoint = dom.prevPointUntil(endPoint, isNotTextPoint);\n\n              if (findAfter) {\n                endPoint = dom.nextPointUntil(endPoint, isNotTextPoint);\n              }\n\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns range for words before cursor that match with a Regex\n             *\n             * example:\n             *  range: 'hi @Peter Pan'\n             *  regex: '/@[a-z ]+/i'\n             *  return range: '@Peter Pan'\n             *\n             * @param {RegExp} [regex]\n             * @return {WrappedRange|null}\n             */\n\n          }, {\n            key: \"getWordsMatchRange\",\n            value: function getWordsMatchRange(regex) {\n              var endPoint = this.getEndPoint();\n              var startPoint = dom.prevPointUntil(endPoint, function (point) {\n                if (!dom.isCharPoint(point) && !dom.isSpacePoint(point)) {\n                  return true;\n                }\n\n                var rng = new WrappedRange(point.node, point.offset, endPoint.node, endPoint.offset);\n                var result = regex.exec(rng.toString());\n                return result && result.index === 0;\n              });\n              var rng = new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n              var text = rng.toString();\n              var result = regex.exec(text);\n\n              if (result && result[0].length === text.length) {\n                return rng;\n              } else {\n                return null;\n              }\n            }\n            /**\n             * create offsetPath bookmark\n             *\n             * @param {Node} editable\n             */\n\n          }, {\n            key: \"bookmark\",\n            value: function bookmark(editable) {\n              return {\n                s: {\n                  path: dom.makeOffsetPath(editable, this.sc),\n                  offset: this.so\n                },\n                e: {\n                  path: dom.makeOffsetPath(editable, this.ec),\n                  offset: this.eo\n                }\n              };\n            }\n            /**\n             * create offsetPath bookmark base on paragraph\n             *\n             * @param {Node[]} paras\n             */\n\n          }, {\n            key: \"paraBookmark\",\n            value: function paraBookmark(paras) {\n              return {\n                s: {\n                  path: lists.tail(dom.makeOffsetPath(lists.head(paras), this.sc)),\n                  offset: this.so\n                },\n                e: {\n                  path: lists.tail(dom.makeOffsetPath(lists.last(paras), this.ec)),\n                  offset: this.eo\n                }\n              };\n            }\n            /**\n             * getClientRects\n             * @return {Rect[]}\n             */\n\n          }, {\n            key: \"getClientRects\",\n            value: function getClientRects() {\n              var nativeRng = this.nativeRange();\n              return nativeRng.getClientRects();\n            }\n          }]);\n          return WrappedRange;\n        }();\n        /**\n         * Data structure\n         *  * BoundaryPoint: a point of dom tree\n         *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range\n         *\n         * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position\n         */\n\n        /* harmony default export */\n\n\n        const range = {\n          /**\n           * create Range Object From arguments or Browser Selection\n           *\n           * @param {Node} sc - start container\n           * @param {Number} so - start offset\n           * @param {Node} ec - end container\n           * @param {Number} eo - end offset\n           * @return {WrappedRange}\n           */\n          create: function create(sc, so, ec, eo) {\n            if (arguments.length === 4) {\n              return new WrappedRange(sc, so, ec, eo);\n            } else if (arguments.length === 2) {\n              // collapsed\n              ec = sc;\n              eo = so;\n              return new WrappedRange(sc, so, ec, eo);\n            } else {\n              var wrappedRange = this.createFromSelection();\n\n              if (!wrappedRange && arguments.length === 1) {\n                var bodyElement = arguments[0];\n\n                if (dom.isEditable(bodyElement)) {\n                  bodyElement = bodyElement.lastChild;\n                }\n\n                return this.createFromBodyElement(bodyElement, dom.emptyPara === arguments[0].innerHTML);\n              }\n\n              return wrappedRange;\n            }\n          },\n          createFromBodyElement: function createFromBodyElement(bodyElement) {\n            var isCollapseToStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var wrappedRange = this.createFromNode(bodyElement);\n            return wrappedRange.collapse(isCollapseToStart);\n          },\n          createFromSelection: function createFromSelection() {\n            var sc, so, ec, eo;\n\n            if (env.isW3CRangeSupport) {\n              var selection = document.getSelection();\n\n              if (!selection || selection.rangeCount === 0) {\n                return null;\n              } else if (dom.isBody(selection.anchorNode)) {\n                // Firefox: returns entire body as range on initialization.\n                // We won't never need it.\n                return null;\n              }\n\n              var nativeRng = selection.getRangeAt(0);\n              sc = nativeRng.startContainer;\n              so = nativeRng.startOffset;\n              ec = nativeRng.endContainer;\n              eo = nativeRng.endOffset;\n            } else {\n              // IE8: TextRange\n              var textRange = document.selection.createRange();\n              var textRangeEnd = textRange.duplicate();\n              textRangeEnd.collapse(false);\n              var textRangeStart = textRange;\n              textRangeStart.collapse(true);\n              var startPoint = textRangeToPoint(textRangeStart, true);\n              var endPoint = textRangeToPoint(textRangeEnd, false); // same visible point case: range was collapsed.\n\n              if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) && dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) && endPoint.node.nextSibling === startPoint.node) {\n                startPoint = endPoint;\n              }\n\n              sc = startPoint.cont;\n              so = startPoint.offset;\n              ec = endPoint.cont;\n              eo = endPoint.offset;\n            }\n\n            return new WrappedRange(sc, so, ec, eo);\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from node\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNode: function createFromNode(node) {\n            var sc = node;\n            var so = 0;\n            var ec = node;\n            var eo = dom.nodeLength(ec); // browsers can't target a picture or void node\n\n            if (dom.isVoid(sc)) {\n              so = dom.listPrev(sc).length - 1;\n              sc = sc.parentNode;\n            }\n\n            if (dom.isBR(ec)) {\n              eo = dom.listPrev(ec).length - 1;\n              ec = ec.parentNode;\n            } else if (dom.isVoid(ec)) {\n              eo = dom.listPrev(ec).length;\n              ec = ec.parentNode;\n            }\n\n            return this.create(sc, so, ec, eo);\n          },\n\n          /**\n           * create WrappedRange from node after position\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNodeBefore: function createFromNodeBefore(node) {\n            return this.createFromNode(node).collapse(true);\n          },\n\n          /**\n           * create WrappedRange from node after position\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNodeAfter: function createFromNodeAfter(node) {\n            return this.createFromNode(node).collapse();\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from bookmark\n           *\n           * @param {Node} editable\n           * @param {Object} bookmark\n           * @return {WrappedRange}\n           */\n          createFromBookmark: function createFromBookmark(editable, bookmark) {\n            var sc = dom.fromOffsetPath(editable, bookmark.s.path);\n            var so = bookmark.s.offset;\n            var ec = dom.fromOffsetPath(editable, bookmark.e.path);\n            var eo = bookmark.e.offset;\n            return new WrappedRange(sc, so, ec, eo);\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from paraBookmark\n           *\n           * @param {Object} bookmark\n           * @param {Node[]} paras\n           * @return {WrappedRange}\n           */\n          createFromParaBookmark: function createFromParaBookmark(bookmark, paras) {\n            var so = bookmark.s.offset;\n            var eo = bookmark.e.offset;\n            var sc = dom.fromOffsetPath(lists.head(paras), bookmark.s.path);\n            var ec = dom.fromOffsetPath(lists.last(paras), bookmark.e.path);\n            return new WrappedRange(sc, so, ec, eo);\n          }\n        };\n        ; // CONCATENATED MODULE: ./src/js/core/key.js\n\n        var KEY_MAP = {\n          'BACKSPACE': 8,\n          'TAB': 9,\n          'ENTER': 13,\n          'ESCAPE': 27,\n          'SPACE': 32,\n          'DELETE': 46,\n          // Arrow\n          'LEFT': 37,\n          'UP': 38,\n          'RIGHT': 39,\n          'DOWN': 40,\n          // Number: 0-9\n          'NUM0': 48,\n          'NUM1': 49,\n          'NUM2': 50,\n          'NUM3': 51,\n          'NUM4': 52,\n          'NUM5': 53,\n          'NUM6': 54,\n          'NUM7': 55,\n          'NUM8': 56,\n          // Alphabet: a-z\n          'B': 66,\n          'E': 69,\n          'I': 73,\n          'J': 74,\n          'K': 75,\n          'L': 76,\n          'R': 82,\n          'S': 83,\n          'U': 85,\n          'V': 86,\n          'Y': 89,\n          'Z': 90,\n          'SLASH': 191,\n          'LEFTBRACKET': 219,\n          'BACKSLASH': 220,\n          'RIGHTBRACKET': 221,\n          // Navigation\n          'HOME': 36,\n          'END': 35,\n          'PAGEUP': 33,\n          'PAGEDOWN': 34\n        };\n        /**\n         * @class core.key\n         *\n         * Object for keycodes.\n         *\n         * @singleton\n         * @alternateClassName key\n         */\n\n        /* harmony default export */\n\n        const key = {\n          /**\n           * @method isEdit\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isEdit: function isEdit(keyCode) {\n            return lists.contains([KEY_MAP.BACKSPACE, KEY_MAP.TAB, KEY_MAP.ENTER, KEY_MAP.SPACE, KEY_MAP.DELETE], keyCode);\n          },\n\n          /**\n           * @method isMove\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isMove: function isMove(keyCode) {\n            return lists.contains([KEY_MAP.LEFT, KEY_MAP.UP, KEY_MAP.RIGHT, KEY_MAP.DOWN], keyCode);\n          },\n\n          /**\n           * @method isNavigation\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isNavigation: function isNavigation(keyCode) {\n            return lists.contains([KEY_MAP.HOME, KEY_MAP.END, KEY_MAP.PAGEUP, KEY_MAP.PAGEDOWN], keyCode);\n          },\n\n          /**\n           * @property {Object} nameFromCode\n           * @property {String} nameFromCode.8 \"BACKSPACE\"\n           */\n          nameFromCode: func.invertObject(KEY_MAP),\n          code: KEY_MAP\n        };\n        ; // CONCATENATED MODULE: ./src/js/core/async.js\n\n        /**\n         * @method readFileAsDataURL\n         *\n         * read contents of file as representing URL\n         *\n         * @param {File} file\n         * @return {Promise} - then: dataUrl\n         */\n\n        function readFileAsDataURL(file) {\n          return external_jQuery_default().Deferred(function (deferred) {\n            external_jQuery_default().extend(new FileReader(), {\n              onload: function onload(e) {\n                var dataURL = e.target.result;\n                deferred.resolve(dataURL);\n              },\n              onerror: function onerror(err) {\n                deferred.reject(err);\n              }\n            }).readAsDataURL(file);\n          }).promise();\n        }\n        /**\n         * @method createImage\n         *\n         * create `<image>` from url string\n         *\n         * @param {String} url\n         * @return {Promise} - then: $image\n         */\n\n\n        function createImage(url) {\n          return external_jQuery_default().Deferred(function (deferred) {\n            var $img = external_jQuery_default()('<img>');\n            $img.one('load', function () {\n              $img.off('error abort');\n              deferred.resolve($img);\n            }).one('error abort', function () {\n              $img.off('load').detach();\n              deferred.reject($img);\n            }).css({\n              display: 'none'\n            }).appendTo(document.body).attr('src', url);\n          }).promise();\n        }\n\n        ; // CONCATENATED MODULE: ./src/js/editing/History.js\n\n        function History_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function History_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function History_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) History_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) History_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var History = /*#__PURE__*/function () {\n          function History(context) {\n            History_classCallCheck(this, History);\n            this.stack = [];\n            this.stackOffset = -1;\n            this.context = context;\n            this.$editable = context.layoutInfo.editable;\n            this.editable = this.$editable[0];\n          }\n\n          History_createClass(History, [{\n            key: \"makeSnapshot\",\n            value: function makeSnapshot() {\n              var rng = range.create(this.editable);\n              var emptyBookmark = {\n                s: {\n                  path: [],\n                  offset: 0\n                },\n                e: {\n                  path: [],\n                  offset: 0\n                }\n              };\n              return {\n                contents: this.$editable.html(),\n                bookmark: rng && rng.isOnEditable() ? rng.bookmark(this.editable) : emptyBookmark\n              };\n            }\n          }, {\n            key: \"applySnapshot\",\n            value: function applySnapshot(snapshot) {\n              if (snapshot.contents !== null) {\n                this.$editable.html(snapshot.contents);\n              }\n\n              if (snapshot.bookmark !== null) {\n                range.createFromBookmark(this.editable, snapshot.bookmark).select();\n              }\n            }\n            /**\n            * @method rewind\n            * Rewinds the history stack back to the first snapshot taken.\n            * Leaves the stack intact, so that \"Redo\" can still be used.\n            */\n\n          }, {\n            key: \"rewind\",\n            value: function rewind() {\n              // Create snap shot if not yet recorded\n              if (this.$editable.html() !== this.stack[this.stackOffset].contents) {\n                this.recordUndo();\n              } // Return to the first available snapshot.\n\n\n              this.stackOffset = 0; // Apply that snapshot.\n\n              this.applySnapshot(this.stack[this.stackOffset]);\n            }\n            /**\n            *  @method commit\n            *  Resets history stack, but keeps current editor's content.\n            */\n\n          }, {\n            key: \"commit\",\n            value: function commit() {\n              // Clear the stack.\n              this.stack = []; // Restore stackOffset to its original value.\n\n              this.stackOffset = -1; // Record our first snapshot (of nothing).\n\n              this.recordUndo();\n            }\n            /**\n            * @method reset\n            * Resets the history stack completely; reverting to an empty editor.\n            */\n\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              // Clear the stack.\n              this.stack = []; // Restore stackOffset to its original value.\n\n              this.stackOffset = -1; // Clear the editable area.\n\n              this.$editable.html(''); // Record our first snapshot (of nothing).\n\n              this.recordUndo();\n            }\n            /**\n             * undo\n             */\n\n          }, {\n            key: \"undo\",\n            value: function undo() {\n              // Create snap shot if not yet recorded\n              if (this.$editable.html() !== this.stack[this.stackOffset].contents) {\n                this.recordUndo();\n              }\n\n              if (this.stackOffset > 0) {\n                this.stackOffset--;\n                this.applySnapshot(this.stack[this.stackOffset]);\n              }\n            }\n            /**\n             * redo\n             */\n\n          }, {\n            key: \"redo\",\n            value: function redo() {\n              if (this.stack.length - 1 > this.stackOffset) {\n                this.stackOffset++;\n                this.applySnapshot(this.stack[this.stackOffset]);\n              }\n            }\n            /**\n             * recorded undo\n             */\n\n          }, {\n            key: \"recordUndo\",\n            value: function recordUndo() {\n              this.stackOffset++; // Wash out stack after stackOffset\n\n              if (this.stack.length > this.stackOffset) {\n                this.stack = this.stack.slice(0, this.stackOffset);\n              } // Create new snapshot and push it to the end\n\n\n              this.stack.push(this.makeSnapshot()); // If the stack size reachs to the limit, then slice it\n\n              if (this.stack.length > this.context.options.historyLimit) {\n                this.stack.shift();\n                this.stackOffset -= 1;\n              }\n            }\n          }]);\n          return History;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/editing/Style.js\n\n        function Style_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Style_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Style_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Style_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Style_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Style = /*#__PURE__*/function () {\n          function Style() {\n            Style_classCallCheck(this, Style);\n          }\n\n          Style_createClass(Style, [{\n            key: \"jQueryCSS\",\n            value:\n            /**\n             * @method jQueryCSS\n             *\n             * [workaround] for old jQuery\n             * passing an array of style properties to .css()\n             * will result in an object of property-value pairs.\n             * (compability with version < 1.9)\n             *\n             * @private\n             * @param  {jQuery} $obj\n             * @param  {Array} propertyNames - An array of one or more CSS properties.\n             * @return {Object}\n             */\n            function jQueryCSS($obj, propertyNames) {\n              var result = {};\n              external_jQuery_default().each(propertyNames, function (idx, propertyName) {\n                result[propertyName] = $obj.css(propertyName);\n              });\n              return result;\n            }\n            /**\n             * returns style object from node\n             *\n             * @param {jQuery} $node\n             * @return {Object}\n             */\n\n          }, {\n            key: \"fromNode\",\n            value: function fromNode($node) {\n              var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];\n              var styleInfo = this.jQueryCSS($node, properties) || {};\n              var fontSize = $node[0].style.fontSize || styleInfo['font-size'];\n              styleInfo['font-size'] = parseInt(fontSize, 10);\n              styleInfo['font-size-unit'] = fontSize.match(/[a-z%]+$/);\n              return styleInfo;\n            }\n            /**\n             * paragraph level style\n             *\n             * @param {WrappedRange} rng\n             * @param {Object} styleInfo\n             */\n\n          }, {\n            key: \"stylePara\",\n            value: function stylePara(rng, styleInfo) {\n              external_jQuery_default().each(rng.nodes(dom.isPara, {\n                includeAncestor: true\n              }), function (idx, para) {\n                external_jQuery_default()(para).css(styleInfo);\n              });\n            }\n            /**\n             * insert and returns styleNodes on range.\n             *\n             * @param {WrappedRange} rng\n             * @param {Object} [options] - options for styleNodes\n             * @param {String} [options.nodeName] - default: `SPAN`\n             * @param {Boolean} [options.expandClosestSibling] - default: `false`\n             * @param {Boolean} [options.onlyPartialContains] - default: `false`\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"styleNodes\",\n            value: function styleNodes(rng, options) {\n              rng = rng.splitText();\n              var nodeName = options && options.nodeName || 'SPAN';\n              var expandClosestSibling = !!(options && options.expandClosestSibling);\n              var onlyPartialContains = !!(options && options.onlyPartialContains);\n\n              if (rng.isCollapsed()) {\n                return [rng.insertNode(dom.create(nodeName))];\n              }\n\n              var pred = dom.makePredByNodeName(nodeName);\n              var nodes = rng.nodes(dom.isText, {\n                fullyContains: true\n              }).map(function (text) {\n                return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);\n              });\n\n              if (expandClosestSibling) {\n                if (onlyPartialContains) {\n                  var nodesInRange = rng.nodes(); // compose with partial contains predication\n\n                  pred = func.and(pred, function (node) {\n                    return lists.contains(nodesInRange, node);\n                  });\n                }\n\n                return nodes.map(function (node) {\n                  var siblings = dom.withClosestSiblings(node, pred);\n                  var head = lists.head(siblings);\n                  var tails = lists.tail(siblings);\n                  external_jQuery_default().each(tails, function (idx, elem) {\n                    dom.appendChildNodes(head, elem.childNodes);\n                    dom.remove(elem);\n                  });\n                  return lists.head(siblings);\n                });\n              } else {\n                return nodes;\n              }\n            }\n            /**\n             * get current style on cursor\n             *\n             * @param {WrappedRange} rng\n             * @return {Object} - object contains style properties.\n             */\n\n          }, {\n            key: \"current\",\n            value: function current(rng) {\n              var $cont = external_jQuery_default()(!dom.isElement(rng.sc) ? rng.sc.parentNode : rng.sc);\n              var styleInfo = this.fromNode($cont); // document.queryCommandState for toggle state\n              // [workaround] prevent Firefox nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"\n\n              try {\n                styleInfo = external_jQuery_default().extend(styleInfo, {\n                  'font-bold': document.queryCommandState('bold') ? 'bold' : 'normal',\n                  'font-italic': document.queryCommandState('italic') ? 'italic' : 'normal',\n                  'font-underline': document.queryCommandState('underline') ? 'underline' : 'normal',\n                  'font-subscript': document.queryCommandState('subscript') ? 'subscript' : 'normal',\n                  'font-superscript': document.queryCommandState('superscript') ? 'superscript' : 'normal',\n                  'font-strikethrough': document.queryCommandState('strikethrough') ? 'strikethrough' : 'normal',\n                  'font-family': document.queryCommandValue('fontname') || styleInfo['font-family']\n                });\n              } catch (e) {// eslint-disable-next-line\n              } // list-style-type to list-style(unordered, ordered)\n\n\n              if (!rng.isOnList()) {\n                styleInfo['list-style'] = 'none';\n              } else {\n                var orderedTypes = ['circle', 'disc', 'disc-leading-zero', 'square'];\n                var isUnordered = orderedTypes.indexOf(styleInfo['list-style-type']) > -1;\n                styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';\n              }\n\n              var para = dom.ancestor(rng.sc, dom.isPara);\n\n              if (para && para.style['line-height']) {\n                styleInfo['line-height'] = para.style.lineHeight;\n              } else {\n                var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);\n                styleInfo['line-height'] = lineHeight.toFixed(1);\n              }\n\n              styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);\n              styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);\n              styleInfo.range = rng;\n              return styleInfo;\n            }\n          }]);\n          return Style;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/editing/Bullet.js\n\n        function Bullet_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Bullet_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Bullet_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Bullet_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Bullet_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Bullet = /*#__PURE__*/function () {\n          function Bullet() {\n            Bullet_classCallCheck(this, Bullet);\n          }\n\n          Bullet_createClass(Bullet, [{\n            key: \"insertOrderedList\",\n            value:\n            /**\n             * toggle ordered list\n             */\n            function insertOrderedList(editable) {\n              this.toggleList('OL', editable);\n            }\n            /**\n             * toggle unordered list\n             */\n\n          }, {\n            key: \"insertUnorderedList\",\n            value: function insertUnorderedList(editable) {\n              this.toggleList('UL', editable);\n            }\n            /**\n             * indent\n             */\n\n          }, {\n            key: \"indent\",\n            value: function indent(editable) {\n              var _this = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));\n              external_jQuery_default().each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n\n                if (dom.isLi(head)) {\n                  var previousList = _this.findList(head.previousSibling);\n\n                  if (previousList) {\n                    paras.map(function (para) {\n                      return previousList.appendChild(para);\n                    });\n                  } else {\n                    _this.wrapList(paras, head.parentNode.nodeName);\n\n                    paras.map(function (para) {\n                      return para.parentNode;\n                    }).map(function (para) {\n                      return _this.appendToPrevious(para);\n                    });\n                  }\n                } else {\n                  external_jQuery_default().each(paras, function (idx, para) {\n                    external_jQuery_default()(para).css('marginLeft', function (idx, val) {\n                      return (parseInt(val, 10) || 0) + 25;\n                    });\n                  });\n                }\n              });\n              rng.select();\n            }\n            /**\n             * outdent\n             */\n\n          }, {\n            key: \"outdent\",\n            value: function outdent(editable) {\n              var _this2 = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));\n              external_jQuery_default().each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n\n                if (dom.isLi(head)) {\n                  _this2.releaseList([paras]);\n                } else {\n                  external_jQuery_default().each(paras, function (idx, para) {\n                    external_jQuery_default()(para).css('marginLeft', function (idx, val) {\n                      val = parseInt(val, 10) || 0;\n                      return val > 25 ? val - 25 : '';\n                    });\n                  });\n                }\n              });\n              rng.select();\n            }\n            /**\n             * toggle list\n             *\n             * @param {String} listName - OL or UL\n             */\n\n          }, {\n            key: \"toggleList\",\n            value: function toggleList(listName, editable) {\n              var _this3 = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var bookmark = rng.paraBookmark(paras);\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode')); // paragraph to list\n\n              if (lists.find(paras, dom.isPurePara)) {\n                var wrappedParas = [];\n                external_jQuery_default().each(clustereds, function (idx, paras) {\n                  wrappedParas = wrappedParas.concat(_this3.wrapList(paras, listName));\n                });\n                paras = wrappedParas; // list to paragraph or change list style\n              } else {\n                var diffLists = rng.nodes(dom.isList, {\n                  includeAncestor: true\n                }).filter(function (listNode) {\n                  return !external_jQuery_default().nodeName(listNode, listName);\n                });\n\n                if (diffLists.length) {\n                  external_jQuery_default().each(diffLists, function (idx, listNode) {\n                    dom.replace(listNode, listName);\n                  });\n                } else {\n                  paras = this.releaseList(clustereds, true);\n                }\n              }\n\n              range.createFromParaBookmark(bookmark, paras).select();\n            }\n            /**\n             * @param {Node[]} paras\n             * @param {String} listName\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"wrapList\",\n            value: function wrapList(paras, listName) {\n              var head = lists.head(paras);\n              var last = lists.last(paras);\n              var prevList = dom.isList(head.previousSibling) && head.previousSibling;\n              var nextList = dom.isList(last.nextSibling) && last.nextSibling;\n              var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last); // P to LI\n\n              paras = paras.map(function (para) {\n                return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;\n              }); // append to list(<ul>, <ol>)\n\n              dom.appendChildNodes(listNode, paras);\n\n              if (nextList) {\n                dom.appendChildNodes(listNode, lists.from(nextList.childNodes));\n                dom.remove(nextList);\n              }\n\n              return paras;\n            }\n            /**\n             * @method releaseList\n             *\n             * @param {Array[]} clustereds\n             * @param {Boolean} isEscapseToBody\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"releaseList\",\n            value: function releaseList(clustereds, isEscapseToBody) {\n              var _this4 = this;\n\n              var releasedParas = [];\n              external_jQuery_default().each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n                var last = lists.last(paras);\n                var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode;\n                var parentItem = headList.parentNode;\n\n                if (headList.parentNode.nodeName === 'LI') {\n                  paras.map(function (para) {\n                    var newList = _this4.findNextSiblings(para);\n\n                    if (parentItem.nextSibling) {\n                      parentItem.parentNode.insertBefore(para, parentItem.nextSibling);\n                    } else {\n                      parentItem.parentNode.appendChild(para);\n                    }\n\n                    if (newList.length) {\n                      _this4.wrapList(newList, headList.nodeName);\n\n                      para.appendChild(newList[0].parentNode);\n                    }\n                  });\n\n                  if (headList.children.length === 0) {\n                    parentItem.removeChild(headList);\n                  }\n\n                  if (parentItem.childNodes.length === 0) {\n                    parentItem.parentNode.removeChild(parentItem);\n                  }\n                } else {\n                  var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {\n                    node: last.parentNode,\n                    offset: dom.position(last) + 1\n                  }, {\n                    isSkipPaddingBlankHTML: true\n                  }) : null;\n                  var middleList = dom.splitTree(headList, {\n                    node: head.parentNode,\n                    offset: dom.position(head)\n                  }, {\n                    isSkipPaddingBlankHTML: true\n                  });\n                  paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) : lists.from(middleList.childNodes).filter(dom.isLi); // LI to P\n\n                  if (isEscapseToBody || !dom.isList(headList.parentNode)) {\n                    paras = paras.map(function (para) {\n                      return dom.replace(para, 'P');\n                    });\n                  }\n\n                  external_jQuery_default().each(lists.from(paras).reverse(), function (idx, para) {\n                    dom.insertAfter(para, headList);\n                  }); // remove empty lists\n\n                  var rootLists = lists.compact([headList, middleList, lastList]);\n                  external_jQuery_default().each(rootLists, function (idx, rootList) {\n                    var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));\n                    external_jQuery_default().each(listNodes.reverse(), function (idx, listNode) {\n                      if (!dom.nodeLength(listNode)) {\n                        dom.remove(listNode, true);\n                      }\n                    });\n                  });\n                }\n\n                releasedParas = releasedParas.concat(paras);\n              });\n              return releasedParas;\n            }\n            /**\n             * @method appendToPrevious\n             *\n             * Appends list to previous list item, if\n             * none exist it wraps the list in a new list item.\n             *\n             * @param {HTMLNode} ListItem\n             * @return {HTMLNode}\n             */\n\n          }, {\n            key: \"appendToPrevious\",\n            value: function appendToPrevious(node) {\n              return node.previousSibling ? dom.appendChildNodes(node.previousSibling, [node]) : this.wrapList([node], 'LI');\n            }\n            /**\n             * @method findList\n             *\n             * Finds an existing list in list item\n             *\n             * @param {HTMLNode} ListItem\n             * @return {Array[]}\n             */\n\n          }, {\n            key: \"findList\",\n            value: function findList(node) {\n              return node ? lists.find(node.children, function (child) {\n                return ['OL', 'UL'].indexOf(child.nodeName) > -1;\n              }) : null;\n            }\n            /**\n             * @method findNextSiblings\n             *\n             * Finds all list item siblings that follow it\n             *\n             * @param {HTMLNode} ListItem\n             * @return {HTMLNode}\n             */\n\n          }, {\n            key: \"findNextSiblings\",\n            value: function findNextSiblings(node) {\n              var siblings = [];\n\n              while (node.nextSibling) {\n                siblings.push(node.nextSibling);\n                node = node.nextSibling;\n              }\n\n              return siblings;\n            }\n          }]);\n          return Bullet;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/editing/Typing.js\n\n        function Typing_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Typing_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Typing_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Typing_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Typing_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class editing.Typing\n         *\n         * Typing\n         *\n         */\n\n\n        var Typing = /*#__PURE__*/function () {\n          function Typing(context) {\n            Typing_classCallCheck(this, Typing); // a Bullet instance to toggle lists off\n\n            this.bullet = new Bullet();\n            this.options = context.options;\n          }\n          /**\n           * insert tab\n           *\n           * @param {WrappedRange} rng\n           * @param {Number} tabsize\n           */\n\n\n          Typing_createClass(Typing, [{\n            key: \"insertTab\",\n            value: function insertTab(rng, tabsize) {\n              var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));\n              rng = rng.deleteContents();\n              rng.insertNode(tab, true);\n              rng = range.create(tab, tabsize);\n              rng.select();\n            }\n            /**\n             * insert paragraph\n             *\n             * @param {jQuery} $editable\n             * @param {WrappedRange} rng Can be used in unit tests to \"mock\" the range\n             *\n             * blockquoteBreakingLevel\n             *   0 - No break, the new paragraph remains inside the quote\n             *   1 - Break the first blockquote in the ancestors list\n             *   2 - Break all blockquotes, so that the new paragraph is not quoted (this is the default)\n             */\n\n          }, {\n            key: \"insertParagraph\",\n            value: function insertParagraph(editable, rng) {\n              rng = rng || range.create(editable); // deleteContents on range.\n\n              rng = rng.deleteContents(); // Wrap range if it needs to be wrapped by paragraph\n\n              rng = rng.wrapBodyInlineWithPara(); // finding paragraph\n\n              var splitRoot = dom.ancestor(rng.sc, dom.isPara);\n              var nextPara; // on paragraph: split paragraph\n\n              if (splitRoot) {\n                // if it is an empty line with li\n                if (dom.isLi(splitRoot) && (dom.isEmpty(splitRoot) || dom.deepestChildIsEmpty(splitRoot))) {\n                  // toggle UL/OL and escape\n                  this.bullet.toggleList(splitRoot.parentNode.nodeName);\n                  return;\n                } else {\n                  var blockquote = null;\n\n                  if (this.options.blockquoteBreakingLevel === 1) {\n                    blockquote = dom.ancestor(splitRoot, dom.isBlockquote);\n                  } else if (this.options.blockquoteBreakingLevel === 2) {\n                    blockquote = dom.lastAncestor(splitRoot, dom.isBlockquote);\n                  }\n\n                  if (blockquote) {\n                    // We're inside a blockquote and options ask us to break it\n                    nextPara = external_jQuery_default()(dom.emptyPara)[0]; // If the split is right before a <br>, remove it so that there's no \"empty line\"\n                    // after the split in the new blockquote created\n\n                    if (dom.isRightEdgePoint(rng.getStartPoint()) && dom.isBR(rng.sc.nextSibling)) {\n                      external_jQuery_default()(rng.sc.nextSibling).remove();\n                    }\n\n                    var split = dom.splitTree(blockquote, rng.getStartPoint(), {\n                      isDiscardEmptySplits: true\n                    });\n\n                    if (split) {\n                      split.parentNode.insertBefore(nextPara, split);\n                    } else {\n                      dom.insertAfter(nextPara, blockquote); // There's no split if we were at the end of the blockquote\n                    }\n                  } else {\n                    nextPara = dom.splitTree(splitRoot, rng.getStartPoint()); // not a blockquote, just insert the paragraph\n\n                    var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);\n                    emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));\n                    external_jQuery_default().each(emptyAnchors, function (idx, anchor) {\n                      dom.remove(anchor);\n                    }); // replace empty heading, pre or custom-made styleTag with P tag\n\n                    if ((dom.isHeading(nextPara) || dom.isPre(nextPara) || dom.isCustomStyleTag(nextPara)) && dom.isEmpty(nextPara)) {\n                      nextPara = dom.replace(nextPara, 'p');\n                    }\n                  }\n                } // no paragraph: insert empty paragraph\n\n              } else {\n                var next = rng.sc.childNodes[rng.so];\n                nextPara = external_jQuery_default()(dom.emptyPara)[0];\n\n                if (next) {\n                  rng.sc.insertBefore(nextPara, next);\n                } else {\n                  rng.sc.appendChild(nextPara);\n                }\n              }\n\n              range.create(nextPara, 0).normalize().select().scrollIntoView(editable);\n            }\n          }]);\n          return Typing;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/editing/Table.js\n\n        function Table_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Table_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Table_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Table_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Table_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class Create a virtual table to create what actions to do in change.\n         * @param {object} startPoint Cell selected to apply change.\n         * @param {enum} where  Where change will be applied Row or Col. Use enum: TableResultAction.where\n         * @param {enum} action Action to be applied. Use enum: TableResultAction.requestAction\n         * @param {object} domTable Dom element of table to make changes.\n         */\n\n\n        var TableResultAction = function TableResultAction(startPoint, where, action, domTable) {\n          var _startPoint = {\n            'colPos': 0,\n            'rowPos': 0\n          };\n          var _virtualTable = [];\n          var _actionCellList = []; /// ///////////////////////////////////////////\n          // Private functions\n          /// ///////////////////////////////////////////\n\n          /**\n           * Set the startPoint of action.\n           */\n\n          function setStartPoint() {\n            if (!startPoint || !startPoint.tagName || startPoint.tagName.toLowerCase() !== 'td' && startPoint.tagName.toLowerCase() !== 'th') {\n              // Impossible to identify start Cell point\n              return;\n            }\n\n            _startPoint.colPos = startPoint.cellIndex;\n\n            if (!startPoint.parentElement || !startPoint.parentElement.tagName || startPoint.parentElement.tagName.toLowerCase() !== 'tr') {\n              // Impossible to identify start Row point\n              return;\n            }\n\n            _startPoint.rowPos = startPoint.parentElement.rowIndex;\n          }\n          /**\n           * Define virtual table position info object.\n           *\n           * @param {int} rowIndex Index position in line of virtual table.\n           * @param {int} cellIndex Index position in column of virtual table.\n           * @param {object} baseRow Row affected by this position.\n           * @param {object} baseCell Cell affected by this position.\n           * @param {bool} isSpan Inform if it is an span cell/row.\n           */\n\n\n          function setVirtualTablePosition(rowIndex, cellIndex, baseRow, baseCell, isRowSpan, isColSpan, isVirtualCell) {\n            var objPosition = {\n              'baseRow': baseRow,\n              'baseCell': baseCell,\n              'isRowSpan': isRowSpan,\n              'isColSpan': isColSpan,\n              'isVirtual': isVirtualCell\n            };\n\n            if (!_virtualTable[rowIndex]) {\n              _virtualTable[rowIndex] = [];\n            }\n\n            _virtualTable[rowIndex][cellIndex] = objPosition;\n          }\n          /**\n           * Create action cell object.\n           *\n           * @param {object} virtualTableCellObj Object of specific position on virtual table.\n           * @param {enum} resultAction Action to be applied in that item.\n           */\n\n\n          function getActionCell(virtualTableCellObj, resultAction, virtualRowPosition, virtualColPosition) {\n            return {\n              'baseCell': virtualTableCellObj.baseCell,\n              'action': resultAction,\n              'virtualTable': {\n                'rowIndex': virtualRowPosition,\n                'cellIndex': virtualColPosition\n              }\n            };\n          }\n          /**\n           * Recover free index of row to append Cell.\n           *\n           * @param {int} rowIndex Index of row to find free space.\n           * @param {int} cellIndex Index of cell to find free space in table.\n           */\n\n\n          function recoverCellIndex(rowIndex, cellIndex) {\n            if (!_virtualTable[rowIndex]) {\n              return cellIndex;\n            }\n\n            if (!_virtualTable[rowIndex][cellIndex]) {\n              return cellIndex;\n            }\n\n            var newCellIndex = cellIndex;\n\n            while (_virtualTable[rowIndex][newCellIndex]) {\n              newCellIndex++;\n\n              if (!_virtualTable[rowIndex][newCellIndex]) {\n                return newCellIndex;\n              }\n            }\n          }\n          /**\n           * Recover info about row and cell and add information to virtual table.\n           *\n           * @param {object} row Row to recover information.\n           * @param {object} cell Cell to recover information.\n           */\n\n\n          function addCellInfoToVirtual(row, cell) {\n            var cellIndex = recoverCellIndex(row.rowIndex, cell.cellIndex);\n            var cellHasColspan = cell.colSpan > 1;\n            var cellHasRowspan = cell.rowSpan > 1;\n            var isThisSelectedCell = row.rowIndex === _startPoint.rowPos && cell.cellIndex === _startPoint.colPos;\n            setVirtualTablePosition(row.rowIndex, cellIndex, row, cell, cellHasRowspan, cellHasColspan, false); // Add span rows to virtual Table.\n\n            var rowspanNumber = cell.attributes.rowSpan ? parseInt(cell.attributes.rowSpan.value, 10) : 0;\n\n            if (rowspanNumber > 1) {\n              for (var rp = 1; rp < rowspanNumber; rp++) {\n                var rowspanIndex = row.rowIndex + rp;\n                adjustStartPoint(rowspanIndex, cellIndex, cell, isThisSelectedCell);\n                setVirtualTablePosition(rowspanIndex, cellIndex, row, cell, true, cellHasColspan, true);\n              }\n            } // Add span cols to virtual table.\n\n\n            var colspanNumber = cell.attributes.colSpan ? parseInt(cell.attributes.colSpan.value, 10) : 0;\n\n            if (colspanNumber > 1) {\n              for (var cp = 1; cp < colspanNumber; cp++) {\n                var cellspanIndex = recoverCellIndex(row.rowIndex, cellIndex + cp);\n                adjustStartPoint(row.rowIndex, cellspanIndex, cell, isThisSelectedCell);\n                setVirtualTablePosition(row.rowIndex, cellspanIndex, row, cell, cellHasRowspan, true, true);\n              }\n            }\n          }\n          /**\n           * Process validation and adjust of start point if needed\n           *\n           * @param {int} rowIndex\n           * @param {int} cellIndex\n           * @param {object} cell\n           * @param {bool} isSelectedCell\n           */\n\n\n          function adjustStartPoint(rowIndex, cellIndex, cell, isSelectedCell) {\n            if (rowIndex === _startPoint.rowPos && _startPoint.colPos >= cell.cellIndex && cell.cellIndex <= cellIndex && !isSelectedCell) {\n              _startPoint.colPos++;\n            }\n          }\n          /**\n           * Create virtual table of cells with all cells, including span cells.\n           */\n\n\n          function createVirtualTable() {\n            var rows = domTable.rows;\n\n            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n              var cells = rows[rowIndex].cells;\n\n              for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n                addCellInfoToVirtual(rows[rowIndex], cells[cellIndex]);\n              }\n            }\n          }\n          /**\n           * Get action to be applied on the cell.\n           *\n           * @param {object} cell virtual table cell to apply action\n           */\n\n\n          function getDeleteResultActionToCell(cell) {\n            switch (where) {\n              case TableResultAction.where.Column:\n                if (cell.isColSpan) {\n                  return TableResultAction.resultAction.SubtractSpanCount;\n                }\n\n                break;\n\n              case TableResultAction.where.Row:\n                if (!cell.isVirtual && cell.isRowSpan) {\n                  return TableResultAction.resultAction.AddCell;\n                } else if (cell.isRowSpan) {\n                  return TableResultAction.resultAction.SubtractSpanCount;\n                }\n\n                break;\n            }\n\n            return TableResultAction.resultAction.RemoveCell;\n          }\n          /**\n           * Get action to be applied on the cell.\n           *\n           * @param {object} cell virtual table cell to apply action\n           */\n\n\n          function getAddResultActionToCell(cell) {\n            switch (where) {\n              case TableResultAction.where.Column:\n                if (cell.isColSpan) {\n                  return TableResultAction.resultAction.SumSpanCount;\n                } else if (cell.isRowSpan && cell.isVirtual) {\n                  return TableResultAction.resultAction.Ignore;\n                }\n\n                break;\n\n              case TableResultAction.where.Row:\n                if (cell.isRowSpan) {\n                  return TableResultAction.resultAction.SumSpanCount;\n                } else if (cell.isColSpan && cell.isVirtual) {\n                  return TableResultAction.resultAction.Ignore;\n                }\n\n                break;\n            }\n\n            return TableResultAction.resultAction.AddCell;\n          }\n\n          function init() {\n            setStartPoint();\n            createVirtualTable();\n          } /// ///////////////////////////////////////////\n          // Public functions\n          /// ///////////////////////////////////////////\n\n          /**\n           * Recover array os what to do in table.\n           */\n\n\n          this.getActionList = function () {\n            var fixedRow = where === TableResultAction.where.Row ? _startPoint.rowPos : -1;\n            var fixedCol = where === TableResultAction.where.Column ? _startPoint.colPos : -1;\n            var actualPosition = 0;\n            var canContinue = true;\n\n            while (canContinue) {\n              var rowPosition = fixedRow >= 0 ? fixedRow : actualPosition;\n              var colPosition = fixedCol >= 0 ? fixedCol : actualPosition;\n              var row = _virtualTable[rowPosition];\n\n              if (!row) {\n                canContinue = false;\n                return _actionCellList;\n              }\n\n              var cell = row[colPosition];\n\n              if (!cell) {\n                canContinue = false;\n                return _actionCellList;\n              } // Define action to be applied in this cell\n\n\n              var resultAction = TableResultAction.resultAction.Ignore;\n\n              switch (action) {\n                case TableResultAction.requestAction.Add:\n                  resultAction = getAddResultActionToCell(cell);\n                  break;\n\n                case TableResultAction.requestAction.Delete:\n                  resultAction = getDeleteResultActionToCell(cell);\n                  break;\n              }\n\n              _actionCellList.push(getActionCell(cell, resultAction, rowPosition, colPosition));\n\n              actualPosition++;\n            }\n\n            return _actionCellList;\n          };\n\n          init();\n        };\n        /**\n        *\n        * Where action occours enum.\n        */\n\n\n        TableResultAction.where = {\n          'Row': 0,\n          'Column': 1\n        };\n        /**\n        *\n        * Requested action to apply enum.\n        */\n\n        TableResultAction.requestAction = {\n          'Add': 0,\n          'Delete': 1\n        };\n        /**\n        *\n        * Result action to be executed enum.\n        */\n\n        TableResultAction.resultAction = {\n          'Ignore': 0,\n          'SubtractSpanCount': 1,\n          'RemoveCell': 2,\n          'AddCell': 3,\n          'SumSpanCount': 4\n        };\n        /**\n         *\n         * @class editing.Table\n         *\n         * Table\n         *\n         */\n\n        var Table = /*#__PURE__*/function () {\n          function Table() {\n            Table_classCallCheck(this, Table);\n          }\n\n          Table_createClass(Table, [{\n            key: \"tab\",\n            value:\n            /**\n             * handle tab key\n             *\n             * @param {WrappedRange} rng\n             * @param {Boolean} isShift\n             */\n            function tab(rng, isShift) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var table = dom.ancestor(cell, dom.isTable);\n              var cells = dom.listDescendant(table, dom.isCell);\n              var nextCell = lists[isShift ? 'prev' : 'next'](cells, cell);\n\n              if (nextCell) {\n                range.create(nextCell, 0).select();\n              }\n            }\n            /**\n             * Add a new row\n             *\n             * @param {WrappedRange} rng\n             * @param {String} position (top/bottom)\n             * @return {Node}\n             */\n\n          }, {\n            key: \"addRow\",\n            value: function addRow(rng, position) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var currentTr = external_jQuery_default()(cell).closest('tr');\n              var trAttributes = this.recoverAttributes(currentTr);\n              var html = external_jQuery_default()('<tr' + trAttributes + '></tr>');\n              var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Add, external_jQuery_default()(currentTr).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var idCell = 0; idCell < actions.length; idCell++) {\n                var currentCell = actions[idCell];\n                var tdAttributes = this.recoverAttributes(currentCell.baseCell);\n\n                switch (currentCell.action) {\n                  case TableResultAction.resultAction.AddCell:\n                    html.append('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    break;\n\n                  case TableResultAction.resultAction.SumSpanCount:\n                    {\n                      if (position === 'top') {\n                        var baseCellTr = currentCell.baseCell.parent;\n                        var isTopFromRowSpan = (!baseCellTr ? 0 : currentCell.baseCell.closest('tr').rowIndex) <= currentTr[0].rowIndex;\n\n                        if (isTopFromRowSpan) {\n                          var newTd = external_jQuery_default()('<div></div>').append(external_jQuery_default()('<td' + tdAttributes + '>' + dom.blank + '</td>').removeAttr('rowspan')).html();\n                          html.append(newTd);\n                          break;\n                        }\n                      }\n\n                      var rowspanNumber = parseInt(currentCell.baseCell.rowSpan, 10);\n                      rowspanNumber++;\n                      currentCell.baseCell.setAttribute('rowSpan', rowspanNumber);\n                    }\n                    break;\n                }\n              }\n\n              if (position === 'top') {\n                currentTr.before(html);\n              } else {\n                var cellHasRowspan = cell.rowSpan > 1;\n\n                if (cellHasRowspan) {\n                  var lastTrIndex = currentTr[0].rowIndex + (cell.rowSpan - 2);\n                  external_jQuery_default()(external_jQuery_default()(currentTr).parent().find('tr')[lastTrIndex]).after(external_jQuery_default()(html));\n                  return;\n                }\n\n                currentTr.after(html);\n              }\n            }\n            /**\n             * Add a new col\n             *\n             * @param {WrappedRange} rng\n             * @param {String} position (left/right)\n             * @return {Node}\n             */\n\n          }, {\n            key: \"addCol\",\n            value: function addCol(rng, position) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_jQuery_default()(cell).closest('tr');\n              var rowsGroup = external_jQuery_default()(row).siblings();\n              rowsGroup.push(row);\n              var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Add, external_jQuery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                var currentCell = actions[actionIndex];\n                var tdAttributes = this.recoverAttributes(currentCell.baseCell);\n\n                switch (currentCell.action) {\n                  case TableResultAction.resultAction.AddCell:\n                    if (position === 'right') {\n                      external_jQuery_default()(currentCell.baseCell).after('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    } else {\n                      external_jQuery_default()(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    }\n\n                    break;\n\n                  case TableResultAction.resultAction.SumSpanCount:\n                    if (position === 'right') {\n                      var colspanNumber = parseInt(currentCell.baseCell.colSpan, 10);\n                      colspanNumber++;\n                      currentCell.baseCell.setAttribute('colSpan', colspanNumber);\n                    } else {\n                      external_jQuery_default()(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    }\n\n                    break;\n                }\n              }\n            }\n            /*\n            * Copy attributes from element.\n            *\n            * @param {object} Element to recover attributes.\n            * @return {string} Copied string elements.\n            */\n\n          }, {\n            key: \"recoverAttributes\",\n            value: function recoverAttributes(el) {\n              var resultStr = '';\n\n              if (!el) {\n                return resultStr;\n              }\n\n              var attrList = el.attributes || [];\n\n              for (var i = 0; i < attrList.length; i++) {\n                if (attrList[i].name.toLowerCase() === 'id') {\n                  continue;\n                }\n\n                if (attrList[i].specified) {\n                  resultStr += ' ' + attrList[i].name + '=\\'' + attrList[i].value + '\\'';\n                }\n              }\n\n              return resultStr;\n            }\n            /**\n             * Delete current row\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteRow\",\n            value: function deleteRow(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_jQuery_default()(cell).closest('tr');\n              var cellPos = row.children('td, th').index(external_jQuery_default()(cell));\n              var rowPos = row[0].rowIndex;\n              var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Delete, external_jQuery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                if (!actions[actionIndex]) {\n                  continue;\n                }\n\n                var baseCell = actions[actionIndex].baseCell;\n                var virtualPosition = actions[actionIndex].virtualTable;\n                var hasRowspan = baseCell.rowSpan && baseCell.rowSpan > 1;\n                var rowspanNumber = hasRowspan ? parseInt(baseCell.rowSpan, 10) : 0;\n\n                switch (actions[actionIndex].action) {\n                  case TableResultAction.resultAction.Ignore:\n                    continue;\n\n                  case TableResultAction.resultAction.AddCell:\n                    {\n                      var nextRow = row.next('tr')[0];\n\n                      if (!nextRow) {\n                        continue;\n                      }\n\n                      var cloneRow = row[0].cells[cellPos];\n\n                      if (hasRowspan) {\n                        if (rowspanNumber > 2) {\n                          rowspanNumber--;\n                          nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);\n                          nextRow.cells[cellPos].setAttribute('rowSpan', rowspanNumber);\n                          nextRow.cells[cellPos].innerHTML = '';\n                        } else if (rowspanNumber === 2) {\n                          nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);\n                          nextRow.cells[cellPos].removeAttribute('rowSpan');\n                          nextRow.cells[cellPos].innerHTML = '';\n                        }\n                      }\n                    }\n                    continue;\n\n                  case TableResultAction.resultAction.SubtractSpanCount:\n                    if (hasRowspan) {\n                      if (rowspanNumber > 2) {\n                        rowspanNumber--;\n                        baseCell.setAttribute('rowSpan', rowspanNumber);\n\n                        if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {\n                          baseCell.innerHTML = '';\n                        }\n                      } else if (rowspanNumber === 2) {\n                        baseCell.removeAttribute('rowSpan');\n\n                        if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {\n                          baseCell.innerHTML = '';\n                        }\n                      }\n                    }\n\n                    continue;\n\n                  case TableResultAction.resultAction.RemoveCell:\n                    // Do not need remove cell because row will be deleted.\n                    continue;\n                }\n              }\n\n              row.remove();\n            }\n            /**\n             * Delete current col\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteCol\",\n            value: function deleteCol(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_jQuery_default()(cell).closest('tr');\n              var cellPos = row.children('td, th').index(external_jQuery_default()(cell));\n              var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Delete, external_jQuery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                if (!actions[actionIndex]) {\n                  continue;\n                }\n\n                switch (actions[actionIndex].action) {\n                  case TableResultAction.resultAction.Ignore:\n                    continue;\n\n                  case TableResultAction.resultAction.SubtractSpanCount:\n                    {\n                      var baseCell = actions[actionIndex].baseCell;\n                      var hasColspan = baseCell.colSpan && baseCell.colSpan > 1;\n\n                      if (hasColspan) {\n                        var colspanNumber = baseCell.colSpan ? parseInt(baseCell.colSpan, 10) : 0;\n\n                        if (colspanNumber > 2) {\n                          colspanNumber--;\n                          baseCell.setAttribute('colSpan', colspanNumber);\n\n                          if (baseCell.cellIndex === cellPos) {\n                            baseCell.innerHTML = '';\n                          }\n                        } else if (colspanNumber === 2) {\n                          baseCell.removeAttribute('colSpan');\n\n                          if (baseCell.cellIndex === cellPos) {\n                            baseCell.innerHTML = '';\n                          }\n                        }\n                      }\n                    }\n                    continue;\n\n                  case TableResultAction.resultAction.RemoveCell:\n                    dom.remove(actions[actionIndex].baseCell, true);\n                    continue;\n                }\n              }\n            }\n            /**\n             * create empty table element\n             *\n             * @param {Number} rowCount\n             * @param {Number} colCount\n             * @return {Node}\n             */\n\n          }, {\n            key: \"createTable\",\n            value: function createTable(colCount, rowCount, options) {\n              var tds = [];\n              var tdHTML;\n\n              for (var idxCol = 0; idxCol < colCount; idxCol++) {\n                tds.push('<td>' + dom.blank + '</td>');\n              }\n\n              tdHTML = tds.join('');\n              var trs = [];\n              var trHTML;\n\n              for (var idxRow = 0; idxRow < rowCount; idxRow++) {\n                trs.push('<tr>' + tdHTML + '</tr>');\n              }\n\n              trHTML = trs.join('');\n              var $table = external_jQuery_default()('<table>' + trHTML + '</table>');\n\n              if (options && options.tableClassName) {\n                $table.addClass(options.tableClassName);\n              }\n\n              return $table[0];\n            }\n            /**\n             * Delete current table\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteTable\",\n            value: function deleteTable(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              external_jQuery_default()(cell).closest('table').remove();\n            }\n          }]);\n          return Table;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Editor.js\n\n        function Editor_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Editor_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Editor_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Editor_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Editor_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var KEY_BOGUS = 'bogus';\n        /**\n         * @class Editor\n         */\n\n        var Editor = /*#__PURE__*/function () {\n          function Editor(context) {\n            var _this = this;\n\n            Editor_classCallCheck(this, Editor);\n            this.context = context;\n            this.$note = context.layoutInfo.note;\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.editable = this.$editable[0];\n            this.lastRange = null;\n            this.snapshot = null;\n            this.style = new Style();\n            this.table = new Table();\n            this.typing = new Typing(context);\n            this.bullet = new Bullet();\n            this.history = new History(context);\n            this.context.memo('help.escape', this.lang.help.escape);\n            this.context.memo('help.undo', this.lang.help.undo);\n            this.context.memo('help.redo', this.lang.help.redo);\n            this.context.memo('help.tab', this.lang.help.tab);\n            this.context.memo('help.untab', this.lang.help.untab);\n            this.context.memo('help.insertParagraph', this.lang.help.insertParagraph);\n            this.context.memo('help.insertOrderedList', this.lang.help.insertOrderedList);\n            this.context.memo('help.insertUnorderedList', this.lang.help.insertUnorderedList);\n            this.context.memo('help.indent', this.lang.help.indent);\n            this.context.memo('help.outdent', this.lang.help.outdent);\n            this.context.memo('help.formatPara', this.lang.help.formatPara);\n            this.context.memo('help.insertHorizontalRule', this.lang.help.insertHorizontalRule);\n            this.context.memo('help.fontName', this.lang.help.fontName); // native commands(with execCommand), generate function for execCommand\n\n            var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor'];\n\n            for (var idx = 0, len = commands.length; idx < len; idx++) {\n              this[commands[idx]] = function (sCmd) {\n                return function (value) {\n                  _this.beforeCommand();\n\n                  document.execCommand(sCmd, false, value);\n\n                  _this.afterCommand(true);\n                };\n              }(commands[idx]);\n\n              this.context.memo('help.' + commands[idx], this.lang.help[commands[idx]]);\n            }\n\n            this.fontName = this.wrapCommand(function (value) {\n              return _this.fontStyling('font-family', env.validFontName(value));\n            });\n            this.fontSize = this.wrapCommand(function (value) {\n              var unit = _this.currentStyle()['font-size-unit'];\n\n              return _this.fontStyling('font-size', value + unit);\n            });\n            this.fontSizeUnit = this.wrapCommand(function (value) {\n              var size = _this.currentStyle()['font-size'];\n\n              return _this.fontStyling('font-size', size + value);\n            });\n\n            for (var _idx = 1; _idx <= 6; _idx++) {\n              this['formatH' + _idx] = function (idx) {\n                return function () {\n                  _this.formatBlock('H' + idx);\n                };\n              }(_idx);\n\n              this.context.memo('help.formatH' + _idx, this.lang.help['formatH' + _idx]);\n            }\n\n            this.insertParagraph = this.wrapCommand(function () {\n              _this.typing.insertParagraph(_this.editable);\n            });\n            this.insertOrderedList = this.wrapCommand(function () {\n              _this.bullet.insertOrderedList(_this.editable);\n            });\n            this.insertUnorderedList = this.wrapCommand(function () {\n              _this.bullet.insertUnorderedList(_this.editable);\n            });\n            this.indent = this.wrapCommand(function () {\n              _this.bullet.indent(_this.editable);\n            });\n            this.outdent = this.wrapCommand(function () {\n              _this.bullet.outdent(_this.editable);\n            });\n            /**\n             * insertNode\n             * insert node\n             * @param {Node} node\n             */\n\n            this.insertNode = this.wrapCommand(function (node) {\n              if (_this.isLimited(external_jQuery_default()(node).text().length)) {\n                return;\n              }\n\n              var rng = _this.getLastRange();\n\n              rng.insertNode(node);\n\n              _this.setLastRange(range.createFromNodeAfter(node).select());\n            });\n            /**\n             * insert text\n             * @param {String} text\n             */\n\n            this.insertText = this.wrapCommand(function (text) {\n              if (_this.isLimited(text.length)) {\n                return;\n              }\n\n              var rng = _this.getLastRange();\n\n              var textNode = rng.insertNode(dom.createText(text));\n\n              _this.setLastRange(range.create(textNode, dom.nodeLength(textNode)).select());\n            });\n            /**\n             * paste HTML\n             * @param {String} markup\n             */\n\n            this.pasteHTML = this.wrapCommand(function (markup) {\n              if (_this.isLimited(markup.length)) {\n                return;\n              }\n\n              markup = _this.context.invoke('codeview.purify', markup);\n\n              var contents = _this.getLastRange().pasteHTML(markup);\n\n              _this.setLastRange(range.createFromNodeAfter(lists.last(contents)).select());\n            });\n            /**\n             * formatBlock\n             *\n             * @param {String} tagName\n             */\n\n            this.formatBlock = this.wrapCommand(function (tagName, $target) {\n              var onApplyCustomStyle = _this.options.callbacks.onApplyCustomStyle;\n\n              if (onApplyCustomStyle) {\n                onApplyCustomStyle.call(_this, $target, _this.context, _this.onFormatBlock);\n              } else {\n                _this.onFormatBlock(tagName, $target);\n              }\n            });\n            /**\n             * insert horizontal rule\n             */\n\n            this.insertHorizontalRule = this.wrapCommand(function () {\n              var hrNode = _this.getLastRange().insertNode(dom.create('HR'));\n\n              if (hrNode.nextSibling) {\n                _this.setLastRange(range.create(hrNode.nextSibling, 0).normalize().select());\n              }\n            });\n            /**\n             * lineHeight\n             * @param {String} value\n             */\n\n            this.lineHeight = this.wrapCommand(function (value) {\n              _this.style.stylePara(_this.getLastRange(), {\n                lineHeight: value\n              });\n            });\n            /**\n             * create link (command)\n             *\n             * @param {Object} linkInfo\n             */\n\n            this.createLink = this.wrapCommand(function (linkInfo) {\n              var linkUrl = linkInfo.url;\n              var linkText = linkInfo.text;\n              var isNewWindow = linkInfo.isNewWindow;\n              var checkProtocol = linkInfo.checkProtocol;\n\n              var rng = linkInfo.range || _this.getLastRange();\n\n              var additionalTextLength = linkText.length - rng.toString().length;\n\n              if (additionalTextLength > 0 && _this.isLimited(additionalTextLength)) {\n                return;\n              }\n\n              var isTextChanged = rng.toString() !== linkText; // handle spaced urls from input\n\n              if (typeof linkUrl === 'string') {\n                linkUrl = linkUrl.trim();\n              }\n\n              if (_this.options.onCreateLink) {\n                linkUrl = _this.options.onCreateLink(linkUrl);\n              } else if (checkProtocol) {\n                // if url doesn't have any protocol and not even a relative or a label, use http:// as default\n                linkUrl = /^([A-Za-z][A-Za-z0-9+-.]*\\:|#|\\/)/.test(linkUrl) ? linkUrl : _this.options.defaultProtocol + linkUrl;\n              }\n\n              var anchors = [];\n\n              if (isTextChanged) {\n                rng = rng.deleteContents();\n                var anchor = rng.insertNode(external_jQuery_default()('<A>' + linkText + '</A>')[0]);\n                anchors.push(anchor);\n              } else {\n                anchors = _this.style.styleNodes(rng, {\n                  nodeName: 'A',\n                  expandClosestSibling: true,\n                  onlyPartialContains: true\n                });\n              }\n\n              external_jQuery_default().each(anchors, function (idx, anchor) {\n                external_jQuery_default()(anchor).attr('href', linkUrl);\n\n                if (isNewWindow) {\n                  external_jQuery_default()(anchor).attr('target', '_blank');\n                } else {\n                  external_jQuery_default()(anchor).removeAttr('target');\n                }\n              });\n\n              _this.setLastRange(_this.createRangeFromList(anchors).select());\n            });\n            /**\n             * setting color\n             *\n             * @param {Object} sObjColor  color code\n             * @param {String} sObjColor.foreColor foreground color\n             * @param {String} sObjColor.backColor background color\n             */\n\n            this.color = this.wrapCommand(function (colorInfo) {\n              var foreColor = colorInfo.foreColor;\n              var backColor = colorInfo.backColor;\n\n              if (foreColor) {\n                document.execCommand('foreColor', false, foreColor);\n              }\n\n              if (backColor) {\n                document.execCommand('backColor', false, backColor);\n              }\n            });\n            /**\n             * Set foreground color\n             *\n             * @param {String} colorCode foreground color code\n             */\n\n            this.foreColor = this.wrapCommand(function (colorInfo) {\n              document.execCommand('foreColor', false, colorInfo);\n            });\n            /**\n             * insert Table\n             *\n             * @param {String} dimension of table (ex : \"5x5\")\n             */\n\n            this.insertTable = this.wrapCommand(function (dim) {\n              var dimension = dim.split('x');\n\n              var rng = _this.getLastRange().deleteContents();\n\n              rng.insertNode(_this.table.createTable(dimension[0], dimension[1], _this.options));\n            });\n            /**\n             * remove media object and Figure Elements if media object is img with Figure.\n             */\n\n            this.removeMedia = this.wrapCommand(function () {\n              var $target = external_jQuery_default()(_this.restoreTarget()).parent();\n\n              if ($target.closest('figure').length) {\n                $target.closest('figure').remove();\n              } else {\n                $target = external_jQuery_default()(_this.restoreTarget()).detach();\n              }\n\n              _this.context.triggerEvent('media.delete', $target, _this.$editable);\n            });\n            /**\n             * float me\n             *\n             * @param {String} value\n             */\n\n            this.floatMe = this.wrapCommand(function (value) {\n              var $target = external_jQuery_default()(_this.restoreTarget());\n              $target.toggleClass('note-float-left', value === 'left');\n              $target.toggleClass('note-float-right', value === 'right');\n              $target.css('float', value === 'none' ? '' : value);\n            });\n            /**\n             * resize overlay element\n             * @param {String} value\n             */\n\n            this.resize = this.wrapCommand(function (value) {\n              var $target = external_jQuery_default()(_this.restoreTarget());\n              value = parseFloat(value);\n\n              if (value === 0) {\n                $target.css('width', '');\n              } else {\n                $target.css({\n                  width: value * 100 + '%',\n                  height: ''\n                });\n              }\n            });\n          }\n\n          Editor_createClass(Editor, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this; // bind custom events\n\n\n              this.$editable.on('keydown', function (event) {\n                if (event.keyCode === key.code.ENTER) {\n                  _this2.context.triggerEvent('enter', event);\n                }\n\n                _this2.context.triggerEvent('keydown', event); // keep a snapshot to limit text on input event\n\n\n                _this2.snapshot = _this2.history.makeSnapshot();\n                _this2.hasKeyShortCut = false;\n\n                if (!event.isDefaultPrevented()) {\n                  if (_this2.options.shortcuts) {\n                    _this2.hasKeyShortCut = _this2.handleKeyMap(event);\n                  } else {\n                    _this2.preventDefaultEditableShortCuts(event);\n                  }\n                }\n\n                if (_this2.isLimited(1, event)) {\n                  var lastRange = _this2.getLastRange();\n\n                  if (lastRange.eo - lastRange.so === 0) {\n                    return false;\n                  }\n                }\n\n                _this2.setLastRange(); // record undo in the key event except keyMap.\n\n\n                if (_this2.options.recordEveryKeystroke) {\n                  if (_this2.hasKeyShortCut === false) {\n                    _this2.history.recordUndo();\n                  }\n                }\n              }).on('keyup', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('keyup', event);\n              }).on('focus', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('focus', event);\n              }).on('blur', function (event) {\n                _this2.context.triggerEvent('blur', event);\n              }).on('mousedown', function (event) {\n                _this2.context.triggerEvent('mousedown', event);\n              }).on('mouseup', function (event) {\n                _this2.setLastRange();\n\n                _this2.history.recordUndo();\n\n                _this2.context.triggerEvent('mouseup', event);\n              }).on('scroll', function (event) {\n                _this2.context.triggerEvent('scroll', event);\n              }).on('paste', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('paste', event);\n              }).on('input', function () {\n                // To limit composition characters (e.g. Korean)\n                if (_this2.isLimited(0) && _this2.snapshot) {\n                  _this2.history.applySnapshot(_this2.snapshot);\n                }\n              });\n              this.$editable.attr('spellcheck', this.options.spellCheck);\n              this.$editable.attr('autocorrect', this.options.spellCheck);\n\n              if (this.options.disableGrammar) {\n                this.$editable.attr('data-gramm', false);\n              } // init content before set event\n\n\n              this.$editable.html(dom.html(this.$note) || dom.emptyPara);\n              this.$editable.on(env.inputEventName, func.debounce(function () {\n                _this2.context.triggerEvent('change', _this2.$editable.html(), _this2.$editable);\n              }, 10));\n              this.$editable.on('focusin', function (event) {\n                _this2.context.triggerEvent('focusin', event);\n              }).on('focusout', function (event) {\n                _this2.context.triggerEvent('focusout', event);\n              });\n\n              if (this.options.airMode) {\n                if (this.options.overrideContextMenu) {\n                  this.$editor.on('contextmenu', function (event) {\n                    _this2.context.triggerEvent('contextmenu', event);\n\n                    return false;\n                  });\n                }\n              } else {\n                if (this.options.width) {\n                  this.$editor.outerWidth(this.options.width);\n                }\n\n                if (this.options.height) {\n                  this.$editable.outerHeight(this.options.height);\n                }\n\n                if (this.options.maxHeight) {\n                  this.$editable.css('max-height', this.options.maxHeight);\n                }\n\n                if (this.options.minHeight) {\n                  this.$editable.css('min-height', this.options.minHeight);\n                }\n              }\n\n              this.history.recordUndo();\n              this.setLastRange();\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$editable.off();\n            }\n          }, {\n            key: \"handleKeyMap\",\n            value: function handleKeyMap(event) {\n              var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];\n              var keys = [];\n\n              if (event.metaKey) {\n                keys.push('CMD');\n              }\n\n              if (event.ctrlKey && !event.altKey) {\n                keys.push('CTRL');\n              }\n\n              if (event.shiftKey) {\n                keys.push('SHIFT');\n              }\n\n              var keyName = key.nameFromCode[event.keyCode];\n\n              if (keyName) {\n                keys.push(keyName);\n              }\n\n              var eventName = keyMap[keys.join('+')];\n\n              if (keyName === 'TAB' && !this.options.tabDisable) {\n                this.afterCommand();\n              } else if (eventName) {\n                if (this.context.invoke(eventName) !== false) {\n                  event.preventDefault(); // if keyMap action was invoked\n\n                  return true;\n                }\n              } else if (key.isEdit(event.keyCode)) {\n                this.afterCommand();\n              }\n\n              return false;\n            }\n          }, {\n            key: \"preventDefaultEditableShortCuts\",\n            value: function preventDefaultEditableShortCuts(event) {\n              // B(Bold, 66) / I(Italic, 73) / U(Underline, 85)\n              if ((event.ctrlKey || event.metaKey) && lists.contains([66, 73, 85], event.keyCode)) {\n                event.preventDefault();\n              }\n            }\n          }, {\n            key: \"isLimited\",\n            value: function isLimited(pad, event) {\n              pad = pad || 0;\n\n              if (typeof event !== 'undefined') {\n                if (key.isMove(event.keyCode) || key.isNavigation(event.keyCode) || event.ctrlKey || event.metaKey || lists.contains([key.code.BACKSPACE, key.code.DELETE], event.keyCode)) {\n                  return false;\n                }\n              }\n\n              if (this.options.maxTextLength > 0) {\n                if (this.$editable.text().length + pad > this.options.maxTextLength) {\n                  return true;\n                }\n              }\n\n              return false;\n            }\n            /**\n             * create range\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"createRange\",\n            value: function createRange() {\n              this.focus();\n              this.setLastRange();\n              return this.getLastRange();\n            }\n            /**\n             * create a new range from the list of elements\n             *\n             * @param {list} dom element list\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"createRangeFromList\",\n            value: function createRangeFromList(lst) {\n              var startRange = range.createFromNodeBefore(lists.head(lst));\n              var startPoint = startRange.getStartPoint();\n              var endRange = range.createFromNodeAfter(lists.last(lst));\n              var endPoint = endRange.getEndPoint();\n              return range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * set the last range\n             *\n             * if given rng is exist, set rng as the last range\n             * or create a new range at the end of the document\n             *\n             * @param {WrappedRange} rng\n             */\n\n          }, {\n            key: \"setLastRange\",\n            value: function setLastRange(rng) {\n              if (rng) {\n                this.lastRange = rng;\n              } else {\n                this.lastRange = range.create(this.editable);\n\n                if (external_jQuery_default()(this.lastRange.sc).closest('.note-editable').length === 0) {\n                  this.lastRange = range.createFromBodyElement(this.editable);\n                }\n              }\n            }\n            /**\n             * get the last range\n             *\n             * if there is a saved last range, return it\n             * or create a new range and return it\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getLastRange\",\n            value: function getLastRange() {\n              if (!this.lastRange) {\n                this.setLastRange();\n              }\n\n              return this.lastRange;\n            }\n            /**\n             * saveRange\n             *\n             * save current range\n             *\n             * @param {Boolean} [thenCollapse=false]\n             */\n\n          }, {\n            key: \"saveRange\",\n            value: function saveRange(thenCollapse) {\n              if (thenCollapse) {\n                this.getLastRange().collapse().select();\n              }\n            }\n            /**\n             * restoreRange\n             *\n             * restore lately range\n             */\n\n          }, {\n            key: \"restoreRange\",\n            value: function restoreRange() {\n              if (this.lastRange) {\n                this.lastRange.select();\n                this.focus();\n              }\n            }\n          }, {\n            key: \"saveTarget\",\n            value: function saveTarget(node) {\n              this.$editable.data('target', node);\n            }\n          }, {\n            key: \"clearTarget\",\n            value: function clearTarget() {\n              this.$editable.removeData('target');\n            }\n          }, {\n            key: \"restoreTarget\",\n            value: function restoreTarget() {\n              return this.$editable.data('target');\n            }\n            /**\n             * currentStyle\n             *\n             * current style\n             * @return {Object|Boolean} unfocus\n             */\n\n          }, {\n            key: \"currentStyle\",\n            value: function currentStyle() {\n              var rng = range.create();\n\n              if (rng) {\n                rng = rng.normalize();\n              }\n\n              return rng ? this.style.current(rng) : this.style.fromNode(this.$editable);\n            }\n            /**\n             * style from node\n             *\n             * @param {jQuery} $node\n             * @return {Object}\n             */\n\n          }, {\n            key: \"styleFromNode\",\n            value: function styleFromNode($node) {\n              return this.style.fromNode($node);\n            }\n            /**\n             * undo\n             */\n\n          }, {\n            key: \"undo\",\n            value: function undo() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.undo();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /*\n            * commit\n            */\n\n          }, {\n            key: \"commit\",\n            value: function commit() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.commit();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /**\n             * redo\n             */\n\n          }, {\n            key: \"redo\",\n            value: function redo() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.redo();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /**\n             * before command\n             */\n\n          }, {\n            key: \"beforeCommand\",\n            value: function beforeCommand() {\n              this.context.triggerEvent('before.command', this.$editable.html()); // Set styleWithCSS before run a command\n\n              document.execCommand('styleWithCSS', false, this.options.styleWithCSS); // keep focus on editable before command execution\n\n              this.focus();\n            }\n            /**\n             * after command\n             * @param {Boolean} isPreventTrigger\n             */\n\n          }, {\n            key: \"afterCommand\",\n            value: function afterCommand(isPreventTrigger) {\n              this.normalizeContent();\n              this.history.recordUndo();\n\n              if (!isPreventTrigger) {\n                this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n              }\n            }\n            /**\n             * handle tab key\n             */\n\n          }, {\n            key: \"tab\",\n            value: function tab() {\n              var rng = this.getLastRange();\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.table.tab(rng);\n              } else {\n                if (this.options.tabSize === 0) {\n                  return false;\n                }\n\n                if (!this.isLimited(this.options.tabSize)) {\n                  this.beforeCommand();\n                  this.typing.insertTab(rng, this.options.tabSize);\n                  this.afterCommand();\n                }\n              }\n            }\n            /**\n             * handle shift+tab key\n             */\n\n          }, {\n            key: \"untab\",\n            value: function untab() {\n              var rng = this.getLastRange();\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.table.tab(rng, true);\n              } else {\n                if (this.options.tabSize === 0) {\n                  return false;\n                }\n              }\n            }\n            /**\n             * run given function between beforeCommand and afterCommand\n             */\n\n          }, {\n            key: \"wrapCommand\",\n            value: function wrapCommand(fn) {\n              return function () {\n                this.beforeCommand();\n                fn.apply(this, arguments);\n                this.afterCommand();\n              };\n            }\n            /**\n             * insert image\n             *\n             * @param {String} src\n             * @param {String|Function} param\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"insertImage\",\n            value: function insertImage(src, param) {\n              var _this3 = this;\n\n              return createImage(src, param).then(function ($image) {\n                _this3.beforeCommand();\n\n                if (typeof param === 'function') {\n                  param($image);\n                } else {\n                  if (typeof param === 'string') {\n                    $image.attr('data-filename', param);\n                  }\n\n                  $image.css('width', Math.min(_this3.$editable.width(), $image.width()));\n                }\n\n                $image.show();\n\n                _this3.getLastRange().insertNode($image[0]);\n\n                _this3.setLastRange(range.createFromNodeAfter($image[0]).select());\n\n                _this3.afterCommand();\n              }).fail(function (e) {\n                _this3.context.triggerEvent('image.upload.error', e);\n              });\n            }\n            /**\n             * insertImages\n             * @param {File[]} files\n             */\n\n          }, {\n            key: \"insertImagesAsDataURL\",\n            value: function insertImagesAsDataURL(files) {\n              var _this4 = this;\n\n              external_jQuery_default().each(files, function (idx, file) {\n                var filename = file.name;\n\n                if (_this4.options.maximumImageFileSize && _this4.options.maximumImageFileSize < file.size) {\n                  _this4.context.triggerEvent('image.upload.error', _this4.lang.image.maximumFileSizeError);\n                } else {\n                  readFileAsDataURL(file).then(function (dataURL) {\n                    return _this4.insertImage(dataURL, filename);\n                  }).fail(function () {\n                    _this4.context.triggerEvent('image.upload.error');\n                  });\n                }\n              });\n            }\n            /**\n             * insertImagesOrCallback\n             * @param {File[]} files\n             */\n\n          }, {\n            key: \"insertImagesOrCallback\",\n            value: function insertImagesOrCallback(files) {\n              var callbacks = this.options.callbacks; // If onImageUpload set,\n\n              if (callbacks.onImageUpload) {\n                this.context.triggerEvent('image.upload', files); // else insert Image as dataURL\n              } else {\n                this.insertImagesAsDataURL(files);\n              }\n            }\n            /**\n             * return selected plain text\n             * @return {String} text\n             */\n\n          }, {\n            key: \"getSelectedText\",\n            value: function getSelectedText() {\n              var rng = this.getLastRange(); // if range on anchor, expand range with anchor\n\n              if (rng.isOnAnchor()) {\n                rng = range.createFromNode(dom.ancestor(rng.sc, dom.isAnchor));\n              }\n\n              return rng.toString();\n            }\n          }, {\n            key: \"onFormatBlock\",\n            value: function onFormatBlock(tagName, $target) {\n              // [workaround] for MSIE, IE need `<`\n              document.execCommand('FormatBlock', false, env.isMSIE ? '<' + tagName + '>' : tagName); // support custom class\n\n              if ($target && $target.length) {\n                // find the exact element has given tagName\n                if ($target[0].tagName.toUpperCase() !== tagName.toUpperCase()) {\n                  $target = $target.find(tagName);\n                }\n\n                if ($target && $target.length) {\n                  var currentRange = this.createRange();\n                  var $parent = external_jQuery_default()([currentRange.sc, currentRange.ec]).closest(tagName); // remove class added for current block\n\n                  $parent.removeClass();\n                  var className = $target[0].className || '';\n\n                  if (className) {\n                    $parent.addClass(className);\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"formatPara\",\n            value: function formatPara() {\n              this.formatBlock('P');\n            }\n          }, {\n            key: \"fontStyling\",\n            value: function fontStyling(target, value) {\n              var rng = this.getLastRange();\n\n              if (rng !== '') {\n                var spans = this.style.styleNodes(rng);\n                this.$editor.find('.note-status-output').html('');\n                external_jQuery_default()(spans).css(target, value); // [workaround] added styled bogus span for style\n                //  - also bogus character needed for cursor position\n\n                if (rng.isCollapsed()) {\n                  var firstSpan = lists.head(spans);\n\n                  if (firstSpan && !dom.nodeLength(firstSpan)) {\n                    firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;\n                    range.createFromNode(firstSpan.firstChild).select();\n                    this.setLastRange();\n                    this.$editable.data(KEY_BOGUS, firstSpan);\n                  }\n                } else {\n                  this.setLastRange(this.createRangeFromList(spans).select());\n                }\n              } else {\n                var noteStatusOutput = external_jQuery_default().now();\n                this.$editor.find('.note-status-output').html('<div id=\"note-status-output-' + noteStatusOutput + '\" class=\"alert alert-info\">' + this.lang.output.noSelection + '</div>');\n                setTimeout(function () {\n                  external_jQuery_default()('#note-status-output-' + noteStatusOutput).remove();\n                }, 5000);\n              }\n            }\n            /**\n             * unlink\n             *\n             * @type command\n             */\n\n          }, {\n            key: \"unlink\",\n            value: function unlink() {\n              var rng = this.getLastRange();\n\n              if (rng.isOnAnchor()) {\n                var anchor = dom.ancestor(rng.sc, dom.isAnchor);\n                rng = range.createFromNode(anchor);\n                rng.select();\n                this.setLastRange();\n                this.beforeCommand();\n                document.execCommand('unlink');\n                this.afterCommand();\n              }\n            }\n            /**\n             * returns link info\n             *\n             * @return {Object}\n             * @return {WrappedRange} return.range\n             * @return {String} return.text\n             * @return {Boolean} [return.isNewWindow=true]\n             * @return {String} [return.url=\"\"]\n             */\n\n          }, {\n            key: \"getLinkInfo\",\n            value: function getLinkInfo() {\n              var rng = this.getLastRange().expand(dom.isAnchor); // Get the first anchor on range(for edit).\n\n              var $anchor = external_jQuery_default()(lists.head(rng.nodes(dom.isAnchor)));\n              var linkInfo = {\n                range: rng,\n                text: rng.toString(),\n                url: $anchor.length ? $anchor.attr('href') : ''\n              }; // When anchor exists,\n\n              if ($anchor.length) {\n                // Set isNewWindow by checking its target.\n                linkInfo.isNewWindow = $anchor.attr('target') === '_blank';\n              }\n\n              return linkInfo;\n            }\n          }, {\n            key: \"addRow\",\n            value: function addRow(position) {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.addRow(rng, position);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"addCol\",\n            value: function addCol(position) {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.addCol(rng, position);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteRow\",\n            value: function deleteRow() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteRow(rng);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteCol\",\n            value: function deleteCol() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteCol(rng);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteTable\",\n            value: function deleteTable() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteTable(rng);\n                this.afterCommand();\n              }\n            }\n            /**\n             * @param {Position} pos\n             * @param {jQuery} $target - target element\n             * @param {Boolean} [bKeepRatio] - keep ratio\n             */\n\n          }, {\n            key: \"resizeTo\",\n            value: function resizeTo(pos, $target, bKeepRatio) {\n              var imageSize;\n\n              if (bKeepRatio) {\n                var newRatio = pos.y / pos.x;\n                var ratio = $target.data('ratio');\n                imageSize = {\n                  width: ratio > newRatio ? pos.x : pos.y / ratio,\n                  height: ratio > newRatio ? pos.x * ratio : pos.y\n                };\n              } else {\n                imageSize = {\n                  width: pos.x,\n                  height: pos.y\n                };\n              }\n\n              $target.css(imageSize);\n            }\n            /**\n             * returns whether editable area has focus or not.\n             */\n\n          }, {\n            key: \"hasFocus\",\n            value: function hasFocus() {\n              return this.$editable.is(':focus');\n            }\n            /**\n             * set focus\n             */\n\n          }, {\n            key: \"focus\",\n            value: function focus() {\n              // [workaround] Screen will move when page is scolled in IE.\n              //  - do focus when not focused\n              if (!this.hasFocus()) {\n                this.$editable.focus();\n              }\n            }\n            /**\n             * returns whether contents is empty or not.\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isEmpty\",\n            value: function isEmpty() {\n              return dom.isEmpty(this.$editable[0]) || dom.emptyPara === this.$editable.html();\n            }\n            /**\n             * Removes all contents and restores the editable instance to an _emptyPara_.\n             */\n\n          }, {\n            key: \"empty\",\n            value: function empty() {\n              this.context.invoke('code', dom.emptyPara);\n            }\n            /**\n             * normalize content\n             */\n\n          }, {\n            key: \"normalizeContent\",\n            value: function normalizeContent() {\n              this.$editable[0].normalize();\n            }\n          }]);\n          return Editor;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Clipboard.js\n\n        function Clipboard_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Clipboard_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Clipboard_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Clipboard_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Clipboard_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Clipboard = /*#__PURE__*/function () {\n          function Clipboard(context) {\n            Clipboard_classCallCheck(this, Clipboard);\n            this.context = context;\n            this.$editable = context.layoutInfo.editable;\n          }\n\n          Clipboard_createClass(Clipboard, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.$editable.on('paste', this.pasteByEvent.bind(this));\n            }\n            /**\n             * paste by clipboard event\n             *\n             * @param {Event} event\n             */\n\n          }, {\n            key: \"pasteByEvent\",\n            value: function pasteByEvent(event) {\n              var _this = this;\n\n              var clipboardData = event.originalEvent.clipboardData;\n\n              if (clipboardData && clipboardData.items && clipboardData.items.length) {\n                var item = clipboardData.items.length > 1 ? clipboardData.items[1] : lists.head(clipboardData.items);\n\n                if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {\n                  // paste img file\n                  this.context.invoke('editor.insertImagesOrCallback', [item.getAsFile()]);\n                  event.preventDefault();\n                } else if (item.kind === 'string') {\n                  // paste text with maxTextLength check\n                  if (this.context.invoke('editor.isLimited', clipboardData.getData('Text').length)) {\n                    event.preventDefault();\n                  }\n                }\n              } else if (window.clipboardData) {\n                // for IE\n                var text = window.clipboardData.getData('text');\n\n                if (this.context.invoke('editor.isLimited', text.length)) {\n                  event.preventDefault();\n                }\n              } // Call editor.afterCommand after proceeding default event handler\n\n\n              setTimeout(function () {\n                _this.context.invoke('editor.afterCommand');\n              }, 10);\n            }\n          }]);\n          return Clipboard;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Dropzone.js\n\n        function Dropzone_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Dropzone_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Dropzone_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Dropzone_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Dropzone_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Dropzone = /*#__PURE__*/function () {\n          function Dropzone(context) {\n            Dropzone_classCallCheck(this, Dropzone);\n            this.context = context;\n            this.$eventListener = external_jQuery_default()(document);\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.documentEventHandlers = {};\n            this.$dropzone = external_jQuery_default()(['<div class=\"note-dropzone\">', '<div class=\"note-dropzone-message\"></div>', '</div>'].join('')).prependTo(this.$editor);\n          }\n          /**\n           * attach Drag and Drop Events\n           */\n\n\n          Dropzone_createClass(Dropzone, [{\n            key: \"initialize\",\n            value: function initialize() {\n              if (this.options.disableDragAndDrop) {\n                // prevent default drop event\n                this.documentEventHandlers.onDrop = function (e) {\n                  e.preventDefault();\n                }; // do not consider outside of dropzone\n\n\n                this.$eventListener = this.$dropzone;\n                this.$eventListener.on('drop', this.documentEventHandlers.onDrop);\n              } else {\n                this.attachDragAndDropEvent();\n              }\n            }\n            /**\n             * attach Drag and Drop Events\n             */\n\n          }, {\n            key: \"attachDragAndDropEvent\",\n            value: function attachDragAndDropEvent() {\n              var _this = this;\n\n              var collection = external_jQuery_default()();\n              var $dropzoneMessage = this.$dropzone.find('.note-dropzone-message');\n\n              this.documentEventHandlers.onDragenter = function (e) {\n                var isCodeview = _this.context.invoke('codeview.isActivated');\n\n                var hasEditorSize = _this.$editor.width() > 0 && _this.$editor.height() > 0;\n\n                if (!isCodeview && !collection.length && hasEditorSize) {\n                  _this.$editor.addClass('dragover');\n\n                  _this.$dropzone.width(_this.$editor.width());\n\n                  _this.$dropzone.height(_this.$editor.height());\n\n                  $dropzoneMessage.text(_this.lang.image.dragImageHere);\n                }\n\n                collection = collection.add(e.target);\n              };\n\n              this.documentEventHandlers.onDragleave = function (e) {\n                collection = collection.not(e.target); // If nodeName is BODY, then just make it over (fix for IE)\n\n                if (!collection.length || e.target.nodeName === 'BODY') {\n                  collection = external_jQuery_default()();\n\n                  _this.$editor.removeClass('dragover');\n                }\n              };\n\n              this.documentEventHandlers.onDrop = function () {\n                collection = external_jQuery_default()();\n\n                _this.$editor.removeClass('dragover');\n              }; // show dropzone on dragenter when dragging a object to document\n              // -but only if the editor is visible, i.e. has a positive width and height\n\n\n              this.$eventListener.on('dragenter', this.documentEventHandlers.onDragenter).on('dragleave', this.documentEventHandlers.onDragleave).on('drop', this.documentEventHandlers.onDrop); // change dropzone's message on hover.\n\n              this.$dropzone.on('dragenter', function () {\n                _this.$dropzone.addClass('hover');\n\n                $dropzoneMessage.text(_this.lang.image.dropImage);\n              }).on('dragleave', function () {\n                _this.$dropzone.removeClass('hover');\n\n                $dropzoneMessage.text(_this.lang.image.dragImageHere);\n              }); // attach dropImage\n\n              this.$dropzone.on('drop', function (event) {\n                var dataTransfer = event.originalEvent.dataTransfer; // stop the browser from opening the dropped content\n\n                event.preventDefault();\n\n                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                  _this.$editable.focus();\n\n                  _this.context.invoke('editor.insertImagesOrCallback', dataTransfer.files);\n                } else {\n                  external_jQuery_default().each(dataTransfer.types, function (idx, type) {\n                    // skip moz-specific types\n                    if (type.toLowerCase().indexOf('_moz_') > -1) {\n                      return;\n                    }\n\n                    var content = dataTransfer.getData(type);\n\n                    if (type.toLowerCase().indexOf('text') > -1) {\n                      _this.context.invoke('editor.pasteHTML', content);\n                    } else {\n                      external_jQuery_default()(content).each(function (idx, item) {\n                        _this.context.invoke('editor.insertNode', item);\n                      });\n                    }\n                  });\n                }\n              }).on('dragover', false); // prevent default dragover event\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              var _this2 = this;\n\n              Object.keys(this.documentEventHandlers).forEach(function (key) {\n                _this2.$eventListener.off(key.substr(2).toLowerCase(), _this2.documentEventHandlers[key]);\n              });\n              this.documentEventHandlers = {};\n            }\n          }]);\n          return Dropzone;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Codeview.js\n\n        function _createForOfIteratorHelper(o, allowArrayLike) {\n          var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n          if (!it) {\n            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n              if (it) o = it;\n              var i = 0;\n\n              var F = function F() {};\n\n              return {\n                s: F,\n                n: function n() {\n                  if (i >= o.length) return {\n                    done: true\n                  };\n                  return {\n                    done: false,\n                    value: o[i++]\n                  };\n                },\n                e: function e(_e) {\n                  throw _e;\n                },\n                f: F\n              };\n            }\n\n            throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n          }\n\n          var normalCompletion = true,\n              didErr = false,\n              err;\n          return {\n            s: function s() {\n              it = it.call(o);\n            },\n            n: function n() {\n              var step = it.next();\n              normalCompletion = step.done;\n              return step;\n            },\n            e: function e(_e2) {\n              didErr = true;\n              err = _e2;\n            },\n            f: function f() {\n              try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n              } finally {\n                if (didErr) throw err;\n              }\n            }\n          };\n        }\n\n        function _unsupportedIterableToArray(o, minLen) {\n          if (!o) return;\n          if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n          var n = Object.prototype.toString.call(o).slice(8, -1);\n          if (n === \"Object\" && o.constructor) n = o.constructor.name;\n          if (n === \"Map\" || n === \"Set\") return Array.from(o);\n          if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n        }\n\n        function _arrayLikeToArray(arr, len) {\n          if (len == null || len > arr.length) len = arr.length;\n\n          for (var i = 0, arr2 = new Array(len); i < len; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        }\n\n        function Codeview_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Codeview_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Codeview_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Codeview_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Codeview_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class Codeview\n         */\n\n\n        var CodeView = /*#__PURE__*/function () {\n          function CodeView(context) {\n            Codeview_classCallCheck(this, CodeView);\n            this.context = context;\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.$codable = context.layoutInfo.codable;\n            this.options = context.options;\n            this.CodeMirrorConstructor = window.CodeMirror;\n\n            if (this.options.codemirror.CodeMirrorConstructor) {\n              this.CodeMirrorConstructor = this.options.codemirror.CodeMirrorConstructor;\n            }\n          }\n\n          Codeview_createClass(CodeView, [{\n            key: \"sync\",\n            value: function sync(html) {\n              var isCodeview = this.isActivated();\n              var CodeMirror = this.CodeMirrorConstructor;\n\n              if (isCodeview) {\n                if (html) {\n                  if (CodeMirror) {\n                    this.$codable.data('cmEditor').getDoc().setValue(html);\n                  } else {\n                    this.$codable.val(html);\n                  }\n                } else {\n                  if (CodeMirror) {\n                    this.$codable.data('cmEditor').save();\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              this.$codable.on('keyup', function (event) {\n                if (event.keyCode === key.code.ESCAPE) {\n                  _this.deactivate();\n                }\n              });\n            }\n            /**\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isActivated\",\n            value: function isActivated() {\n              return this.$editor.hasClass('codeview');\n            }\n            /**\n             * toggle codeview\n             */\n\n          }, {\n            key: \"toggle\",\n            value: function toggle() {\n              if (this.isActivated()) {\n                this.deactivate();\n              } else {\n                this.activate();\n              }\n\n              this.context.triggerEvent('codeview.toggled');\n            }\n            /**\n             * purify input value\n             * @param value\n             * @returns {*}\n             */\n\n          }, {\n            key: \"purify\",\n            value: function purify(value) {\n              if (this.options.codeviewFilter) {\n                // filter code view regex\n                value = value.replace(this.options.codeviewFilterRegex, ''); // allow specific iframe tag\n\n                if (this.options.codeviewIframeFilter) {\n                  var whitelist = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);\n                  value = value.replace(/(<iframe.*?>.*?(?:<\\/iframe>)?)/gi, function (tag) {\n                    // remove if src attribute is duplicated\n                    if (/<.+src(?==?('|\"|\\s)?)[\\s\\S]+src(?=('|\"|\\s)?)[^>]*?>/i.test(tag)) {\n                      return '';\n                    }\n\n                    var _iterator = _createForOfIteratorHelper(whitelist),\n                        _step;\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var src = _step.value; // pass if src is trusted\n\n                        if (new RegExp('src=\"(https?:)?\\/\\/' + src.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '\\/(.+)\"').test(tag)) {\n                          return tag;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    return '';\n                  });\n                }\n              }\n\n              return value;\n            }\n            /**\n             * activate code view\n             */\n\n          }, {\n            key: \"activate\",\n            value: function activate() {\n              var _this2 = this;\n\n              var CodeMirror = this.CodeMirrorConstructor;\n              this.$codable.val(dom.html(this.$editable, this.options.prettifyHtml));\n              this.$codable.height(this.$editable.height());\n              this.context.invoke('toolbar.updateCodeview', true);\n              this.context.invoke('airPopover.updateCodeview', true);\n              this.$editor.addClass('codeview');\n              this.$codable.focus(); // activate CodeMirror as codable\n\n              if (CodeMirror) {\n                var cmEditor = CodeMirror.fromTextArea(this.$codable[0], this.options.codemirror); // CodeMirror TernServer\n\n                if (this.options.codemirror.tern) {\n                  var server = new CodeMirror.TernServer(this.options.codemirror.tern);\n                  cmEditor.ternServer = server;\n                  cmEditor.on('cursorActivity', function (cm) {\n                    server.updateArgHints(cm);\n                  });\n                }\n\n                cmEditor.on('blur', function (event) {\n                  _this2.context.triggerEvent('blur.codeview', cmEditor.getValue(), event);\n                });\n                cmEditor.on('change', function () {\n                  _this2.context.triggerEvent('change.codeview', cmEditor.getValue(), cmEditor);\n                }); // CodeMirror hasn't Padding.\n\n                cmEditor.setSize(null, this.$editable.outerHeight());\n                this.$codable.data('cmEditor', cmEditor);\n              } else {\n                this.$codable.on('blur', function (event) {\n                  _this2.context.triggerEvent('blur.codeview', _this2.$codable.val(), event);\n                });\n                this.$codable.on('input', function () {\n                  _this2.context.triggerEvent('change.codeview', _this2.$codable.val(), _this2.$codable);\n                });\n              }\n            }\n            /**\n             * deactivate code view\n             */\n\n          }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n              var CodeMirror = this.CodeMirrorConstructor; // deactivate CodeMirror as codable\n\n              if (CodeMirror) {\n                var cmEditor = this.$codable.data('cmEditor');\n                this.$codable.val(cmEditor.getValue());\n                cmEditor.toTextArea();\n              }\n\n              var value = this.purify(dom.value(this.$codable, this.options.prettifyHtml) || dom.emptyPara);\n              var isChange = this.$editable.html() !== value;\n              this.$editable.html(value);\n              this.$editable.height(this.options.height ? this.$codable.height() : 'auto');\n              this.$editor.removeClass('codeview');\n\n              if (isChange) {\n                this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n              }\n\n              this.$editable.focus();\n              this.context.invoke('toolbar.updateCodeview', false);\n              this.context.invoke('airPopover.updateCodeview', false);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              if (this.isActivated()) {\n                this.deactivate();\n              }\n            }\n          }]);\n          return CodeView;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Statusbar.js\n\n        function Statusbar_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Statusbar_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Statusbar_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Statusbar_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Statusbar_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var EDITABLE_PADDING = 24;\n\n        var Statusbar = /*#__PURE__*/function () {\n          function Statusbar(context) {\n            Statusbar_classCallCheck(this, Statusbar);\n            this.$document = external_jQuery_default()(document);\n            this.$statusbar = context.layoutInfo.statusbar;\n            this.$editable = context.layoutInfo.editable;\n            this.$codable = context.layoutInfo.codable;\n            this.options = context.options;\n          }\n\n          Statusbar_createClass(Statusbar, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              if (this.options.airMode || this.options.disableResizeEditor) {\n                this.destroy();\n                return;\n              }\n\n              this.$statusbar.on('mousedown', function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                var editableTop = _this.$editable.offset().top - _this.$document.scrollTop();\n\n                var editableCodeTop = _this.$codable.offset().top - _this.$document.scrollTop();\n\n                var onMouseMove = function onMouseMove(event) {\n                  var height = event.clientY - (editableTop + EDITABLE_PADDING);\n                  var heightCode = event.clientY - (editableCodeTop + EDITABLE_PADDING);\n                  height = _this.options.minheight > 0 ? Math.max(height, _this.options.minheight) : height;\n                  height = _this.options.maxHeight > 0 ? Math.min(height, _this.options.maxHeight) : height;\n                  heightCode = _this.options.minheight > 0 ? Math.max(heightCode, _this.options.minheight) : heightCode;\n                  heightCode = _this.options.maxHeight > 0 ? Math.min(heightCode, _this.options.maxHeight) : heightCode;\n\n                  _this.$editable.height(height);\n\n                  _this.$codable.height(heightCode);\n                };\n\n                _this.$document.on('mousemove', onMouseMove).one('mouseup', function () {\n                  _this.$document.off('mousemove', onMouseMove);\n                });\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$statusbar.off();\n              this.$statusbar.addClass('locked');\n            }\n          }]);\n          return Statusbar;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Fullscreen.js\n\n        function Fullscreen_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Fullscreen_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Fullscreen_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Fullscreen_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Fullscreen_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Fullscreen = /*#__PURE__*/function () {\n          function Fullscreen(context) {\n            var _this = this;\n\n            Fullscreen_classCallCheck(this, Fullscreen);\n            this.context = context;\n            this.$editor = context.layoutInfo.editor;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.$editable = context.layoutInfo.editable;\n            this.$codable = context.layoutInfo.codable;\n            this.$window = external_jQuery_default()(window);\n            this.$scrollbar = external_jQuery_default()('html, body');\n            this.scrollbarClassName = 'note-fullscreen-body';\n\n            this.onResize = function () {\n              _this.resizeTo({\n                h: _this.$window.height() - _this.$toolbar.outerHeight()\n              });\n            };\n          }\n\n          Fullscreen_createClass(Fullscreen, [{\n            key: \"resizeTo\",\n            value: function resizeTo(size) {\n              this.$editable.css('height', size.h);\n              this.$codable.css('height', size.h);\n\n              if (this.$codable.data('cmeditor')) {\n                this.$codable.data('cmeditor').setsize(null, size.h);\n              }\n            }\n            /**\n             * toggle fullscreen\n             */\n\n          }, {\n            key: \"toggle\",\n            value: function toggle() {\n              this.$editor.toggleClass('fullscreen');\n              var isFullscreen = this.isFullscreen();\n              this.$scrollbar.toggleClass(this.scrollbarClassName, isFullscreen);\n\n              if (isFullscreen) {\n                this.$editable.data('orgHeight', this.$editable.css('height'));\n                this.$editable.data('orgMaxHeight', this.$editable.css('maxHeight'));\n                this.$editable.css('maxHeight', '');\n                this.$window.on('resize', this.onResize).trigger('resize');\n              } else {\n                this.$window.off('resize', this.onResize);\n                this.resizeTo({\n                  h: this.$editable.data('orgHeight')\n                });\n                this.$editable.css('maxHeight', this.$editable.css('orgMaxHeight'));\n              }\n\n              this.context.invoke('toolbar.updateFullscreen', isFullscreen);\n            }\n          }, {\n            key: \"isFullscreen\",\n            value: function isFullscreen() {\n              return this.$editor.hasClass('fullscreen');\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$scrollbar.removeClass(this.scrollbarClassName);\n            }\n          }]);\n          return Fullscreen;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Handle.js\n\n        function Handle_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Handle_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Handle_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Handle_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Handle_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Handle = /*#__PURE__*/function () {\n          function Handle(context) {\n            var _this = this;\n\n            Handle_classCallCheck(this, Handle);\n            this.context = context;\n            this.$document = external_jQuery_default()(document);\n            this.$editingArea = context.layoutInfo.editingArea;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.events = {\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                if (_this.update(e.target, e)) {\n                  e.preventDefault();\n                }\n              },\n              'summernote.keyup summernote.scroll summernote.change summernote.dialog.shown': function summernoteKeyupSummernoteScrollSummernoteChangeSummernoteDialogShown() {\n                _this.update();\n              },\n              'summernote.disable summernote.blur': function summernoteDisableSummernoteBlur() {\n                _this.hide();\n              },\n              'summernote.codeview.toggled': function summernoteCodeviewToggled() {\n                _this.update();\n              }\n            };\n          }\n\n          Handle_createClass(Handle, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$handle = external_jQuery_default()(['<div class=\"note-handle\">', '<div class=\"note-control-selection\">', '<div class=\"note-control-selection-bg\"></div>', '<div class=\"note-control-holder note-control-nw\"></div>', '<div class=\"note-control-holder note-control-ne\"></div>', '<div class=\"note-control-holder note-control-sw\"></div>', '<div class=\"', this.options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing', ' note-control-se\"></div>', this.options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>', '</div>', '</div>'].join('')).prependTo(this.$editingArea);\n              this.$handle.on('mousedown', function (event) {\n                if (dom.isControlSizing(event.target)) {\n                  event.preventDefault();\n                  event.stopPropagation();\n\n                  var $target = _this2.$handle.find('.note-control-selection').data('target');\n\n                  var posStart = $target.offset();\n\n                  var scrollTop = _this2.$document.scrollTop();\n\n                  var onMouseMove = function onMouseMove(event) {\n                    _this2.context.invoke('editor.resizeTo', {\n                      x: event.clientX - posStart.left,\n                      y: event.clientY - (posStart.top - scrollTop)\n                    }, $target, !event.shiftKey);\n\n                    _this2.update($target[0], event);\n                  };\n\n                  _this2.$document.on('mousemove', onMouseMove).one('mouseup', function (e) {\n                    e.preventDefault();\n\n                    _this2.$document.off('mousemove', onMouseMove);\n\n                    _this2.context.invoke('editor.afterCommand');\n                  });\n\n                  if (!$target.data('ratio')) {\n                    // original ratio.\n                    $target.data('ratio', $target.height() / $target.width());\n                  }\n                }\n              }); // Listen for scrolling on the handle overlay.\n\n              this.$handle.on('wheel', function (e) {\n                e.preventDefault();\n\n                _this2.update();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$handle.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target, event) {\n              if (this.context.isDisabled()) {\n                return false;\n              }\n\n              var isImage = dom.isImg(target);\n              var $selection = this.$handle.find('.note-control-selection');\n              this.context.invoke('imagePopover.update', target, event);\n\n              if (isImage) {\n                var $image = external_jQuery_default()(target);\n                var position = $image.position();\n                var pos = {\n                  left: position.left + parseInt($image.css('marginLeft'), 10),\n                  top: position.top + parseInt($image.css('marginTop'), 10)\n                }; // exclude margin\n\n                var imageSize = {\n                  w: $image.outerWidth(false),\n                  h: $image.outerHeight(false)\n                };\n                $selection.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top,\n                  width: imageSize.w,\n                  height: imageSize.h\n                }).data('target', $image); // save current image element.\n\n                var origImageObj = new Image();\n                origImageObj.src = $image.attr('src');\n                var sizingText = imageSize.w + 'x' + imageSize.h + ' (' + this.lang.image.original + ': ' + origImageObj.width + 'x' + origImageObj.height + ')';\n                $selection.find('.note-control-selection-info').text(sizingText);\n                this.context.invoke('editor.saveTarget', target);\n              } else {\n                this.hide();\n              }\n\n              return isImage;\n            }\n            /**\n             * hide\n             *\n             * @param {jQuery} $handle\n             */\n\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.context.invoke('editor.clearTarget');\n              this.$handle.children().hide();\n            }\n          }]);\n          return Handle;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/AutoLink.js\n\n        function AutoLink_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoLink_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoLink_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoLink_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoLink_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var defaultScheme = 'http://';\n        var linkPattern = /^([A-Za-z][A-Za-z0-9+-.]*\\:[\\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@|xmpp:[A-Z0-9._%+-]+@)?(www\\.)?(.+)$/i;\n\n        var AutoLink = /*#__PURE__*/function () {\n          function AutoLink(context) {\n            var _this = this;\n\n            AutoLink_classCallCheck(this, AutoLink);\n            this.context = context;\n            this.options = context.options;\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              }\n            };\n          }\n\n          AutoLink_createClass(AutoLink, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.lastWordRange = null;\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.lastWordRange = null;\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              if (!this.lastWordRange) {\n                return;\n              }\n\n              var keyword = this.lastWordRange.toString();\n              var match = keyword.match(linkPattern);\n\n              if (match && (match[1] || match[2])) {\n                var link = match[1] ? keyword : defaultScheme + keyword;\n                var urlText = this.options.showDomainOnlyForAutolink ? keyword.replace(/^(?:https?:\\/\\/)?(?:tel?:?)?(?:mailto?:?)?(?:xmpp?:?)?(?:www\\.)?/i, '').split('/')[0] : keyword;\n                var node = external_jQuery_default()('<a></a>').html(urlText).attr('href', link)[0];\n\n                if (this.context.options.linkTargetBlank) {\n                  external_jQuery_default()(node).attr('target', '_blank');\n                }\n\n                this.lastWordRange.insertNode(node);\n                this.lastWordRange = null;\n                this.context.invoke('editor.focus');\n              }\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              if (lists.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {\n                var wordRange = this.context.invoke('editor.createRange').getWordRange();\n                this.lastWordRange = wordRange;\n              }\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              if (lists.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {\n                this.replace();\n              }\n            }\n          }]);\n          return AutoLink;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/AutoSync.js\n\n        function AutoSync_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoSync_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoSync_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoSync_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoSync_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * textarea auto sync.\n         */\n\n\n        var AutoSync = /*#__PURE__*/function () {\n          function AutoSync(context) {\n            var _this = this;\n\n            AutoSync_classCallCheck(this, AutoSync);\n            this.$note = context.layoutInfo.note;\n            this.events = {\n              'summernote.change': function summernoteChange() {\n                _this.$note.val(context.invoke('code'));\n              }\n            };\n          }\n\n          AutoSync_createClass(AutoSync, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return dom.isTextarea(this.$note[0]);\n            }\n          }]);\n          return AutoSync;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/AutoReplace.js\n\n        function AutoReplace_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoReplace_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoReplace_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoReplace_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoReplace_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var AutoReplace = /*#__PURE__*/function () {\n          function AutoReplace(context) {\n            var _this = this;\n\n            AutoReplace_classCallCheck(this, AutoReplace);\n            this.context = context;\n            this.options = context.options.replace || {};\n            this.keys = [key.code.ENTER, key.code.SPACE, key.code.PERIOD, key.code.COMMA, key.code.SEMICOLON, key.code.SLASH];\n            this.previousKeydownCode = null;\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              }\n            };\n          }\n\n          AutoReplace_createClass(AutoReplace, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !!this.options.match;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.lastWord = null;\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.lastWord = null;\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              if (!this.lastWord) {\n                return;\n              }\n\n              var self = this;\n              var keyword = this.lastWord.toString();\n              this.options.match(keyword, function (match) {\n                if (match) {\n                  var node = '';\n\n                  if (typeof match === 'string') {\n                    node = dom.createText(match);\n                  } else if (match instanceof jQuery) {\n                    node = match[0];\n                  } else if (match instanceof Node) {\n                    node = match;\n                  }\n\n                  if (!node) return;\n                  self.lastWord.insertNode(node);\n                  self.lastWord = null;\n                  self.context.invoke('editor.focus');\n                }\n              });\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              // this forces it to remember the last whole word, even if multiple termination keys are pressed\n              // before the previous key is let go.\n              if (this.previousKeydownCode && lists.contains(this.keys, this.previousKeydownCode)) {\n                this.previousKeydownCode = e.keyCode;\n                return;\n              }\n\n              if (lists.contains(this.keys, e.keyCode)) {\n                var wordRange = this.context.invoke('editor.createRange').getWordRange();\n                this.lastWord = wordRange;\n              }\n\n              this.previousKeydownCode = e.keyCode;\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              if (lists.contains(this.keys, e.keyCode)) {\n                this.replace();\n              }\n            }\n          }]);\n          return AutoReplace;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Placeholder.js\n\n        function Placeholder_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Placeholder_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Placeholder_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Placeholder_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Placeholder_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Placeholder = /*#__PURE__*/function () {\n          function Placeholder(context) {\n            var _this = this;\n\n            Placeholder_classCallCheck(this, Placeholder);\n            this.context = context;\n            this.$editingArea = context.layoutInfo.editingArea;\n            this.options = context.options;\n\n            if (this.options.inheritPlaceholder === true) {\n              // get placeholder value from the original element\n              this.options.placeholder = this.context.$note.attr('placeholder') || this.options.placeholder;\n            }\n\n            this.events = {\n              'summernote.init summernote.change': function summernoteInitSummernoteChange() {\n                _this.update();\n              },\n              'summernote.codeview.toggled': function summernoteCodeviewToggled() {\n                _this.update();\n              }\n            };\n          }\n\n          Placeholder_createClass(Placeholder, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !!this.options.placeholder;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$placeholder = external_jQuery_default()('<div class=\"note-placeholder\"></div>');\n              this.$placeholder.on('click', function () {\n                _this2.context.invoke('focus');\n              }).html(this.options.placeholder).prependTo(this.$editingArea);\n              this.update();\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$placeholder.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              var isShow = !this.context.invoke('codeview.isActivated') && this.context.invoke('editor.isEmpty');\n              this.$placeholder.toggle(isShow);\n            }\n          }]);\n          return Placeholder;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Buttons.js\n\n        function Buttons_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Buttons_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Buttons_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Buttons_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Buttons_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Buttons = /*#__PURE__*/function () {\n          function Buttons(context) {\n            Buttons_classCallCheck(this, Buttons);\n            this.ui = external_jQuery_default().summernote.ui;\n            this.context = context;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.invertedKeyMap = func.invertObject(this.options.keyMap[env.isMac ? 'mac' : 'pc']);\n          }\n\n          Buttons_createClass(Buttons, [{\n            key: \"representShortcut\",\n            value: function representShortcut(editorMethod) {\n              var shortcut = this.invertedKeyMap[editorMethod];\n\n              if (!this.options.shortcuts || !shortcut) {\n                return '';\n              }\n\n              if (env.isMac) {\n                shortcut = shortcut.replace('CMD', '⌘').replace('SHIFT', '⇧');\n              }\n\n              shortcut = shortcut.replace('BACKSLASH', '\\\\').replace('SLASH', '/').replace('LEFTBRACKET', '[').replace('RIGHTBRACKET', ']');\n              return ' (' + shortcut + ')';\n            }\n          }, {\n            key: \"button\",\n            value: function button(o) {\n              if (!this.options.tooltip && o.tooltip) {\n                delete o.tooltip;\n              }\n\n              o.container = this.options.container;\n              return this.ui.button(o);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.addToolbarButtons();\n              this.addImagePopoverButtons();\n              this.addLinkPopoverButtons();\n              this.addTablePopoverButtons();\n              this.fontInstalledMap = {};\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              delete this.fontInstalledMap;\n            }\n          }, {\n            key: \"isFontInstalled\",\n            value: function isFontInstalled(name) {\n              if (!Object.prototype.hasOwnProperty.call(this.fontInstalledMap, name)) {\n                this.fontInstalledMap[name] = env.isFontInstalled(name) || lists.contains(this.options.fontNamesIgnoreCheck, name);\n              }\n\n              return this.fontInstalledMap[name];\n            }\n          }, {\n            key: \"isFontDeservedToAdd\",\n            value: function isFontDeservedToAdd(name) {\n              name = name.toLowerCase();\n              return name !== '' && this.isFontInstalled(name) && env.genericFontFamilies.indexOf(name) === -1;\n            }\n          }, {\n            key: \"colorPalette\",\n            value: function colorPalette(className, tooltip, backColor, foreColor) {\n              var _this = this;\n\n              return this.ui.buttonGroup({\n                className: 'note-color ' + className,\n                children: [this.button({\n                  className: 'note-current-color-button',\n                  contents: this.ui.icon(this.options.icons.font + ' note-recent-color'),\n                  tooltip: tooltip,\n                  click: function click(e) {\n                    var $button = external_jQuery_default()(e.currentTarget);\n\n                    if (backColor && foreColor) {\n                      _this.context.invoke('editor.color', {\n                        backColor: $button.attr('data-backColor'),\n                        foreColor: $button.attr('data-foreColor')\n                      });\n                    } else if (backColor) {\n                      _this.context.invoke('editor.color', {\n                        backColor: $button.attr('data-backColor')\n                      });\n                    } else if (foreColor) {\n                      _this.context.invoke('editor.color', {\n                        foreColor: $button.attr('data-foreColor')\n                      });\n                    }\n                  },\n                  callback: function callback($button) {\n                    var $recentColor = $button.find('.note-recent-color');\n\n                    if (backColor) {\n                      $recentColor.css('background-color', _this.options.colorButton.backColor);\n                      $button.attr('data-backColor', _this.options.colorButton.backColor);\n                    }\n\n                    if (foreColor) {\n                      $recentColor.css('color', _this.options.colorButton.foreColor);\n                      $button.attr('data-foreColor', _this.options.colorButton.foreColor);\n                    } else {\n                      $recentColor.css('color', 'transparent');\n                    }\n                  }\n                }), this.button({\n                  className: 'dropdown-toggle',\n                  contents: this.ui.dropdownButtonContents('', this.options),\n                  tooltip: this.lang.color.more,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), this.ui.dropdown({\n                  items: (backColor ? ['<div class=\"note-palette\">', '<div class=\"note-palette-title\">' + this.lang.color.background + '</div>', '<div>', '<button type=\"button\" class=\"note-color-reset btn btn-light btn-default\" data-event=\"backColor\" data-value=\"transparent\">', this.lang.color.transparent, '</button>', '</div>', '<div class=\"note-holder\" data-event=\"backColor\"><!-- back colors --></div>', '<div>', '<button type=\"button\" class=\"note-color-select btn btn-light btn-default\" data-event=\"openPalette\" data-value=\"backColorPicker-' + this.options.id + '\">', this.lang.color.cpSelect, '</button>', '<input type=\"color\" id=\"backColorPicker-' + this.options.id + '\" class=\"note-btn note-color-select-btn\" value=\"' + this.options.colorButton.backColor + '\" data-event=\"backColorPalette-' + this.options.id + '\">', '</div>', '<div class=\"note-holder-custom\" id=\"backColorPalette-' + this.options.id + '\" data-event=\"backColor\"></div>', '</div>'].join('') : '') + (foreColor ? ['<div class=\"note-palette\">', '<div class=\"note-palette-title\">' + this.lang.color.foreground + '</div>', '<div>', '<button type=\"button\" class=\"note-color-reset btn btn-light btn-default\" data-event=\"removeFormat\" data-value=\"foreColor\">', this.lang.color.resetToDefault, '</button>', '</div>', '<div class=\"note-holder\" data-event=\"foreColor\"><!-- fore colors --></div>', '<div>', '<button type=\"button\" class=\"note-color-select btn btn-light btn-default\" data-event=\"openPalette\" data-value=\"foreColorPicker-' + this.options.id + '\">', this.lang.color.cpSelect, '</button>', '<input type=\"color\" id=\"foreColorPicker-' + this.options.id + '\" class=\"note-btn note-color-select-btn\" value=\"' + this.options.colorButton.foreColor + '\" data-event=\"foreColorPalette-' + this.options.id + '\">', '</div>', // Fix missing Div, Commented to find easily if it's wrong\n                  '<div class=\"note-holder-custom\" id=\"foreColorPalette-' + this.options.id + '\" data-event=\"foreColor\"></div>', '</div>'].join('') : ''),\n                  callback: function callback($dropdown) {\n                    $dropdown.find('.note-holder').each(function (idx, item) {\n                      var $holder = external_jQuery_default()(item);\n                      $holder.append(_this.ui.palette({\n                        colors: _this.options.colors,\n                        colorsName: _this.options.colorsName,\n                        eventName: $holder.data('event'),\n                        container: _this.options.container,\n                        tooltip: _this.options.tooltip\n                      }).render());\n                    });\n                    /* TODO: do we have to record recent custom colors within cookies? */\n\n                    var customColors = [['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF']];\n                    $dropdown.find('.note-holder-custom').each(function (idx, item) {\n                      var $holder = external_jQuery_default()(item);\n                      $holder.append(_this.ui.palette({\n                        colors: customColors,\n                        colorsName: customColors,\n                        eventName: $holder.data('event'),\n                        container: _this.options.container,\n                        tooltip: _this.options.tooltip\n                      }).render());\n                    });\n                    $dropdown.find('input[type=color]').each(function (idx, item) {\n                      external_jQuery_default()(item).change(function () {\n                        var $chip = $dropdown.find('#' + external_jQuery_default()(this).data('event')).find('.note-color-btn').first();\n                        var color = this.value.toUpperCase();\n                        $chip.css('background-color', color).attr('aria-label', color).attr('data-value', color).attr('data-original-title', color);\n                        $chip.click();\n                      });\n                    });\n                  },\n                  click: function click(event) {\n                    event.stopPropagation();\n                    var $parent = external_jQuery_default()('.' + className).find('.note-dropdown-menu');\n                    var $button = external_jQuery_default()(event.target);\n                    var eventName = $button.data('event');\n                    var value = $button.attr('data-value');\n\n                    if (eventName === 'openPalette') {\n                      var $picker = $parent.find('#' + value);\n                      var $palette = external_jQuery_default()($parent.find('#' + $picker.data('event')).find('.note-color-row')[0]); // Shift palette chips\n\n                      var $chip = $palette.find('.note-color-btn').last().detach(); // Set chip attributes\n\n                      var color = $picker.val();\n                      $chip.css('background-color', color).attr('aria-label', color).attr('data-value', color).attr('data-original-title', color);\n                      $palette.prepend($chip);\n                      $picker.click();\n                    } else {\n                      if (lists.contains(['backColor', 'foreColor'], eventName)) {\n                        var key = eventName === 'backColor' ? 'background-color' : 'color';\n                        var $color = $button.closest('.note-color').find('.note-recent-color');\n                        var $currentButton = $button.closest('.note-color').find('.note-current-color-button');\n                        $color.css(key, value);\n                        $currentButton.attr('data-' + eventName, value);\n                      }\n\n                      _this.context.invoke('editor.' + eventName, value);\n                    }\n                  }\n                })]\n              }).render();\n            }\n          }, {\n            key: \"addToolbarButtons\",\n            value: function addToolbarButtons() {\n              var _this2 = this;\n\n              this.context.memo('button.style', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.magic), _this2.options),\n                  tooltip: _this2.lang.style.style,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown({\n                  className: 'dropdown-style',\n                  items: _this2.options.styleTags,\n                  title: _this2.lang.style.style,\n                  template: function template(item) {\n                    // TBD: need to be simplified\n                    if (typeof item === 'string') {\n                      item = {\n                        tag: item,\n                        title: Object.prototype.hasOwnProperty.call(_this2.lang.style, item) ? _this2.lang.style[item] : item\n                      };\n                    }\n\n                    var tag = item.tag;\n                    var title = item.title;\n                    var style = item.style ? ' style=\"' + item.style + '\" ' : '';\n                    var className = item.className ? ' class=\"' + item.className + '\"' : '';\n                    return '<' + tag + style + className + '>' + title + '</' + tag + '>';\n                  },\n                  click: _this2.context.createInvokeHandler('editor.formatBlock')\n                })]).render();\n              });\n\n              var _loop = function _loop(styleIdx, styleLen) {\n                var item = _this2.options.styleTags[styleIdx];\n\n                _this2.context.memo('button.style.' + item, function () {\n                  return _this2.button({\n                    className: 'note-btn-style-' + item,\n                    contents: '<div data-value=\"' + item + '\">' + item.toUpperCase() + '</div>',\n                    tooltip: _this2.lang.style[item],\n                    click: _this2.context.createInvokeHandler('editor.formatBlock')\n                  }).render();\n                });\n              };\n\n              for (var styleIdx = 0, styleLen = this.options.styleTags.length; styleIdx < styleLen; styleIdx++) {\n                _loop(styleIdx, styleLen);\n              }\n\n              this.context.memo('button.bold', function () {\n                return _this2.button({\n                  className: 'note-btn-bold',\n                  contents: _this2.ui.icon(_this2.options.icons.bold),\n                  tooltip: _this2.lang.font.bold + _this2.representShortcut('bold'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.bold')\n                }).render();\n              });\n              this.context.memo('button.italic', function () {\n                return _this2.button({\n                  className: 'note-btn-italic',\n                  contents: _this2.ui.icon(_this2.options.icons.italic),\n                  tooltip: _this2.lang.font.italic + _this2.representShortcut('italic'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.italic')\n                }).render();\n              });\n              this.context.memo('button.underline', function () {\n                return _this2.button({\n                  className: 'note-btn-underline',\n                  contents: _this2.ui.icon(_this2.options.icons.underline),\n                  tooltip: _this2.lang.font.underline + _this2.representShortcut('underline'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.underline')\n                }).render();\n              });\n              this.context.memo('button.clear', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.eraser),\n                  tooltip: _this2.lang.font.clear + _this2.representShortcut('removeFormat'),\n                  click: _this2.context.createInvokeHandler('editor.removeFormat')\n                }).render();\n              });\n              this.context.memo('button.strikethrough', function () {\n                return _this2.button({\n                  className: 'note-btn-strikethrough',\n                  contents: _this2.ui.icon(_this2.options.icons.strikethrough),\n                  tooltip: _this2.lang.font.strikethrough + _this2.representShortcut('strikethrough'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.strikethrough')\n                }).render();\n              });\n              this.context.memo('button.superscript', function () {\n                return _this2.button({\n                  className: 'note-btn-superscript',\n                  contents: _this2.ui.icon(_this2.options.icons.superscript),\n                  tooltip: _this2.lang.font.superscript,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.superscript')\n                }).render();\n              });\n              this.context.memo('button.subscript', function () {\n                return _this2.button({\n                  className: 'note-btn-subscript',\n                  contents: _this2.ui.icon(_this2.options.icons.subscript),\n                  tooltip: _this2.lang.font.subscript,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.subscript')\n                }).render();\n              });\n              this.context.memo('button.fontname', function () {\n                var styleInfo = _this2.context.invoke('editor.currentStyle');\n\n                if (_this2.options.addDefaultFonts) {\n                  // Add 'default' fonts into the fontnames array if not exist\n                  external_jQuery_default().each(styleInfo['font-family'].split(','), function (idx, fontname) {\n                    fontname = fontname.trim().replace(/['\"]+/g, '');\n\n                    if (_this2.isFontDeservedToAdd(fontname)) {\n                      if (_this2.options.fontNames.indexOf(fontname) === -1) {\n                        _this2.options.fontNames.push(fontname);\n                      }\n                    }\n                  });\n                }\n\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontname\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.name,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontname',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontNames.filter(_this2.isFontInstalled.bind(_this2)),\n                  title: _this2.lang.font.name,\n                  template: function template(item) {\n                    return '<span style=\"font-family: ' + env.validFontName(item) + '\">' + item + '</span>';\n                  },\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontName')\n                })]).render();\n              });\n              this.context.memo('button.fontsize', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontsize\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.size,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontsize',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontSizes,\n                  title: _this2.lang.font.size,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontSize')\n                })]).render();\n              });\n              this.context.memo('button.fontsizeunit', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontsizeunit\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.sizeunit,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontsizeunit',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontSizeUnits,\n                  title: _this2.lang.font.sizeunit,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontSizeUnit')\n                })]).render();\n              });\n              this.context.memo('button.color', function () {\n                return _this2.colorPalette('note-color-all', _this2.lang.color.recent, true, true);\n              });\n              this.context.memo('button.forecolor', function () {\n                return _this2.colorPalette('note-color-fore', _this2.lang.color.foreground, false, true);\n              });\n              this.context.memo('button.backcolor', function () {\n                return _this2.colorPalette('note-color-back', _this2.lang.color.background, true, false);\n              });\n              this.context.memo('button.ul', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.unorderedlist),\n                  tooltip: _this2.lang.lists.unordered + _this2.representShortcut('insertUnorderedList'),\n                  click: _this2.context.createInvokeHandler('editor.insertUnorderedList')\n                }).render();\n              });\n              this.context.memo('button.ol', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.orderedlist),\n                  tooltip: _this2.lang.lists.ordered + _this2.representShortcut('insertOrderedList'),\n                  click: _this2.context.createInvokeHandler('editor.insertOrderedList')\n                }).render();\n              });\n              var justifyLeft = this.button({\n                contents: this.ui.icon(this.options.icons.alignLeft),\n                tooltip: this.lang.paragraph.left + this.representShortcut('justifyLeft'),\n                click: this.context.createInvokeHandler('editor.justifyLeft')\n              });\n              var justifyCenter = this.button({\n                contents: this.ui.icon(this.options.icons.alignCenter),\n                tooltip: this.lang.paragraph.center + this.representShortcut('justifyCenter'),\n                click: this.context.createInvokeHandler('editor.justifyCenter')\n              });\n              var justifyRight = this.button({\n                contents: this.ui.icon(this.options.icons.alignRight),\n                tooltip: this.lang.paragraph.right + this.representShortcut('justifyRight'),\n                click: this.context.createInvokeHandler('editor.justifyRight')\n              });\n              var justifyFull = this.button({\n                contents: this.ui.icon(this.options.icons.alignJustify),\n                tooltip: this.lang.paragraph.justify + this.representShortcut('justifyFull'),\n                click: this.context.createInvokeHandler('editor.justifyFull')\n              });\n              var outdent = this.button({\n                contents: this.ui.icon(this.options.icons.outdent),\n                tooltip: this.lang.paragraph.outdent + this.representShortcut('outdent'),\n                click: this.context.createInvokeHandler('editor.outdent')\n              });\n              var indent = this.button({\n                contents: this.ui.icon(this.options.icons.indent),\n                tooltip: this.lang.paragraph.indent + this.representShortcut('indent'),\n                click: this.context.createInvokeHandler('editor.indent')\n              });\n              this.context.memo('button.justifyLeft', func.invoke(justifyLeft, 'render'));\n              this.context.memo('button.justifyCenter', func.invoke(justifyCenter, 'render'));\n              this.context.memo('button.justifyRight', func.invoke(justifyRight, 'render'));\n              this.context.memo('button.justifyFull', func.invoke(justifyFull, 'render'));\n              this.context.memo('button.outdent', func.invoke(outdent, 'render'));\n              this.context.memo('button.indent', func.invoke(indent, 'render'));\n              this.context.memo('button.paragraph', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.alignLeft), _this2.options),\n                  tooltip: _this2.lang.paragraph.paragraph,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown([_this2.ui.buttonGroup({\n                  className: 'note-align',\n                  children: [justifyLeft, justifyCenter, justifyRight, justifyFull]\n                }), _this2.ui.buttonGroup({\n                  className: 'note-list',\n                  children: [outdent, indent]\n                })])]).render();\n              });\n              this.context.memo('button.height', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.textHeight), _this2.options),\n                  tooltip: _this2.lang.font.height,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  items: _this2.options.lineHeights,\n                  checkClassName: _this2.options.icons.menuCheck,\n                  className: 'dropdown-line-height',\n                  title: _this2.lang.font.height,\n                  click: _this2.context.createInvokeHandler('editor.lineHeight')\n                })]).render();\n              });\n              this.context.memo('button.table', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.table), _this2.options),\n                  tooltip: _this2.lang.table.table,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown({\n                  title: _this2.lang.table.table,\n                  className: 'note-table',\n                  items: ['<div class=\"note-dimension-picker\">', '<div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"></div>', '<div class=\"note-dimension-picker-highlighted\"></div>', '<div class=\"note-dimension-picker-unhighlighted\"></div>', '</div>', '<div class=\"note-dimension-display\">1 x 1</div>'].join('')\n                })], {\n                  callback: function callback($node) {\n                    var $catcher = $node.find('.note-dimension-picker-mousecatcher');\n                    $catcher.css({\n                      width: _this2.options.insertTableMaxSize.col + 'em',\n                      height: _this2.options.insertTableMaxSize.row + 'em'\n                    }).mouseup(_this2.context.createInvokeHandler('editor.insertTable')).on('mousemove', _this2.tableMoveHandler.bind(_this2));\n                  }\n                }).render();\n              });\n              this.context.memo('button.link', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.link),\n                  tooltip: _this2.lang.link.link + _this2.representShortcut('linkDialog.show'),\n                  click: _this2.context.createInvokeHandler('linkDialog.show')\n                }).render();\n              });\n              this.context.memo('button.picture', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.picture),\n                  tooltip: _this2.lang.image.image,\n                  click: _this2.context.createInvokeHandler('imageDialog.show')\n                }).render();\n              });\n              this.context.memo('button.video', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.video),\n                  tooltip: _this2.lang.video.video,\n                  click: _this2.context.createInvokeHandler('videoDialog.show')\n                }).render();\n              });\n              this.context.memo('button.hr', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.minus),\n                  tooltip: _this2.lang.hr.insert + _this2.representShortcut('insertHorizontalRule'),\n                  click: _this2.context.createInvokeHandler('editor.insertHorizontalRule')\n                }).render();\n              });\n              this.context.memo('button.fullscreen', function () {\n                return _this2.button({\n                  className: 'btn-fullscreen note-codeview-keep',\n                  contents: _this2.ui.icon(_this2.options.icons.arrowsAlt),\n                  tooltip: _this2.lang.options.fullscreen,\n                  click: _this2.context.createInvokeHandler('fullscreen.toggle')\n                }).render();\n              });\n              this.context.memo('button.codeview', function () {\n                return _this2.button({\n                  className: 'btn-codeview note-codeview-keep',\n                  contents: _this2.ui.icon(_this2.options.icons.code),\n                  tooltip: _this2.lang.options.codeview,\n                  click: _this2.context.createInvokeHandler('codeview.toggle')\n                }).render();\n              });\n              this.context.memo('button.redo', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.redo),\n                  tooltip: _this2.lang.history.redo + _this2.representShortcut('redo'),\n                  click: _this2.context.createInvokeHandler('editor.redo')\n                }).render();\n              });\n              this.context.memo('button.undo', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.undo),\n                  tooltip: _this2.lang.history.undo + _this2.representShortcut('undo'),\n                  click: _this2.context.createInvokeHandler('editor.undo')\n                }).render();\n              });\n              this.context.memo('button.help', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.question),\n                  tooltip: _this2.lang.options.help,\n                  click: _this2.context.createInvokeHandler('helpDialog.show')\n                }).render();\n              });\n            }\n            /**\n             * image: [\n             *   ['imageResize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']],\n             *   ['float', ['floatLeft', 'floatRight', 'floatNone']],\n             *   ['remove', ['removeMedia']],\n             * ],\n             */\n\n          }, {\n            key: \"addImagePopoverButtons\",\n            value: function addImagePopoverButtons() {\n              var _this3 = this; // Image Size Buttons\n\n\n              this.context.memo('button.resizeFull', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">100%</span>',\n                  tooltip: _this3.lang.image.resizeFull,\n                  click: _this3.context.createInvokeHandler('editor.resize', '1')\n                }).render();\n              });\n              this.context.memo('button.resizeHalf', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">50%</span>',\n                  tooltip: _this3.lang.image.resizeHalf,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0.5')\n                }).render();\n              });\n              this.context.memo('button.resizeQuarter', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">25%</span>',\n                  tooltip: _this3.lang.image.resizeQuarter,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0.25')\n                }).render();\n              });\n              this.context.memo('button.resizeNone', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.rollback),\n                  tooltip: _this3.lang.image.resizeNone,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0')\n                }).render();\n              }); // Float Buttons\n\n              this.context.memo('button.floatLeft', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.floatLeft),\n                  tooltip: _this3.lang.image.floatLeft,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'left')\n                }).render();\n              });\n              this.context.memo('button.floatRight', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.floatRight),\n                  tooltip: _this3.lang.image.floatRight,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'right')\n                }).render();\n              });\n              this.context.memo('button.floatNone', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.rollback),\n                  tooltip: _this3.lang.image.floatNone,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'none')\n                }).render();\n              }); // Remove Buttons\n\n              this.context.memo('button.removeMedia', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.trash),\n                  tooltip: _this3.lang.image.remove,\n                  click: _this3.context.createInvokeHandler('editor.removeMedia')\n                }).render();\n              });\n            }\n          }, {\n            key: \"addLinkPopoverButtons\",\n            value: function addLinkPopoverButtons() {\n              var _this4 = this;\n\n              this.context.memo('button.linkDialogShow', function () {\n                return _this4.button({\n                  contents: _this4.ui.icon(_this4.options.icons.link),\n                  tooltip: _this4.lang.link.edit,\n                  click: _this4.context.createInvokeHandler('linkDialog.show')\n                }).render();\n              });\n              this.context.memo('button.unlink', function () {\n                return _this4.button({\n                  contents: _this4.ui.icon(_this4.options.icons.unlink),\n                  tooltip: _this4.lang.link.unlink,\n                  click: _this4.context.createInvokeHandler('editor.unlink')\n                }).render();\n              });\n            }\n            /**\n             * table : [\n             *  ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],\n             *  ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]\n             * ],\n             */\n\n          }, {\n            key: \"addTablePopoverButtons\",\n            value: function addTablePopoverButtons() {\n              var _this5 = this;\n\n              this.context.memo('button.addRowUp', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowAbove),\n                  tooltip: _this5.lang.table.addRowAbove,\n                  click: _this5.context.createInvokeHandler('editor.addRow', 'top')\n                }).render();\n              });\n              this.context.memo('button.addRowDown', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowBelow),\n                  tooltip: _this5.lang.table.addRowBelow,\n                  click: _this5.context.createInvokeHandler('editor.addRow', 'bottom')\n                }).render();\n              });\n              this.context.memo('button.addColLeft', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colBefore),\n                  tooltip: _this5.lang.table.addColLeft,\n                  click: _this5.context.createInvokeHandler('editor.addCol', 'left')\n                }).render();\n              });\n              this.context.memo('button.addColRight', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colAfter),\n                  tooltip: _this5.lang.table.addColRight,\n                  click: _this5.context.createInvokeHandler('editor.addCol', 'right')\n                }).render();\n              });\n              this.context.memo('button.deleteRow', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowRemove),\n                  tooltip: _this5.lang.table.delRow,\n                  click: _this5.context.createInvokeHandler('editor.deleteRow')\n                }).render();\n              });\n              this.context.memo('button.deleteCol', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colRemove),\n                  tooltip: _this5.lang.table.delCol,\n                  click: _this5.context.createInvokeHandler('editor.deleteCol')\n                }).render();\n              });\n              this.context.memo('button.deleteTable', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.trash),\n                  tooltip: _this5.lang.table.delTable,\n                  click: _this5.context.createInvokeHandler('editor.deleteTable')\n                }).render();\n              });\n            }\n          }, {\n            key: \"build\",\n            value: function build($container, groups) {\n              for (var groupIdx = 0, groupLen = groups.length; groupIdx < groupLen; groupIdx++) {\n                var group = groups[groupIdx];\n                var groupName = Array.isArray(group) ? group[0] : group;\n                var buttons = Array.isArray(group) ? group.length === 1 ? [group[0]] : group[1] : [group];\n                var $group = this.ui.buttonGroup({\n                  className: 'note-' + groupName\n                }).render();\n\n                for (var idx = 0, len = buttons.length; idx < len; idx++) {\n                  var btn = this.context.memo('button.' + buttons[idx]);\n\n                  if (btn) {\n                    $group.append(typeof btn === 'function' ? btn(this.context) : btn);\n                  }\n                }\n\n                $group.appendTo($container);\n              }\n            }\n            /**\n             * @param {jQuery} [$container]\n             */\n\n          }, {\n            key: \"updateCurrentStyle\",\n            value: function updateCurrentStyle($container) {\n              var $cont = $container || this.$toolbar;\n              var styleInfo = this.context.invoke('editor.currentStyle');\n              this.updateBtnStates($cont, {\n                '.note-btn-bold': function noteBtnBold() {\n                  return styleInfo['font-bold'] === 'bold';\n                },\n                '.note-btn-italic': function noteBtnItalic() {\n                  return styleInfo['font-italic'] === 'italic';\n                },\n                '.note-btn-underline': function noteBtnUnderline() {\n                  return styleInfo['font-underline'] === 'underline';\n                },\n                '.note-btn-subscript': function noteBtnSubscript() {\n                  return styleInfo['font-subscript'] === 'subscript';\n                },\n                '.note-btn-superscript': function noteBtnSuperscript() {\n                  return styleInfo['font-superscript'] === 'superscript';\n                },\n                '.note-btn-strikethrough': function noteBtnStrikethrough() {\n                  return styleInfo['font-strikethrough'] === 'strikethrough';\n                }\n              });\n\n              if (styleInfo['font-family']) {\n                var fontNames = styleInfo['font-family'].split(',').map(function (name) {\n                  return name.replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');\n                });\n                var fontName = lists.find(fontNames, this.isFontInstalled.bind(this));\n                $cont.find('.dropdown-fontname a').each(function (idx, item) {\n                  var $item = external_jQuery_default()(item); // always compare string to avoid creating another func.\n\n                  var isChecked = $item.data('value') + '' === fontName + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontname').text(fontName).css('font-family', fontName);\n              }\n\n              if (styleInfo['font-size']) {\n                var fontSize = styleInfo['font-size'];\n                $cont.find('.dropdown-fontsize a').each(function (idx, item) {\n                  var $item = external_jQuery_default()(item); // always compare with string to avoid creating another func.\n\n                  var isChecked = $item.data('value') + '' === fontSize + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontsize').text(fontSize);\n                var fontSizeUnit = styleInfo['font-size-unit'];\n                $cont.find('.dropdown-fontsizeunit a').each(function (idx, item) {\n                  var $item = external_jQuery_default()(item);\n                  var isChecked = $item.data('value') + '' === fontSizeUnit + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontsizeunit').text(fontSizeUnit);\n              }\n\n              if (styleInfo['line-height']) {\n                var lineHeight = styleInfo['line-height'];\n                $cont.find('.dropdown-line-height a').each(function (idx, item) {\n                  var $item = external_jQuery_default()(item); // always compare with string to avoid creating another func.\n\n                  var isChecked = external_jQuery_default()(item).data('value') + '' === lineHeight + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-line-height').text(lineHeight);\n              }\n            }\n          }, {\n            key: \"updateBtnStates\",\n            value: function updateBtnStates($container, infos) {\n              var _this6 = this;\n\n              external_jQuery_default().each(infos, function (selector, pred) {\n                _this6.ui.toggleBtnActive($container.find(selector), pred());\n              });\n            }\n          }, {\n            key: \"tableMoveHandler\",\n            value: function tableMoveHandler(event) {\n              var PX_PER_EM = 18;\n              var $picker = external_jQuery_default()(event.target.parentNode); // target is mousecatcher\n\n              var $dimensionDisplay = $picker.next();\n              var $catcher = $picker.find('.note-dimension-picker-mousecatcher');\n              var $highlighted = $picker.find('.note-dimension-picker-highlighted');\n              var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');\n              var posOffset; // HTML5 with jQuery - e.offsetX is undefined in Firefox\n\n              if (event.offsetX === undefined) {\n                var posCatcher = external_jQuery_default()(event.target).offset();\n                posOffset = {\n                  x: event.pageX - posCatcher.left,\n                  y: event.pageY - posCatcher.top\n                };\n              } else {\n                posOffset = {\n                  x: event.offsetX,\n                  y: event.offsetY\n                };\n              }\n\n              var dim = {\n                c: Math.ceil(posOffset.x / PX_PER_EM) || 1,\n                r: Math.ceil(posOffset.y / PX_PER_EM) || 1\n              };\n              $highlighted.css({\n                width: dim.c + 'em',\n                height: dim.r + 'em'\n              });\n              $catcher.data('value', dim.c + 'x' + dim.r);\n\n              if (dim.c > 3 && dim.c < this.options.insertTableMaxSize.col) {\n                $unhighlighted.css({\n                  width: dim.c + 1 + 'em'\n                });\n              }\n\n              if (dim.r > 3 && dim.r < this.options.insertTableMaxSize.row) {\n                $unhighlighted.css({\n                  height: dim.r + 1 + 'em'\n                });\n              }\n\n              $dimensionDisplay.html(dim.c + ' x ' + dim.r);\n            }\n          }]);\n          return Buttons;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/Toolbar.js\n\n        function Toolbar_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Toolbar_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Toolbar_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Toolbar_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Toolbar_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Toolbar = /*#__PURE__*/function () {\n          function Toolbar(context) {\n            Toolbar_classCallCheck(this, Toolbar);\n            this.context = context;\n            this.$window = external_jQuery_default()(window);\n            this.$document = external_jQuery_default()(document);\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$note = context.layoutInfo.note;\n            this.$editor = context.layoutInfo.editor;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.$editable = context.layoutInfo.editable;\n            this.$statusbar = context.layoutInfo.statusbar;\n            this.options = context.options;\n            this.isFollowing = false;\n            this.followScroll = this.followScroll.bind(this);\n          }\n\n          Toolbar_createClass(Toolbar, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !this.options.airMode;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              this.options.toolbar = this.options.toolbar || [];\n\n              if (!this.options.toolbar.length) {\n                this.$toolbar.hide();\n              } else {\n                this.context.invoke('buttons.build', this.$toolbar, this.options.toolbar);\n              }\n\n              if (this.options.toolbarContainer) {\n                this.$toolbar.appendTo(this.options.toolbarContainer);\n              }\n\n              this.changeContainer(false);\n              this.$note.on('summernote.keyup summernote.mouseup summernote.change', function () {\n                _this.context.invoke('buttons.updateCurrentStyle');\n              });\n              this.context.invoke('buttons.updateCurrentStyle');\n\n              if (this.options.followingToolbar) {\n                this.$window.on('scroll resize', this.followScroll);\n              }\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$toolbar.children().remove();\n\n              if (this.options.followingToolbar) {\n                this.$window.off('scroll resize', this.followScroll);\n              }\n            }\n          }, {\n            key: \"followScroll\",\n            value: function followScroll() {\n              if (this.$editor.hasClass('fullscreen')) {\n                return false;\n              }\n\n              var editorHeight = this.$editor.outerHeight();\n              var editorWidth = this.$editor.width();\n              var toolbarHeight = this.$toolbar.height();\n              var statusbarHeight = this.$statusbar.height(); // check if the web app is currently using another static bar\n\n              var otherBarHeight = 0;\n\n              if (this.options.otherStaticBar) {\n                otherBarHeight = external_jQuery_default()(this.options.otherStaticBar).outerHeight();\n              }\n\n              var currentOffset = this.$document.scrollTop();\n              var editorOffsetTop = this.$editor.offset().top;\n              var editorOffsetBottom = editorOffsetTop + editorHeight;\n              var activateOffset = editorOffsetTop - otherBarHeight;\n              var deactivateOffsetBottom = editorOffsetBottom - otherBarHeight - toolbarHeight - statusbarHeight;\n\n              if (!this.isFollowing && currentOffset > activateOffset && currentOffset < deactivateOffsetBottom - toolbarHeight) {\n                this.isFollowing = true;\n                this.$editable.css({\n                  marginTop: this.$toolbar.outerHeight()\n                });\n                this.$toolbar.css({\n                  position: 'fixed',\n                  top: otherBarHeight,\n                  width: editorWidth,\n                  zIndex: 1000\n                });\n              } else if (this.isFollowing && (currentOffset < activateOffset || currentOffset > deactivateOffsetBottom)) {\n                this.isFollowing = false;\n                this.$toolbar.css({\n                  position: 'relative',\n                  top: 0,\n                  width: '100%',\n                  zIndex: 'auto'\n                });\n                this.$editable.css({\n                  marginTop: ''\n                });\n              }\n            }\n          }, {\n            key: \"changeContainer\",\n            value: function changeContainer(isFullscreen) {\n              if (isFullscreen) {\n                this.$toolbar.prependTo(this.$editor);\n              } else {\n                if (this.options.toolbarContainer) {\n                  this.$toolbar.appendTo(this.options.toolbarContainer);\n                }\n              }\n\n              if (this.options.followingToolbar) {\n                this.followScroll();\n              }\n            }\n          }, {\n            key: \"updateFullscreen\",\n            value: function updateFullscreen(isFullscreen) {\n              this.ui.toggleBtnActive(this.$toolbar.find('.btn-fullscreen'), isFullscreen);\n              this.changeContainer(isFullscreen);\n            }\n          }, {\n            key: \"updateCodeview\",\n            value: function updateCodeview(isCodeview) {\n              this.ui.toggleBtnActive(this.$toolbar.find('.btn-codeview'), isCodeview);\n\n              if (isCodeview) {\n                this.deactivate();\n              } else {\n                this.activate();\n              }\n            }\n          }, {\n            key: \"activate\",\n            value: function activate(isIncludeCodeview) {\n              var $btn = this.$toolbar.find('button');\n\n              if (!isIncludeCodeview) {\n                $btn = $btn.not('.note-codeview-keep');\n              }\n\n              this.ui.toggleBtn($btn, true);\n            }\n          }, {\n            key: \"deactivate\",\n            value: function deactivate(isIncludeCodeview) {\n              var $btn = this.$toolbar.find('button');\n\n              if (!isIncludeCodeview) {\n                $btn = $btn.not('.note-codeview-keep');\n              }\n\n              this.ui.toggleBtn($btn, false);\n            }\n          }]);\n          return Toolbar;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/LinkDialog.js\n\n        function LinkDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function LinkDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function LinkDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) LinkDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) LinkDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var LinkDialog = /*#__PURE__*/function () {\n          function LinkDialog(context) {\n            LinkDialog_classCallCheck(this, LinkDialog);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$body = external_jQuery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            context.memo('help.linkDialog.show', this.options.langInfo.help['linkDialog.show']);\n          }\n\n          LinkDialog_createClass(LinkDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group\">', \"<label for=\\\"note-dialog-link-txt-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.link.textToDisplay, \"</label>\"), \"<input id=\\\"note-dialog-link-txt-\".concat(this.options.id, \"\\\" class=\\\"note-link-text form-control note-form-control note-input\\\" type=\\\"text\\\"/>\"), '</div>', '<div class=\"form-group note-form-group\">', \"<label for=\\\"note-dialog-link-url-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.link.url, \"</label>\"), \"<input id=\\\"note-dialog-link-url-\".concat(this.options.id, \"\\\" class=\\\"note-link-url form-control note-form-control note-input\\\" type=\\\"text\\\" value=\\\"http://\\\"/>\"), '</div>', !this.options.disableLinkTarget ? external_jQuery_default()('<div></div>').append(this.ui.checkbox({\n                className: 'sn-checkbox-open-in-new-window',\n                text: this.lang.link.openInNewWindow,\n                checked: true\n              }).render()).html() : '', external_jQuery_default()('<div></div>').append(this.ui.checkbox({\n                className: 'sn-checkbox-use-protocol',\n                text: this.lang.link.useProtocol,\n                checked: true\n              }).render()).html()].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-link-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.link.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                className: 'link-dialog',\n                title: this.lang.link.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n            /**\n             * toggle update button\n             */\n\n          }, {\n            key: \"toggleLinkBtn\",\n            value: function toggleLinkBtn($linkBtn, $linkText, $linkUrl) {\n              this.ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\n            }\n            /**\n             * Show link dialog and set event handlers on dialog controls.\n             *\n             * @param {Object} linkInfo\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showLinkDialog\",\n            value: function showLinkDialog(linkInfo) {\n              var _this = this;\n\n              return external_jQuery_default().Deferred(function (deferred) {\n                var $linkText = _this.$dialog.find('.note-link-text');\n\n                var $linkUrl = _this.$dialog.find('.note-link-url');\n\n                var $linkBtn = _this.$dialog.find('.note-link-btn');\n\n                var $openInNewWindow = _this.$dialog.find('.sn-checkbox-open-in-new-window input[type=checkbox]');\n\n                var $useProtocol = _this.$dialog.find('.sn-checkbox-use-protocol input[type=checkbox]');\n\n                _this.ui.onDialogShown(_this.$dialog, function () {\n                  _this.context.triggerEvent('dialog.shown'); // If no url was given and given text is valid URL then copy that into URL Field\n\n\n                  if (!linkInfo.url && func.isValidUrl(linkInfo.text)) {\n                    linkInfo.url = linkInfo.text;\n                  }\n\n                  $linkText.on('input paste propertychange', function () {\n                    // If linktext was modified by input events,\n                    // cloning text from linkUrl will be stopped.\n                    linkInfo.text = $linkText.val();\n\n                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n                  }).val(linkInfo.text);\n                  $linkUrl.on('input paste propertychange', function () {\n                    // Display same text on `Text to display` as default\n                    // when linktext has no text\n                    if (!linkInfo.text) {\n                      $linkText.val($linkUrl.val());\n                    }\n\n                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n                  }).val(linkInfo.url);\n\n                  if (!env.isSupportTouch) {\n                    $linkUrl.trigger('focus');\n                  }\n\n                  _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n\n                  _this.bindEnterKey($linkUrl, $linkBtn);\n\n                  _this.bindEnterKey($linkText, $linkBtn);\n\n                  var isNewWindowChecked = linkInfo.isNewWindow !== undefined ? linkInfo.isNewWindow : _this.context.options.linkTargetBlank;\n                  $openInNewWindow.prop('checked', isNewWindowChecked);\n                  var useProtocolChecked = linkInfo.url ? false : _this.context.options.useProtocol;\n                  $useProtocol.prop('checked', useProtocolChecked);\n                  $linkBtn.one('click', function (event) {\n                    event.preventDefault();\n                    deferred.resolve({\n                      range: linkInfo.range,\n                      url: $linkUrl.val(),\n                      text: $linkText.val(),\n                      isNewWindow: $openInNewWindow.is(':checked'),\n                      checkProtocol: $useProtocol.is(':checked')\n                    });\n\n                    _this.ui.hideDialog(_this.$dialog);\n                  });\n                });\n\n                _this.ui.onDialogHidden(_this.$dialog, function () {\n                  // detach events\n                  $linkText.off();\n                  $linkUrl.off();\n                  $linkBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this.ui.showDialog(_this.$dialog);\n              }).promise();\n            }\n            /**\n             * @param {Object} layoutInfo\n             */\n\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this2 = this;\n\n              var linkInfo = this.context.invoke('editor.getLinkInfo');\n              this.context.invoke('editor.saveRange');\n              this.showLinkDialog(linkInfo).then(function (linkInfo) {\n                _this2.context.invoke('editor.restoreRange');\n\n                _this2.context.invoke('editor.createLink', linkInfo);\n              }).fail(function () {\n                _this2.context.invoke('editor.restoreRange');\n              });\n            }\n          }]);\n          return LinkDialog;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/LinkPopover.js\n\n        function LinkPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function LinkPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function LinkPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) LinkPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) LinkPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var LinkPopover = /*#__PURE__*/function () {\n          function LinkPopover(context) {\n            var _this = this;\n\n            LinkPopover_classCallCheck(this, LinkPopover);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.options = context.options;\n            this.events = {\n              'summernote.keyup summernote.mouseup summernote.change summernote.scroll': function summernoteKeyupSummernoteMouseupSummernoteChangeSummernoteScroll() {\n                _this.update();\n              },\n              'summernote.disable summernote.dialog.shown': function summernoteDisableSummernoteDialogShown() {\n                _this.hide();\n              },\n              'summernote.blur': function summernoteBlur(we, e) {\n                if (e.originalEvent && e.originalEvent.relatedTarget) {\n                  if (!_this.$popover[0].contains(e.originalEvent.relatedTarget)) {\n                    _this.hide();\n                  }\n                } else {\n                  _this.hide();\n                }\n              }\n            };\n          }\n\n          LinkPopover_createClass(LinkPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.link);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-link-popover',\n                callback: function callback($node) {\n                  var $content = $node.find('.popover-content,.note-popover-content');\n                  $content.prepend('<span><a target=\"_blank\"></a>&nbsp;</span>');\n                }\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.link);\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              // Prevent focusing on editable when invoke('code') is executed\n              if (!this.context.invoke('editor.hasFocus')) {\n                this.hide();\n                return;\n              }\n\n              var rng = this.context.invoke('editor.getLastRange');\n\n              if (rng.isCollapsed() && rng.isOnAnchor()) {\n                var anchor = dom.ancestor(rng.sc, dom.isAnchor);\n                var href = external_jQuery_default()(anchor).attr('href');\n                this.$popover.find('a').attr('href', href).text(href);\n                var pos = dom.posFromPlaceholder(anchor);\n                var containerOffset = external_jQuery_default()(this.options.container).offset();\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return LinkPopover;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/ImageDialog.js\n\n        function ImageDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function ImageDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function ImageDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) ImageDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) ImageDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var ImageDialog = /*#__PURE__*/function () {\n          function ImageDialog(context) {\n            ImageDialog_classCallCheck(this, ImageDialog);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$body = external_jQuery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          ImageDialog_createClass(ImageDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var imageLimitation = '';\n\n              if (this.options.maximumImageFileSize) {\n                var unit = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024));\n                var readableSize = (this.options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + ' ' + ' KMGTP'[unit] + 'B';\n                imageLimitation = \"<small>\".concat(this.lang.image.maximumFileSize + ' : ' + readableSize, \"</small>\");\n              }\n\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group note-group-select-from-files\">', '<label for=\"note-dialog-image-file-' + this.options.id + '\" class=\"note-form-label\">' + this.lang.image.selectFromFiles + '</label>', '<input id=\"note-dialog-image-file-' + this.options.id + '\" class=\"note-image-input form-control-file note-form-control note-input\" ', ' type=\"file\" name=\"files\" accept=\"' + this.options.acceptImageFileTypes + '\" multiple=\"multiple\"/>', imageLimitation, '</div>', '<div class=\"form-group note-group-image-url\">', '<label for=\"note-dialog-image-url-' + this.options.id + '\" class=\"note-form-label\">' + this.lang.image.url + '</label>', '<input id=\"note-dialog-image-url-' + this.options.id + '\" class=\"note-image-url form-control note-form-control note-input\" type=\"text\"/>', '</div>'].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-image-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.image.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                title: this.lang.image.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this = this;\n\n              this.context.invoke('editor.saveRange');\n              this.showImageDialog().then(function (data) {\n                // [workaround] hide dialog before restore range for IE range focus\n                _this.ui.hideDialog(_this.$dialog);\n\n                _this.context.invoke('editor.restoreRange');\n\n                if (typeof data === 'string') {\n                  // image url\n                  // If onImageLinkInsert set,\n                  if (_this.options.callbacks.onImageLinkInsert) {\n                    _this.context.triggerEvent('image.link.insert', data);\n                  } else {\n                    _this.context.invoke('editor.insertImage', data);\n                  }\n                } else {\n                  // array of files\n                  _this.context.invoke('editor.insertImagesOrCallback', data);\n                }\n              }).fail(function () {\n                _this.context.invoke('editor.restoreRange');\n              });\n            }\n            /**\n             * show image dialog\n             *\n             * @param {jQuery} $dialog\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showImageDialog\",\n            value: function showImageDialog() {\n              var _this2 = this;\n\n              return external_jQuery_default().Deferred(function (deferred) {\n                var $imageInput = _this2.$dialog.find('.note-image-input');\n\n                var $imageUrl = _this2.$dialog.find('.note-image-url');\n\n                var $imageBtn = _this2.$dialog.find('.note-image-btn');\n\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown'); // Cloning imageInput to clear element.\n\n\n                  $imageInput.replaceWith($imageInput.clone().on('change', function (event) {\n                    deferred.resolve(event.target.files || event.target.value);\n                  }).val(''));\n                  $imageUrl.on('input paste propertychange', function () {\n                    _this2.ui.toggleBtn($imageBtn, $imageUrl.val());\n                  }).val('');\n\n                  if (!env.isSupportTouch) {\n                    $imageUrl.trigger('focus');\n                  }\n\n                  $imageBtn.click(function (event) {\n                    event.preventDefault();\n                    deferred.resolve($imageUrl.val());\n                  });\n\n                  _this2.bindEnterKey($imageUrl, $imageBtn);\n                });\n\n                _this2.ui.onDialogHidden(_this2.$dialog, function () {\n                  $imageInput.off();\n                  $imageUrl.off();\n                  $imageBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              });\n            }\n          }]);\n          return ImageDialog;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/ImagePopover.js\n\n        function ImagePopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function ImagePopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function ImagePopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) ImagePopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) ImagePopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * Image popover module\n         *  mouse events that show/hide popover will be handled by Handle.js.\n         *  Handle.js will receive the events and invoke 'imagePopover.update'.\n         */\n\n\n        var ImagePopover = /*#__PURE__*/function () {\n          function ImagePopover(context) {\n            var _this = this;\n\n            ImagePopover_classCallCheck(this, ImagePopover);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.editable = context.layoutInfo.editable[0];\n            this.options = context.options;\n            this.events = {\n              'summernote.disable summernote.dialog.shown': function summernoteDisableSummernoteDialogShown() {\n                _this.hide();\n              },\n              'summernote.blur': function summernoteBlur(we, e) {\n                if (e.originalEvent && e.originalEvent.relatedTarget) {\n                  if (!_this.$popover[0].contains(e.originalEvent.relatedTarget)) {\n                    _this.hide();\n                  }\n                } else {\n                  _this.hide();\n                }\n              }\n            };\n          }\n\n          ImagePopover_createClass(ImagePopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.image);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-image-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.image);\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target, event) {\n              if (dom.isImg(target)) {\n                var position = external_jQuery_default()(target).offset();\n                var containerOffset = external_jQuery_default()(this.options.container).offset();\n                var pos = {};\n\n                if (this.options.popatmouse) {\n                  pos.left = event.pageX - 20;\n                  pos.top = event.pageY;\n                } else {\n                  pos = position;\n                }\n\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return ImagePopover;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/TablePopover.js\n\n        function TablePopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function TablePopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function TablePopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) TablePopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) TablePopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var TablePopover = /*#__PURE__*/function () {\n          function TablePopover(context) {\n            var _this = this;\n\n            TablePopover_classCallCheck(this, TablePopover);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.options = context.options;\n            this.events = {\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                _this.update(e.target);\n              },\n              'summernote.keyup summernote.scroll summernote.change': function summernoteKeyupSummernoteScrollSummernoteChange() {\n                _this.update();\n              },\n              'summernote.disable summernote.dialog.shown': function summernoteDisableSummernoteDialogShown() {\n                _this.hide();\n              },\n              'summernote.blur': function summernoteBlur(we, e) {\n                if (e.originalEvent && e.originalEvent.relatedTarget) {\n                  if (!_this.$popover[0].contains(e.originalEvent.relatedTarget)) {\n                    _this.hide();\n                  }\n                } else {\n                  _this.hide();\n                }\n              }\n            };\n          }\n\n          TablePopover_createClass(TablePopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.table);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-table-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.table); // [workaround] Disable Firefox's default table editor\n\n              if (env.isFF) {\n                document.execCommand('enableInlineTableEditing', false, false);\n              }\n\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target) {\n              if (this.context.isDisabled()) {\n                return false;\n              }\n\n              var isCell = dom.isCell(target) || dom.isCell(target === null || target === void 0 ? void 0 : target.parentElement);\n\n              if (isCell) {\n                var pos = dom.posFromPlaceholder(target);\n                var containerOffset = external_jQuery_default()(this.options.container).offset();\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n\n              return isCell;\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return TablePopover;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/VideoDialog.js\n\n        function VideoDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function VideoDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function VideoDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) VideoDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) VideoDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var VideoDialog = /*#__PURE__*/function () {\n          function VideoDialog(context) {\n            VideoDialog_classCallCheck(this, VideoDialog);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$body = external_jQuery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          VideoDialog_createClass(VideoDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group row-fluid\">', \"<label for=\\\"note-dialog-video-url-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.video.url, \" <small class=\\\"text-muted\\\">\").concat(this.lang.video.providers, \"</small></label>\"), \"<input id=\\\"note-dialog-video-url-\".concat(this.options.id, \"\\\" class=\\\"note-video-url form-control note-form-control note-input\\\" type=\\\"text\\\"/>\"), '</div>'].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-video-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.video.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                title: this.lang.video.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n          }, {\n            key: \"createVideoNode\",\n            value: function createVideoNode(url) {\n              // video url patterns(youtube, instagram, vimeo, dailymotion, youku, peertube, mp4, ogg, webm)\n              var ytRegExp = /\\/\\/(?:(?:www|m)\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))([\\w|-]{11})(?:(?:[\\?&]t=)(\\S+))?$/;\n              var ytRegExpForStart = /^(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+)s)?$/;\n              var ytMatch = url.match(ytRegExp);\n              var gdRegExp = /(?:\\.|\\/\\/)drive\\.google\\.com\\/file\\/d\\/(.[a-zA-Z0-9_-]*)\\/view/;\n              var gdMatch = url.match(gdRegExp);\n              var igRegExp = /(?:www\\.|\\/\\/)instagram\\.com\\/p\\/(.[a-zA-Z0-9_-]*)/;\n              var igMatch = url.match(igRegExp);\n              var vRegExp = /\\/\\/vine\\.co\\/v\\/([a-zA-Z0-9]+)/;\n              var vMatch = url.match(vRegExp);\n              var vimRegExp = /\\/\\/(player\\.)?vimeo\\.com\\/([a-z]*\\/)*(\\d+)[?]?.*/;\n              var vimMatch = url.match(vimRegExp);\n              var dmRegExp = /.+dailymotion.com\\/(video|hub)\\/([^_]+)[^#]*(#video=([^_&]+))?/;\n              var dmMatch = url.match(dmRegExp);\n              var youkuRegExp = /\\/\\/v\\.youku\\.com\\/v_show\\/id_(\\w+)=*\\.html/;\n              var youkuMatch = url.match(youkuRegExp);\n              var peerTubeRegExp = /\\/\\/(.*)\\/videos\\/watch\\/([^?]*)(?:\\?(?:start=(\\w*))?(?:&stop=(\\w*))?(?:&loop=([10]))?(?:&autoplay=([10]))?(?:&muted=([10]))?)?/;\n              var peerTubeMatch = url.match(peerTubeRegExp);\n              var qqRegExp = /\\/\\/v\\.qq\\.com.*?vid=(.+)/;\n              var qqMatch = url.match(qqRegExp);\n              var qqRegExp2 = /\\/\\/v\\.qq\\.com\\/x?\\/?(page|cover).*?\\/([^\\/]+)\\.html\\??.*/;\n              var qqMatch2 = url.match(qqRegExp2);\n              var mp4RegExp = /^.+.(mp4|m4v)$/;\n              var mp4Match = url.match(mp4RegExp);\n              var oggRegExp = /^.+.(ogg|ogv)$/;\n              var oggMatch = url.match(oggRegExp);\n              var webmRegExp = /^.+.(webm)$/;\n              var webmMatch = url.match(webmRegExp);\n              var fbRegExp = /(?:www\\.|\\/\\/)facebook\\.com\\/([^\\/]+)\\/videos\\/([0-9]+)/;\n              var fbMatch = url.match(fbRegExp);\n              var $video;\n\n              if (ytMatch && ytMatch[1].length === 11) {\n                var youtubeId = ytMatch[1];\n                var start = 0;\n\n                if (typeof ytMatch[2] !== 'undefined') {\n                  var ytMatchForStart = ytMatch[2].match(ytRegExpForStart);\n\n                  if (ytMatchForStart) {\n                    for (var n = [3600, 60, 1], i = 0, r = n.length; i < r; i++) {\n                      start += typeof ytMatchForStart[i + 1] !== 'undefined' ? n[i] * parseInt(ytMatchForStart[i + 1], 10) : 0;\n                    }\n                  }\n                }\n\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', '//www.youtube.com/embed/' + youtubeId + (start > 0 ? '?start=' + start : '')).attr('width', '640').attr('height', '360');\n              } else if (gdMatch && gdMatch[0].length) {\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', 'https://drive.google.com/file/d/' + gdMatch[1] + '/preview').attr('width', '640').attr('height', '480');\n              } else if (igMatch && igMatch[0].length) {\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', 'https://instagram.com/p/' + igMatch[1] + '/embed/').attr('width', '612').attr('height', '710').attr('scrolling', 'no').attr('allowtransparency', 'true');\n              } else if (vMatch && vMatch[0].length) {\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', vMatch[0] + '/embed/simple').attr('width', '600').attr('height', '600').attr('class', 'vine-embed');\n              } else if (vimMatch && vimMatch[3].length) {\n                $video = external_jQuery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('src', '//player.vimeo.com/video/' + vimMatch[3]).attr('width', '640').attr('height', '360');\n              } else if (dmMatch && dmMatch[2].length) {\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', '//www.dailymotion.com/embed/video/' + dmMatch[2]).attr('width', '640').attr('height', '360');\n              } else if (youkuMatch && youkuMatch[1].length) {\n                $video = external_jQuery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('height', '498').attr('width', '510').attr('src', '//player.youku.com/embed/' + youkuMatch[1]);\n              } else if (peerTubeMatch && peerTubeMatch[0].length) {\n                var begin = 0;\n                if (peerTubeMatch[2] !== 'undefined') begin = peerTubeMatch[2];\n                var end = 0;\n                if (peerTubeMatch[3] !== 'undefined') end = peerTubeMatch[3];\n                var loop = 0;\n                if (peerTubeMatch[4] !== 'undefined') loop = peerTubeMatch[4];\n                var autoplay = 0;\n                if (peerTubeMatch[5] !== 'undefined') autoplay = peerTubeMatch[5];\n                var muted = 0;\n                if (peerTubeMatch[6] !== 'undefined') muted = peerTubeMatch[6];\n                $video = external_jQuery_default()('<iframe allowfullscreen sandbox=\"allow-same-origin allow-scripts allow-popups\">').attr('frameborder', 0).attr('src', '//' + peerTubeMatch[1] + '/videos/embed/' + peerTubeMatch[2] + \"?loop=\" + loop + \"&autoplay=\" + autoplay + \"&muted=\" + muted + (begin > 0 ? '&start=' + begin : '') + (end > 0 ? '&end=' + start : '')).attr('width', '560').attr('height', '315');\n              } else if (qqMatch && qqMatch[1].length || qqMatch2 && qqMatch2[2].length) {\n                var vid = qqMatch && qqMatch[1].length ? qqMatch[1] : qqMatch2[2];\n                $video = external_jQuery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('height', '310').attr('width', '500').attr('src', 'https://v.qq.com/txp/iframe/player.html?vid=' + vid + '&amp;auto=0');\n              } else if (mp4Match || oggMatch || webmMatch) {\n                $video = external_jQuery_default()('<video controls>').attr('src', url).attr('width', '640').attr('height', '360');\n              } else if (fbMatch && fbMatch[0].length) {\n                $video = external_jQuery_default()('<iframe>').attr('frameborder', 0).attr('src', 'https://www.facebook.com/plugins/video.php?href=' + encodeURIComponent(fbMatch[0]) + '&show_text=0&width=560').attr('width', '560').attr('height', '301').attr('scrolling', 'no').attr('allowtransparency', 'true');\n              } else {\n                // this is not a known video link. Now what, Cat? Now what?\n                return false;\n              }\n\n              $video.addClass('note-video-clip');\n              return $video[0];\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this = this;\n\n              var text = this.context.invoke('editor.getSelectedText');\n              this.context.invoke('editor.saveRange');\n              this.showVideoDialog(text).then(function (url) {\n                // [workaround] hide dialog before restore range for IE range focus\n                _this.ui.hideDialog(_this.$dialog);\n\n                _this.context.invoke('editor.restoreRange'); // build node\n\n\n                var $node = _this.createVideoNode(url);\n\n                if ($node) {\n                  // insert video node\n                  _this.context.invoke('editor.insertNode', $node);\n                }\n              }).fail(function () {\n                _this.context.invoke('editor.restoreRange');\n              });\n            }\n            /**\n             * show video dialog\n             *\n             * @param {jQuery} $dialog\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showVideoDialog\",\n            value: function showVideoDialog() {\n              var _this2 = this;\n\n              return external_jQuery_default().Deferred(function (deferred) {\n                var $videoUrl = _this2.$dialog.find('.note-video-url');\n\n                var $videoBtn = _this2.$dialog.find('.note-video-btn');\n\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown');\n\n                  $videoUrl.on('input paste propertychange', function () {\n                    _this2.ui.toggleBtn($videoBtn, $videoUrl.val());\n                  });\n\n                  if (!env.isSupportTouch) {\n                    $videoUrl.trigger('focus');\n                  }\n\n                  $videoBtn.click(function (event) {\n                    event.preventDefault();\n                    deferred.resolve($videoUrl.val());\n                  });\n\n                  _this2.bindEnterKey($videoUrl, $videoBtn);\n                });\n\n                _this2.ui.onDialogHidden(_this2.$dialog, function () {\n                  $videoUrl.off();\n                  $videoBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              });\n            }\n          }]);\n          return VideoDialog;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/HelpDialog.js\n\n        function HelpDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function HelpDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function HelpDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) HelpDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) HelpDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var HelpDialog = /*#__PURE__*/function () {\n          function HelpDialog(context) {\n            HelpDialog_classCallCheck(this, HelpDialog);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$body = external_jQuery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          HelpDialog_createClass(HelpDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<p class=\"text-center\">', '<a href=\"http://summernote.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Summernote 0.8.20</a> · ', '<a href=\"https://github.com/summernote/summernote\" target=\"_blank\" rel=\"noopener noreferrer\">Project</a> · ', '<a href=\"https://github.com/summernote/summernote/issues\" target=\"_blank\" rel=\"noopener noreferrer\">Issues</a>', '</p>'].join('');\n              this.$dialog = this.ui.dialog({\n                title: this.lang.options.help,\n                fade: this.options.dialogsFade,\n                body: this.createShortcutList(),\n                footer: body,\n                callback: function callback($node) {\n                  $node.find('.modal-body,.note-modal-body').css({\n                    'max-height': 300,\n                    'overflow': 'scroll'\n                  });\n                }\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"createShortcutList\",\n            value: function createShortcutList() {\n              var _this = this;\n\n              var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];\n              return Object.keys(keyMap).map(function (key) {\n                var command = keyMap[key];\n                var $row = external_jQuery_default()('<div><div class=\"help-list-item\"></div></div>');\n                $row.append(external_jQuery_default()('<label><kbd>' + key + '</kdb></label>').css({\n                  'width': 180,\n                  'margin-right': 10\n                })).append(external_jQuery_default()('<span></span>').html(_this.context.memo('help.' + command) || command));\n                return $row.html();\n              }).join('');\n            }\n            /**\n             * show help dialog\n             *\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showHelpDialog\",\n            value: function showHelpDialog() {\n              var _this2 = this;\n\n              return external_jQuery_default().Deferred(function (deferred) {\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown');\n\n                  deferred.resolve();\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              }).promise();\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this3 = this;\n\n              this.context.invoke('editor.saveRange');\n              this.showHelpDialog().then(function () {\n                _this3.context.invoke('editor.restoreRange');\n              });\n            }\n          }]);\n          return HelpDialog;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/AirPopover.js\n\n        function AirPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AirPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AirPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AirPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AirPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var AIRMODE_POPOVER_X_OFFSET = -5;\n        var AIRMODE_POPOVER_Y_OFFSET = 5;\n\n        var AirPopover = /*#__PURE__*/function () {\n          function AirPopover(context) {\n            var _this = this;\n\n            AirPopover_classCallCheck(this, AirPopover);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.options = context.options;\n            this.hidable = true;\n            this.onContextmenu = false;\n            this.pageX = null;\n            this.pageY = null;\n            this.events = {\n              'summernote.contextmenu': function summernoteContextmenu(e) {\n                if (_this.options.editing) {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  _this.onContextmenu = true;\n\n                  _this.update(true);\n                }\n              },\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                _this.pageX = e.pageX;\n                _this.pageY = e.pageY;\n              },\n              'summernote.keyup summernote.mouseup summernote.scroll': function summernoteKeyupSummernoteMouseupSummernoteScroll(we, e) {\n                if (_this.options.editing && !_this.onContextmenu) {\n                  _this.pageX = e.pageX;\n                  _this.pageY = e.pageY;\n\n                  _this.update();\n                }\n\n                _this.onContextmenu = false;\n              },\n              'summernote.disable summernote.change summernote.dialog.shown summernote.blur': function summernoteDisableSummernoteChangeSummernoteDialogShownSummernoteBlur() {\n                _this.hide();\n              },\n              'summernote.focusout': function summernoteFocusout() {\n                if (!_this.$popover.is(':active,:focus')) {\n                  _this.hide();\n                }\n              }\n            };\n          }\n\n          AirPopover_createClass(AirPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return this.options.airMode && !lists.isEmpty(this.options.popover.air);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$popover = this.ui.popover({\n                className: 'note-air-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.air); // disable hiding this popover preemptively by 'summernote.blur' event.\n\n              this.$popover.on('mousedown', function () {\n                _this2.hidable = false;\n              }); // (re-)enable hiding after 'summernote.blur' has been handled (aka. ignored).\n\n              this.$popover.on('mouseup', function () {\n                _this2.hidable = true;\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(forcelyOpen) {\n              var styleInfo = this.context.invoke('editor.currentStyle');\n\n              if (styleInfo.range && (!styleInfo.range.isCollapsed() || forcelyOpen)) {\n                var rect = {\n                  left: this.pageX,\n                  top: this.pageY\n                };\n                var containerOffset = external_jQuery_default()(this.options.container).offset();\n                rect.top -= containerOffset.top;\n                rect.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: Math.max(rect.left, 0) + AIRMODE_POPOVER_X_OFFSET,\n                  top: rect.top + AIRMODE_POPOVER_Y_OFFSET\n                });\n                this.context.invoke('buttons.updateCurrentStyle', this.$popover);\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"updateCodeview\",\n            value: function updateCodeview(isCodeview) {\n              this.ui.toggleBtnActive(this.$popover.find('.btn-codeview'), isCodeview);\n\n              if (isCodeview) {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              if (this.hidable) {\n                this.$popover.hide();\n              }\n            }\n          }]);\n          return AirPopover;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/module/HintPopover.js\n\n        function HintPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function HintPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function HintPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) HintPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) HintPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var POPOVER_DIST = 5;\n\n        var HintPopover = /*#__PURE__*/function () {\n          function HintPopover(context) {\n            var _this = this;\n\n            HintPopover_classCallCheck(this, HintPopover);\n            this.context = context;\n            this.ui = external_jQuery_default().summernote.ui;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.hint = this.options.hint || [];\n            this.direction = this.options.hintDirection || 'bottom';\n            this.hints = Array.isArray(this.hint) ? this.hint : [this.hint];\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              },\n              'summernote.disable summernote.dialog.shown summernote.blur': function summernoteDisableSummernoteDialogShownSummernoteBlur() {\n                _this.hide();\n              }\n            };\n          }\n\n          HintPopover_createClass(HintPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return this.hints.length > 0;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.lastWordRange = null;\n              this.matchingWord = null;\n              this.$popover = this.ui.popover({\n                className: 'note-hint-popover',\n                hideArrow: true,\n                direction: ''\n              }).render().appendTo(this.options.container);\n              this.$popover.hide();\n              this.$content = this.$popover.find('.popover-content,.note-popover-content');\n              this.$content.on('click', '.note-hint-item', function (e) {\n                _this2.$content.find('.active').removeClass('active');\n\n                external_jQuery_default()(e.currentTarget).addClass('active');\n\n                _this2.replace();\n              });\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"selectItem\",\n            value: function selectItem($item) {\n              this.$content.find('.active').removeClass('active');\n              $item.addClass('active');\n              this.$content[0].scrollTop = $item[0].offsetTop - this.$content.innerHeight() / 2;\n            }\n          }, {\n            key: \"moveDown\",\n            value: function moveDown() {\n              var $current = this.$content.find('.note-hint-item.active');\n              var $next = $current.next();\n\n              if ($next.length) {\n                this.selectItem($next);\n              } else {\n                var $nextGroup = $current.parent().next();\n\n                if (!$nextGroup.length) {\n                  $nextGroup = this.$content.find('.note-hint-group').first();\n                }\n\n                this.selectItem($nextGroup.find('.note-hint-item').first());\n              }\n            }\n          }, {\n            key: \"moveUp\",\n            value: function moveUp() {\n              var $current = this.$content.find('.note-hint-item.active');\n              var $prev = $current.prev();\n\n              if ($prev.length) {\n                this.selectItem($prev);\n              } else {\n                var $prevGroup = $current.parent().prev();\n\n                if (!$prevGroup.length) {\n                  $prevGroup = this.$content.find('.note-hint-group').last();\n                }\n\n                this.selectItem($prevGroup.find('.note-hint-item').last());\n              }\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              var $item = this.$content.find('.note-hint-item.active');\n\n              if ($item.length) {\n                var node = this.nodeFromItem($item); // If matchingWord length = 0 -> capture OK / open hint / but as mention capture \"\" (\\w*)\n\n                if (this.matchingWord !== null && this.matchingWord.length === 0) {\n                  this.lastWordRange.so = this.lastWordRange.eo; // Else si > 0 and normal case -> adjust range \"before\" for correct position of insertion\n                } else if (this.matchingWord !== null && this.matchingWord.length > 0 && !this.lastWordRange.isCollapsed()) {\n                  var rangeCompute = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length;\n\n                  if (rangeCompute > 0) {\n                    this.lastWordRange.so += rangeCompute;\n                  }\n                }\n\n                this.lastWordRange.insertNode(node);\n\n                if (this.options.hintSelect === 'next') {\n                  var blank = document.createTextNode('');\n                  external_jQuery_default()(node).after(blank);\n                  range.createFromNodeBefore(blank).select();\n                } else {\n                  range.createFromNodeAfter(node).select();\n                }\n\n                this.lastWordRange = null;\n                this.hide();\n                this.context.invoke('editor.focus');\n                this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n              }\n            }\n          }, {\n            key: \"nodeFromItem\",\n            value: function nodeFromItem($item) {\n              var hint = this.hints[$item.data('index')];\n              var item = $item.data('item');\n              var node = hint.content ? hint.content(item) : item;\n\n              if (typeof node === 'string') {\n                node = dom.createText(node);\n              }\n\n              return node;\n            }\n          }, {\n            key: \"createItemTemplates\",\n            value: function createItemTemplates(hintIdx, items) {\n              var hint = this.hints[hintIdx];\n              return items.map(function (item\n              /*, idx */\n              ) {\n                var $item = external_jQuery_default()('<div class=\"note-hint-item\"></div>');\n                $item.append(hint.template ? hint.template(item) : item + '');\n                $item.data({\n                  'index': hintIdx,\n                  'item': item\n                });\n                return $item;\n              });\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              if (!this.$popover.is(':visible')) {\n                return;\n              }\n\n              if (e.keyCode === key.code.ENTER) {\n                e.preventDefault();\n                this.replace();\n              } else if (e.keyCode === key.code.UP) {\n                e.preventDefault();\n                this.moveUp();\n              } else if (e.keyCode === key.code.DOWN) {\n                e.preventDefault();\n                this.moveDown();\n              }\n            }\n          }, {\n            key: \"searchKeyword\",\n            value: function searchKeyword(index, keyword, callback) {\n              var hint = this.hints[index];\n\n              if (hint && hint.match.test(keyword) && hint.search) {\n                var matches = hint.match.exec(keyword);\n                this.matchingWord = matches[0];\n                hint.search(matches[1], callback);\n              } else {\n                callback();\n              }\n            }\n          }, {\n            key: \"createGroup\",\n            value: function createGroup(idx, keyword) {\n              var _this3 = this;\n\n              var $group = external_jQuery_default()('<div class=\"note-hint-group note-hint-group-' + idx + '\"></div>');\n              this.searchKeyword(idx, keyword, function (items) {\n                items = items || [];\n\n                if (items.length) {\n                  $group.html(_this3.createItemTemplates(idx, items));\n\n                  _this3.show();\n                }\n              });\n              return $group;\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              var _this4 = this;\n\n              if (!lists.contains([key.code.ENTER, key.code.UP, key.code.DOWN], e.keyCode)) {\n                var _range = this.context.invoke('editor.getLastRange');\n\n                var wordRange, keyword;\n\n                if (this.options.hintMode === 'words') {\n                  wordRange = _range.getWordsRange(_range);\n                  keyword = wordRange.toString();\n                  this.hints.forEach(function (hint) {\n                    if (hint.match.test(keyword)) {\n                      wordRange = _range.getWordsMatchRange(hint.match);\n                      return false;\n                    }\n                  });\n\n                  if (!wordRange) {\n                    this.hide();\n                    return;\n                  }\n\n                  keyword = wordRange.toString();\n                } else {\n                  wordRange = _range.getWordRange();\n                  keyword = wordRange.toString();\n                }\n\n                if (this.hints.length && keyword) {\n                  this.$content.empty();\n                  var bnd = func.rect2bnd(lists.last(wordRange.getClientRects()));\n                  var containerOffset = external_jQuery_default()(this.options.container).offset();\n\n                  if (bnd) {\n                    bnd.top -= containerOffset.top;\n                    bnd.left -= containerOffset.left;\n                    this.$popover.hide();\n                    this.lastWordRange = wordRange;\n                    this.hints.forEach(function (hint, idx) {\n                      if (hint.match.test(keyword)) {\n                        _this4.createGroup(idx, keyword).appendTo(_this4.$content);\n                      }\n                    }); // select first .note-hint-item\n\n                    this.$content.find('.note-hint-item:first').addClass('active'); // set position for popover after group is created\n\n                    if (this.direction === 'top') {\n                      this.$popover.css({\n                        left: bnd.left,\n                        top: bnd.top - this.$popover.outerHeight() - POPOVER_DIST\n                      });\n                    } else {\n                      this.$popover.css({\n                        left: bnd.left,\n                        top: bnd.top + bnd.height + POPOVER_DIST\n                      });\n                    }\n                  }\n                } else {\n                  this.hide();\n                }\n              }\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              this.$popover.show();\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return HintPopover;\n        }();\n\n        ; // CONCATENATED MODULE: ./src/js/settings.js\n\n        external_jQuery_default().summernote = external_jQuery_default().extend(external_jQuery_default().summernote, {\n          version: '0.8.20',\n          plugins: {},\n          dom: dom,\n          range: range,\n          lists: lists,\n          options: {\n            langInfo: external_jQuery_default().summernote.lang[\"en-US\"],\n            editing: true,\n            modules: {\n              'editor': Editor,\n              'clipboard': Clipboard,\n              'dropzone': Dropzone,\n              'codeview': CodeView,\n              'statusbar': Statusbar,\n              'fullscreen': Fullscreen,\n              'handle': Handle,\n              // FIXME: HintPopover must be front of autolink\n              //  - Script error about range when Enter key is pressed on hint popover\n              'hintPopover': HintPopover,\n              'autoLink': AutoLink,\n              'autoSync': AutoSync,\n              'autoReplace': AutoReplace,\n              'placeholder': Placeholder,\n              'buttons': Buttons,\n              'toolbar': Toolbar,\n              'linkDialog': LinkDialog,\n              'linkPopover': LinkPopover,\n              'imageDialog': ImageDialog,\n              'imagePopover': ImagePopover,\n              'tablePopover': TablePopover,\n              'videoDialog': VideoDialog,\n              'helpDialog': HelpDialog,\n              'airPopover': AirPopover\n            },\n            buttons: {},\n            lang: 'en-US',\n            followingToolbar: false,\n            toolbarPosition: 'top',\n            otherStaticBar: '',\n            // toolbar\n            codeviewKeepButton: false,\n            toolbar: [['style', ['style']], ['font', ['bold', 'underline', 'clear']], ['fontname', ['fontname']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture', 'video']], ['view', ['fullscreen', 'codeview', 'help']]],\n            // popover\n            popatmouse: true,\n            popover: {\n              image: [['resize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']]],\n              link: [['link', ['linkDialogShow', 'unlink']]],\n              table: [['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']], ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]],\n              air: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']], ['view', ['fullscreen', 'codeview']]]\n            },\n            // air mode: inline editor\n            airMode: false,\n            overrideContextMenu: false,\n            // TBD\n            width: null,\n            height: null,\n            linkTargetBlank: true,\n            useProtocol: true,\n            defaultProtocol: 'http://',\n            focus: false,\n            tabDisabled: false,\n            tabSize: 4,\n            styleWithCSS: false,\n            shortcuts: true,\n            textareaAutoSync: true,\n            tooltip: 'auto',\n            container: null,\n            maxTextLength: 0,\n            blockquoteBreakingLevel: 2,\n            spellCheck: true,\n            disableGrammar: false,\n            placeholder: null,\n            inheritPlaceholder: false,\n            // TODO: need to be documented\n            recordEveryKeystroke: false,\n            historyLimit: 200,\n            // TODO: need to be documented\n            showDomainOnlyForAutolink: false,\n            // TODO: need to be documented\n            hintMode: 'word',\n            hintSelect: 'after',\n            hintDirection: 'bottom',\n            styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n            fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],\n            fontNamesIgnoreCheck: [],\n            addDefaultFonts: true,\n            fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n            fontSizeUnits: ['px', 'pt'],\n            // pallete colors(n x n)\n            colors: [['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'], ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'], ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'], ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'], ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'], ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'], ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'], ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']],\n            // http://chir.ag/projects/name-that-color/\n            colorsName: [['Black', 'Tundora', 'Dove Gray', 'Star Dust', 'Pale Slate', 'Gallery', 'Alabaster', 'White'], ['Red', 'Orange Peel', 'Yellow', 'Green', 'Cyan', 'Blue', 'Electric Violet', 'Magenta'], ['Azalea', 'Karry', 'Egg White', 'Zanah', 'Botticelli', 'Tropical Blue', 'Mischka', 'Twilight'], ['Tonys Pink', 'Peach Orange', 'Cream Brulee', 'Sprout', 'Casper', 'Perano', 'Cold Purple', 'Careys Pink'], ['Mandy', 'Rajah', 'Dandelion', 'Olivine', 'Gulf Stream', 'Viking', 'Blue Marguerite', 'Puce'], ['Guardsman Red', 'Fire Bush', 'Golden Dream', 'Chelsea Cucumber', 'Smalt Blue', 'Boston Blue', 'Butterfly Bush', 'Cadillac'], ['Sangria', 'Mai Tai', 'Buddha Gold', 'Forest Green', 'Eden', 'Venice Blue', 'Meteorite', 'Claret'], ['Rosewood', 'Cinnamon', 'Olive', 'Parsley', 'Tiber', 'Midnight Blue', 'Valentino', 'Loulou']],\n            colorButton: {\n              foreColor: '#000000',\n              backColor: '#FFFF00'\n            },\n            lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\n            tableClassName: 'table table-bordered',\n            insertTableMaxSize: {\n              col: 10,\n              row: 10\n            },\n            // By default, dialogs are attached in container.\n            dialogsInBody: false,\n            dialogsFade: false,\n            maximumImageFileSize: null,\n            acceptImageFileTypes: \"image/*\",\n            callbacks: {\n              onBeforeCommand: null,\n              onBlur: null,\n              onBlurCodeview: null,\n              onChange: null,\n              onChangeCodeview: null,\n              onDialogShown: null,\n              onEnter: null,\n              onFocus: null,\n              onImageLinkInsert: null,\n              onImageUpload: null,\n              onImageUploadError: null,\n              onInit: null,\n              onKeydown: null,\n              onKeyup: null,\n              onMousedown: null,\n              onMouseup: null,\n              onPaste: null,\n              onScroll: null\n            },\n            codemirror: {\n              mode: 'text/html',\n              htmlMode: true,\n              lineNumbers: true\n            },\n            codeviewFilter: true,\n            codeviewFilterRegex: /<\\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,\n            codeviewIframeFilter: true,\n            codeviewIframeWhitelistSrc: [],\n            codeviewIframeWhitelistSrcBase: ['www.youtube.com', 'www.youtube-nocookie.com', 'www.facebook.com', 'vine.co', 'instagram.com', 'player.vimeo.com', 'www.dailymotion.com', 'player.youku.com', 'jumpingbean.tv', 'v.qq.com'],\n            keyMap: {\n              pc: {\n                'ESC': 'escape',\n                'ENTER': 'insertParagraph',\n                'CTRL+Z': 'undo',\n                'CTRL+Y': 'redo',\n                'TAB': 'tab',\n                'SHIFT+TAB': 'untab',\n                'CTRL+B': 'bold',\n                'CTRL+I': 'italic',\n                'CTRL+U': 'underline',\n                'CTRL+SHIFT+S': 'strikethrough',\n                'CTRL+BACKSLASH': 'removeFormat',\n                'CTRL+SHIFT+L': 'justifyLeft',\n                'CTRL+SHIFT+E': 'justifyCenter',\n                'CTRL+SHIFT+R': 'justifyRight',\n                'CTRL+SHIFT+J': 'justifyFull',\n                'CTRL+SHIFT+NUM7': 'insertUnorderedList',\n                'CTRL+SHIFT+NUM8': 'insertOrderedList',\n                'CTRL+LEFTBRACKET': 'outdent',\n                'CTRL+RIGHTBRACKET': 'indent',\n                'CTRL+NUM0': 'formatPara',\n                'CTRL+NUM1': 'formatH1',\n                'CTRL+NUM2': 'formatH2',\n                'CTRL+NUM3': 'formatH3',\n                'CTRL+NUM4': 'formatH4',\n                'CTRL+NUM5': 'formatH5',\n                'CTRL+NUM6': 'formatH6',\n                'CTRL+ENTER': 'insertHorizontalRule',\n                'CTRL+K': 'linkDialog.show'\n              },\n              mac: {\n                'ESC': 'escape',\n                'ENTER': 'insertParagraph',\n                'CMD+Z': 'undo',\n                'CMD+SHIFT+Z': 'redo',\n                'TAB': 'tab',\n                'SHIFT+TAB': 'untab',\n                'CMD+B': 'bold',\n                'CMD+I': 'italic',\n                'CMD+U': 'underline',\n                'CMD+SHIFT+S': 'strikethrough',\n                'CMD+BACKSLASH': 'removeFormat',\n                'CMD+SHIFT+L': 'justifyLeft',\n                'CMD+SHIFT+E': 'justifyCenter',\n                'CMD+SHIFT+R': 'justifyRight',\n                'CMD+SHIFT+J': 'justifyFull',\n                'CMD+SHIFT+NUM7': 'insertUnorderedList',\n                'CMD+SHIFT+NUM8': 'insertOrderedList',\n                'CMD+LEFTBRACKET': 'outdent',\n                'CMD+RIGHTBRACKET': 'indent',\n                'CMD+NUM0': 'formatPara',\n                'CMD+NUM1': 'formatH1',\n                'CMD+NUM2': 'formatH2',\n                'CMD+NUM3': 'formatH3',\n                'CMD+NUM4': 'formatH4',\n                'CMD+NUM5': 'formatH5',\n                'CMD+NUM6': 'formatH6',\n                'CMD+ENTER': 'insertHorizontalRule',\n                'CMD+K': 'linkDialog.show'\n              }\n            },\n            icons: {\n              'align': 'note-icon-align',\n              'alignCenter': 'note-icon-align-center',\n              'alignJustify': 'note-icon-align-justify',\n              'alignLeft': 'note-icon-align-left',\n              'alignRight': 'note-icon-align-right',\n              'rowBelow': 'note-icon-row-below',\n              'colBefore': 'note-icon-col-before',\n              'colAfter': 'note-icon-col-after',\n              'rowAbove': 'note-icon-row-above',\n              'rowRemove': 'note-icon-row-remove',\n              'colRemove': 'note-icon-col-remove',\n              'indent': 'note-icon-align-indent',\n              'outdent': 'note-icon-align-outdent',\n              'arrowsAlt': 'note-icon-arrows-alt',\n              'bold': 'note-icon-bold',\n              'caret': 'note-icon-caret',\n              'circle': 'note-icon-circle',\n              'close': 'note-icon-close',\n              'code': 'note-icon-code',\n              'eraser': 'note-icon-eraser',\n              'floatLeft': 'note-icon-float-left',\n              'floatRight': 'note-icon-float-right',\n              'font': 'note-icon-font',\n              'frame': 'note-icon-frame',\n              'italic': 'note-icon-italic',\n              'link': 'note-icon-link',\n              'unlink': 'note-icon-chain-broken',\n              'magic': 'note-icon-magic',\n              'menuCheck': 'note-icon-menu-check',\n              'minus': 'note-icon-minus',\n              'orderedlist': 'note-icon-orderedlist',\n              'pencil': 'note-icon-pencil',\n              'picture': 'note-icon-picture',\n              'question': 'note-icon-question',\n              'redo': 'note-icon-redo',\n              'rollback': 'note-icon-rollback',\n              'square': 'note-icon-square',\n              'strikethrough': 'note-icon-strikethrough',\n              'subscript': 'note-icon-subscript',\n              'superscript': 'note-icon-superscript',\n              'table': 'note-icon-table',\n              'textHeight': 'note-icon-text-height',\n              'trash': 'note-icon-trash',\n              'underline': 'note-icon-underline',\n              'undo': 'note-icon-undo',\n              'unorderedlist': 'note-icon-unorderedlist',\n              'video': 'note-icon-video'\n            }\n          }\n        });\n        ; // CONCATENATED MODULE: ./src/js/renderer.js\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function renderer_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function renderer_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function renderer_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) renderer_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) renderer_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Renderer = /*#__PURE__*/function () {\n          function Renderer(markup, children, options, callback) {\n            renderer_classCallCheck(this, Renderer);\n            this.markup = markup;\n            this.children = children;\n            this.options = options;\n            this.callback = callback;\n          }\n\n          renderer_createClass(Renderer, [{\n            key: \"render\",\n            value: function render($parent) {\n              var $node = external_jQuery_default()(this.markup);\n\n              if (this.options && this.options.contents) {\n                $node.html(this.options.contents);\n              }\n\n              if (this.options && this.options.className) {\n                $node.addClass(this.options.className);\n              }\n\n              if (this.options && this.options.data) {\n                external_jQuery_default().each(this.options.data, function (k, v) {\n                  $node.attr('data-' + k, v);\n                });\n              }\n\n              if (this.options && this.options.click) {\n                $node.on('click', this.options.click);\n              }\n\n              if (this.children) {\n                var $container = $node.find('.note-children-container');\n                this.children.forEach(function (child) {\n                  child.render($container.length ? $container : $node);\n                });\n              }\n\n              if (this.callback) {\n                this.callback($node, this.options);\n              }\n\n              if (this.options && this.options.callback) {\n                this.options.callback($node);\n              }\n\n              if ($parent) {\n                $parent.append($node);\n              }\n\n              return $node;\n            }\n          }]);\n          return Renderer;\n        }();\n        /* harmony default export */\n\n\n        const renderer = {\n          create: function create(markup, callback) {\n            return function () {\n              var options = _typeof(arguments[1]) === 'object' ? arguments[1] : arguments[0];\n              var children = Array.isArray(arguments[0]) ? arguments[0] : [];\n\n              if (options && options.children) {\n                children = options.children;\n              }\n\n              return new Renderer(markup, children, options, callback);\n            };\n          }\n        };\n        ; // CONCATENATED MODULE: ./src/styles/bs3/summernote-bs3.js\n\n        function summernote_bs3_typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            summernote_bs3_typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            summernote_bs3_typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return summernote_bs3_typeof(obj);\n        }\n\n        var editor = renderer.create('<div class=\"note-editor note-frame panel panel-default\"></div>');\n        var toolbar = renderer.create('<div class=\"panel-heading note-toolbar\" role=\"toolbar\"></div>');\n        var editingArea = renderer.create('<div class=\"note-editing-area\"></div>');\n        var codable = renderer.create('<textarea class=\"note-codable\" aria-multiline=\"true\"></textarea>');\n        var editable = renderer.create('<div class=\"note-editable\" contentEditable=\"true\" role=\"textbox\" aria-multiline=\"true\"></div>');\n        var statusbar = renderer.create(['<output class=\"note-status-output\" role=\"status\" aria-live=\"polite\"></output>', '<div class=\"note-statusbar\" role=\"status\">', '<div class=\"note-resizebar\" aria-label=\"Resize\">', '<div class=\"note-icon-bar\"></div>', '<div class=\"note-icon-bar\"></div>', '<div class=\"note-icon-bar\"></div>', '</div>', '</div>'].join(''));\n        var airEditor = renderer.create('<div class=\"note-editor note-airframe\"></div>');\n        var airEditable = renderer.create(['<div class=\"note-editable\" contentEditable=\"true\" role=\"textbox\" aria-multiline=\"true\"></div>', '<output class=\"note-status-output\" role=\"status\" aria-live=\"polite\"></output>'].join(''));\n        var buttonGroup = renderer.create('<div class=\"note-btn-group btn-group\"></div>');\n        var dropdown = renderer.create('<ul class=\"note-dropdown-menu dropdown-menu\"></ul>', function ($node, options) {\n          var markup = Array.isArray(options.items) ? options.items.map(function (item) {\n            var value = typeof item === 'string' ? item : item.value || '';\n            var content = options.template ? options.template(item) : item;\n            var option = summernote_bs3_typeof(item) === 'object' ? item.option : undefined;\n            var dataValue = 'data-value=\"' + value + '\"';\n            var dataOption = option !== undefined ? ' data-option=\"' + option + '\"' : '';\n            return '<li aria-label=\"' + value + '\"><a href=\"#\" ' + (dataValue + dataOption) + '>' + content + '</a></li>';\n          }).join('') : options.items;\n          $node.html(markup).attr({\n            'aria-label': options.title\n          });\n\n          if (options && options.codeviewKeepButton) {\n            $node.addClass('note-codeview-keep');\n          }\n        });\n\n        var dropdownButtonContents = function dropdownButtonContents(contents, options) {\n          return contents + ' ' + icon(options.icons.caret, 'span');\n        };\n\n        var dropdownCheck = renderer.create('<ul class=\"note-dropdown-menu dropdown-menu note-check\"></ul>', function ($node, options) {\n          var markup = Array.isArray(options.items) ? options.items.map(function (item) {\n            var value = typeof item === 'string' ? item : item.value || '';\n            var content = options.template ? options.template(item) : item;\n            return '<li aria-label=\"' + item + '\"><a href=\"#\" data-value=\"' + value + '\">' + icon(options.checkClassName) + ' ' + content + '</a></li>';\n          }).join('') : options.items;\n          $node.html(markup).attr({\n            'aria-label': options.title\n          });\n\n          if (options && options.codeviewKeepButton) {\n            $node.addClass('note-codeview-keep');\n          }\n        });\n        var dialog = renderer.create('<div class=\"modal note-modal\" aria-hidden=\"false\" tabindex=\"-1\" role=\"dialog\"></div>', function ($node, options) {\n          if (options.fade) {\n            $node.addClass('fade');\n          }\n\n          $node.attr({\n            'aria-label': options.title\n          });\n          $node.html(['<div class=\"modal-dialog\">', '<div class=\"modal-content\">', options.title ? '<div class=\"modal-header\">' + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" aria-hidden=\"true\">&times;</button>' + '<h4 class=\"modal-title\">' + options.title + '</h4>' + '</div>' : '', '<div class=\"modal-body\">' + options.body + '</div>', options.footer ? '<div class=\"modal-footer\">' + options.footer + '</div>' : '', '</div>', '</div>'].join(''));\n        });\n        var popover = renderer.create(['<div class=\"note-popover popover in\">', '<div class=\"arrow\"></div>', '<div class=\"popover-content note-children-container\"></div>', '</div>'].join(''), function ($node, options) {\n          var direction = typeof options.direction !== 'undefined' ? options.direction : 'bottom';\n          $node.addClass(direction);\n\n          if (options.hideArrow) {\n            $node.find('.arrow').hide();\n          }\n        });\n        var summernote_bs3_checkbox = renderer.create('<div class=\"checkbox\"></div>', function ($node, options) {\n          $node.html(['<label' + (options.id ? ' for=\"note-' + options.id + '\"' : '') + '>', '<input type=\"checkbox\"' + (options.id ? ' id=\"note-' + options.id + '\"' : ''), options.checked ? ' checked' : '', ' aria-checked=\"' + (options.checked ? 'true' : 'false') + '\"/>', options.text ? options.text : '', '</label>'].join(''));\n        });\n\n        var icon = function icon(iconClassName, tagName) {\n          if (iconClassName.match(/^</)) {\n            return iconClassName;\n          }\n\n          tagName = tagName || 'i';\n          return '<' + tagName + ' class=\"' + iconClassName + '\"></' + tagName + '>';\n        };\n\n        var ui = function ui(editorOptions) {\n          return {\n            editor: editor,\n            toolbar: toolbar,\n            editingArea: editingArea,\n            codable: codable,\n            editable: editable,\n            statusbar: statusbar,\n            airEditor: airEditor,\n            airEditable: airEditable,\n            buttonGroup: buttonGroup,\n            dropdown: dropdown,\n            dropdownButtonContents: dropdownButtonContents,\n            dropdownCheck: dropdownCheck,\n            dialog: dialog,\n            popover: popover,\n            checkbox: summernote_bs3_checkbox,\n            icon: icon,\n            options: editorOptions,\n            palette: function palette($node, options) {\n              return renderer.create('<div class=\"note-color-palette\"></div>', function ($node, options) {\n                var contents = [];\n\n                for (var row = 0, rowSize = options.colors.length; row < rowSize; row++) {\n                  var eventName = options.eventName;\n                  var colors = options.colors[row];\n                  var colorsName = options.colorsName[row];\n                  var buttons = [];\n\n                  for (var col = 0, colSize = colors.length; col < colSize; col++) {\n                    var color = colors[col];\n                    var colorName = colorsName[col];\n                    buttons.push(['<button type=\"button\" class=\"note-color-btn\"', 'style=\"background-color:', color, '\" ', 'data-event=\"', eventName, '\" ', 'data-value=\"', color, '\" ', 'title=\"', colorName, '\" ', 'aria-label=\"', colorName, '\" ', 'data-toggle=\"button\" tabindex=\"-1\"></button>'].join(''));\n                  }\n\n                  contents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');\n                }\n\n                $node.html(contents.join(''));\n\n                if (options.tooltip) {\n                  $node.find('.note-color-btn').tooltip({\n                    container: options.container || editorOptions.container,\n                    trigger: 'hover',\n                    placement: 'bottom'\n                  });\n                }\n              })($node, options);\n            },\n            button: function button($node, options) {\n              return renderer.create('<button type=\"button\" class=\"note-btn btn btn-default btn-sm\" tabindex=\"-1\"></button>', function ($node, options) {\n                if (options && options.tooltip) {\n                  $node.attr({\n                    title: options.tooltip,\n                    'aria-label': options.tooltip\n                  }).tooltip({\n                    container: options.container || editorOptions.container,\n                    trigger: 'hover',\n                    placement: 'bottom'\n                  }).on('click', function (e) {\n                    external_jQuery_default()(e.currentTarget).tooltip('hide');\n                  });\n                }\n\n                if (options && options.codeviewButton) {\n                  $node.addClass('note-codeview-keep');\n                }\n              })($node, options);\n            },\n            toggleBtn: function toggleBtn($btn, isEnable) {\n              $btn.toggleClass('disabled', !isEnable);\n              $btn.attr('disabled', !isEnable);\n            },\n            toggleBtnActive: function toggleBtnActive($btn, isActive) {\n              $btn.toggleClass('active', isActive);\n            },\n            onDialogShown: function onDialogShown($dialog, handler) {\n              $dialog.one('shown.bs.modal', handler);\n            },\n            onDialogHidden: function onDialogHidden($dialog, handler) {\n              $dialog.one('hidden.bs.modal', handler);\n            },\n            showDialog: function showDialog($dialog) {\n              $dialog.modal('show');\n            },\n            hideDialog: function hideDialog($dialog) {\n              $dialog.modal('hide');\n            },\n            createLayout: function createLayout($note) {\n              var $editor = (editorOptions.airMode ? airEditor([editingArea([codable(), airEditable()])]) : editorOptions.toolbarPosition === 'bottom' ? editor([editingArea([codable(), editable()]), toolbar(), statusbar()]) : editor([toolbar(), editingArea([codable(), editable()]), statusbar()])).render();\n              $editor.insertAfter($note);\n              return {\n                note: $note,\n                editor: $editor,\n                toolbar: $editor.find('.note-toolbar'),\n                editingArea: $editor.find('.note-editing-area'),\n                editable: $editor.find('.note-editable'),\n                codable: $editor.find('.note-codable'),\n                statusbar: $editor.find('.note-statusbar')\n              };\n            },\n            removeLayout: function removeLayout($note, layoutInfo) {\n              $note.html(layoutInfo.editable.html());\n              layoutInfo.editor.remove();\n              $note.show();\n            }\n          };\n        };\n\n        external_jQuery_default().summernote = external_jQuery_default().extend(external_jQuery_default().summernote, {\n          ui_template: ui,\n          \"interface\": 'bs3'\n        });\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});\n\n//# sourceURL=webpack:///../node_modules/summernote/dist/summernote.js?");

/***/ })

}]);