/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_dropify_dist_js_dropify_js"],{

/***/ "../node_modules/dropify/dist/js/dropify.js":
/*!**************************************************!*\
  !*** ../node_modules/dropify/dist/js/dropify.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * =============================================================\n * dropify v0.2.1 - Override your input files with style.\n * https://github.com/JeremyFagis/dropify\n *\n * (c) 2017 - Jeremy FAGIS <jeremy@fagis.fr> (http://fagis.fr)\n * =============================================================\n */\n;\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function ($) {\n  var pluginName = \"dropify\";\n  /**\n   * Dropify plugin\n   *\n   * @param {Object} element\n   * @param {Array} options\n   */\n\n  function Dropify(element, options) {\n    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n      return;\n    }\n\n    var defaults = {\n      defaultFile: '',\n      maxFileSize: 0,\n      minWidth: 0,\n      maxWidth: 0,\n      minHeight: 0,\n      maxHeight: 0,\n      showRemove: true,\n      showLoader: true,\n      showErrors: true,\n      errorTimeout: 3000,\n      errorsPosition: 'overlay',\n      imgFileExtensions: ['png', 'jpg', 'jpeg', 'gif', 'bmp'],\n      maxFileSizePreview: \"5M\",\n      allowedFormats: ['portrait', 'square', 'landscape'],\n      allowedFileExtensions: ['*'],\n      messages: {\n        'default': 'Drag and drop a file here or click',\n        'replace': 'Drag and drop or click to replace',\n        'remove': 'Remove',\n        'error': 'Ooops, something wrong happended.'\n      },\n      error: {\n        'fileSize': 'The file size is too big ({{ value }} max).',\n        'minWidth': 'The image width is too small ({{ value }}}px min).',\n        'maxWidth': 'The image width is too big ({{ value }}}px max).',\n        'minHeight': 'The image height is too small ({{ value }}}px min).',\n        'maxHeight': 'The image height is too big ({{ value }}px max).',\n        'imageFormat': 'The image format is not allowed ({{ value }} only).',\n        'fileExtension': 'The file is not allowed ({{ value }} only).'\n      },\n      tpl: {\n        wrap: '<div class=\"dropify-wrapper\"></div>',\n        loader: '<div class=\"dropify-loader\"></div>',\n        message: '<div class=\"dropify-message\"><span class=\"file-icon\" /> <p>{{ default }}</p></div>',\n        preview: '<div class=\"dropify-preview\"><span class=\"dropify-render\"></span><div class=\"dropify-infos\"><div class=\"dropify-infos-inner\"><p class=\"dropify-infos-message\">{{ replace }}</p></div></div></div>',\n        filename: '<p class=\"dropify-filename\"><span class=\"dropify-filename-inner\"></span></p>',\n        clearButton: '<button type=\"button\" class=\"dropify-clear\">{{ remove }}</button>',\n        errorLine: '<p class=\"dropify-error\">{{ error }}</p>',\n        errorsContainer: '<div class=\"dropify-errors-container\"><ul></ul></div>'\n      }\n    };\n    this.element = element;\n    this.input = $(this.element);\n    this.wrapper = null;\n    this.preview = null;\n    this.filenameWrapper = null;\n    this.settings = $.extend(true, defaults, options, this.input.data());\n    this.errorsEvent = $.Event('dropify.errors');\n    this.isDisabled = false;\n    this.isInit = false;\n    this.file = {\n      object: null,\n      name: null,\n      size: null,\n      width: null,\n      height: null,\n      type: null\n    };\n\n    if (!Array.isArray(this.settings.allowedFormats)) {\n      this.settings.allowedFormats = this.settings.allowedFormats.split(' ');\n    }\n\n    if (!Array.isArray(this.settings.allowedFileExtensions)) {\n      this.settings.allowedFileExtensions = this.settings.allowedFileExtensions.split(' ');\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.clearElement = this.clearElement.bind(this);\n    this.onFileReady = this.onFileReady.bind(this);\n    this.translateMessages();\n    this.createElements();\n    this.setContainerSize();\n    this.errorsEvent.errors = [];\n    this.input.on('change', this.onChange);\n  }\n  /**\n   * On change event\n   */\n\n\n  Dropify.prototype.onChange = function () {\n    this.resetPreview();\n    this.readFile(this.element);\n  };\n  /**\n   * Create dom elements\n   */\n\n\n  Dropify.prototype.createElements = function () {\n    this.isInit = true;\n    this.input.wrap($(this.settings.tpl.wrap));\n    this.wrapper = this.input.parent();\n    var messageWrapper = $(this.settings.tpl.message).insertBefore(this.input);\n    $(this.settings.tpl.errorLine).appendTo(messageWrapper);\n\n    if (this.isTouchDevice() === true) {\n      this.wrapper.addClass('touch-fallback');\n    }\n\n    if (this.input.attr('disabled')) {\n      this.isDisabled = true;\n      this.wrapper.addClass('disabled');\n    }\n\n    if (this.settings.showLoader === true) {\n      this.loader = $(this.settings.tpl.loader);\n      this.loader.insertBefore(this.input);\n    }\n\n    this.preview = $(this.settings.tpl.preview);\n    this.preview.insertAfter(this.input);\n\n    if (this.isDisabled === false && this.settings.showRemove === true) {\n      this.clearButton = $(this.settings.tpl.clearButton);\n      this.clearButton.insertAfter(this.input);\n      this.clearButton.on('click', this.clearElement);\n    }\n\n    this.filenameWrapper = $(this.settings.tpl.filename);\n    this.filenameWrapper.prependTo(this.preview.find('.dropify-infos-inner'));\n\n    if (this.settings.showErrors === true) {\n      this.errorsContainer = $(this.settings.tpl.errorsContainer);\n\n      if (this.settings.errorsPosition === 'outside') {\n        this.errorsContainer.insertAfter(this.wrapper);\n      } else {\n        this.errorsContainer.insertBefore(this.input);\n      }\n    }\n\n    var defaultFile = this.settings.defaultFile || '';\n\n    if (defaultFile.trim() !== '') {\n      this.file.name = this.cleanFilename(defaultFile);\n      this.setPreview(this.isImage(), defaultFile);\n    }\n  };\n  /**\n   * Read the file using FileReader\n   *\n   * @param  {Object} input\n   */\n\n\n  Dropify.prototype.readFile = function (input) {\n    if (input.files && input.files[0]) {\n      var reader = new FileReader();\n      var image = new Image();\n      var file = input.files[0];\n      var srcBase64 = null;\n\n      var _this = this;\n\n      var eventFileReady = $.Event(\"dropify.fileReady\");\n      this.clearErrors();\n      this.showLoader();\n      this.setFileInformations(file);\n      this.errorsEvent.errors = [];\n      this.checkFileSize();\n      this.isFileExtensionAllowed();\n\n      if (this.isImage() && this.file.size < this.sizeToByte(this.settings.maxFileSizePreview)) {\n        this.input.on('dropify.fileReady', this.onFileReady);\n        reader.readAsDataURL(file);\n\n        reader.onload = function (_file) {\n          srcBase64 = _file.target.result;\n          image.src = _file.target.result;\n\n          image.onload = function () {\n            _this.setFileDimensions(this.width, this.height);\n\n            _this.validateImage();\n\n            _this.input.trigger(eventFileReady, [true, srcBase64]);\n          };\n        }.bind(this);\n      } else {\n        this.onFileReady(false);\n      }\n    }\n  };\n  /**\n   * On file ready to show\n   *\n   * @param  {Event} event\n   * @param  {Bool} previewable\n   * @param  {String} src\n   */\n\n\n  Dropify.prototype.onFileReady = function (event, previewable, src) {\n    this.input.off('dropify.fileReady', this.onFileReady);\n\n    if (this.errorsEvent.errors.length === 0) {\n      this.setPreview(previewable, src);\n    } else {\n      this.input.trigger(this.errorsEvent, [this]);\n\n      for (var i = this.errorsEvent.errors.length - 1; i >= 0; i--) {\n        var errorNamespace = this.errorsEvent.errors[i].namespace;\n        var errorKey = errorNamespace.split('.').pop();\n        this.showError(errorKey);\n      }\n\n      if (typeof this.errorsContainer !== \"undefined\") {\n        this.errorsContainer.addClass('visible');\n        var errorsContainer = this.errorsContainer;\n        setTimeout(function () {\n          errorsContainer.removeClass('visible');\n        }, this.settings.errorTimeout);\n      }\n\n      this.wrapper.addClass('has-error');\n      this.resetPreview();\n      this.clearElement();\n    }\n  };\n  /**\n   * Set file informations\n   *\n   * @param {File} file\n   */\n\n\n  Dropify.prototype.setFileInformations = function (file) {\n    this.file.object = file;\n    this.file.name = file.name;\n    this.file.size = file.size;\n    this.file.type = file.type;\n    this.file.width = null;\n    this.file.height = null;\n  };\n  /**\n   * Set file dimensions\n   *\n   * @param {Int} width\n   * @param {Int} height\n   */\n\n\n  Dropify.prototype.setFileDimensions = function (width, height) {\n    this.file.width = width;\n    this.file.height = height;\n  };\n  /**\n   * Set the preview and animate it\n   *\n   * @param {String} src\n   */\n\n\n  Dropify.prototype.setPreview = function (previewable, src) {\n    this.wrapper.removeClass('has-error').addClass('has-preview');\n    this.filenameWrapper.children('.dropify-filename-inner').html(this.file.name);\n    var render = this.preview.children('.dropify-render');\n    this.hideLoader();\n\n    if (previewable === true) {\n      var imgTag = $('<img />').attr('src', src);\n\n      if (this.settings.height) {\n        imgTag.css(\"max-height\", this.settings.height);\n      }\n\n      imgTag.appendTo(render);\n    } else {\n      $('<i />').attr('class', 'dropify-font-file').appendTo(render);\n      $('<span class=\"dropify-extension\" />').html(this.getFileType()).appendTo(render);\n    }\n\n    this.preview.fadeIn();\n  };\n  /**\n   * Reset the preview\n   */\n\n\n  Dropify.prototype.resetPreview = function () {\n    this.wrapper.removeClass('has-preview');\n    var render = this.preview.children('.dropify-render');\n    render.find('.dropify-extension').remove();\n    render.find('i').remove();\n    render.find('img').remove();\n    this.preview.hide();\n    this.hideLoader();\n  };\n  /**\n   * Clean the src and get the filename\n   *\n   * @param  {String} src\n   *\n   * @return {String} filename\n   */\n\n\n  Dropify.prototype.cleanFilename = function (src) {\n    var filename = src.split('\\\\').pop();\n\n    if (filename == src) {\n      filename = src.split('/').pop();\n    }\n\n    return src !== \"\" ? filename : '';\n  };\n  /**\n   * Clear the element, events are available\n   */\n\n\n  Dropify.prototype.clearElement = function () {\n    if (this.errorsEvent.errors.length === 0) {\n      var eventBefore = $.Event(\"dropify.beforeClear\");\n      this.input.trigger(eventBefore, [this]);\n\n      if (eventBefore.result !== false) {\n        this.resetFile();\n        this.input.val('');\n        this.resetPreview();\n        this.input.trigger($.Event(\"dropify.afterClear\"), [this]);\n      }\n    } else {\n      this.resetFile();\n      this.input.val('');\n      this.resetPreview();\n    }\n  };\n  /**\n   * Reset file informations\n   */\n\n\n  Dropify.prototype.resetFile = function () {\n    this.file.object = null;\n    this.file.name = null;\n    this.file.size = null;\n    this.file.type = null;\n    this.file.width = null;\n    this.file.height = null;\n  };\n  /**\n   * Set the container height\n   */\n\n\n  Dropify.prototype.setContainerSize = function () {\n    if (this.settings.height) {\n      this.wrapper.height(this.settings.height);\n    }\n  };\n  /**\n   * Test if it's touch screen\n   *\n   * @return {Boolean}\n   */\n\n\n  Dropify.prototype.isTouchDevice = function () {\n    return 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n  };\n  /**\n   * Get the file type.\n   *\n   * @return {String}\n   */\n\n\n  Dropify.prototype.getFileType = function () {\n    return this.file.name.split('.').pop().toLowerCase();\n  };\n  /**\n   * Test if the file is an image\n   *\n   * @return {Boolean}\n   */\n\n\n  Dropify.prototype.isImage = function () {\n    if (this.settings.imgFileExtensions.indexOf(this.getFileType()) != \"-1\") {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n  * Test if the file extension is allowed\n  *\n  * @return {Boolean}\n  */\n\n\n  Dropify.prototype.isFileExtensionAllowed = function () {\n    if (this.settings.allowedFileExtensions.indexOf('*') != \"-1\" || this.settings.allowedFileExtensions.indexOf(this.getFileType()) != \"-1\") {\n      return true;\n    }\n\n    this.pushError(\"fileExtension\");\n    return false;\n  };\n  /**\n   * Translate messages if needed.\n   */\n\n\n  Dropify.prototype.translateMessages = function () {\n    for (var name in this.settings.tpl) {\n      for (var key in this.settings.messages) {\n        this.settings.tpl[name] = this.settings.tpl[name].replace('{{ ' + key + ' }}', this.settings.messages[key]);\n      }\n    }\n  };\n  /**\n   * Check the limit filesize.\n   */\n\n\n  Dropify.prototype.checkFileSize = function () {\n    if (this.sizeToByte(this.settings.maxFileSize) !== 0 && this.file.size > this.sizeToByte(this.settings.maxFileSize)) {\n      this.pushError(\"fileSize\");\n    }\n  };\n  /**\n   * Convert filesize to byte.\n   *\n   * @return {Int} value\n   */\n\n\n  Dropify.prototype.sizeToByte = function (size) {\n    var value = 0;\n\n    if (size !== 0) {\n      var unit = size.slice(-1).toUpperCase(),\n          kb = 1024,\n          mb = kb * 1024,\n          gb = mb * 1024;\n\n      if (unit === 'K') {\n        value = parseFloat(size) * kb;\n      } else if (unit === 'M') {\n        value = parseFloat(size) * mb;\n      } else if (unit === 'G') {\n        value = parseFloat(size) * gb;\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Validate image dimensions and format\n   */\n\n\n  Dropify.prototype.validateImage = function () {\n    if (this.settings.minWidth !== 0 && this.settings.minWidth >= this.file.width) {\n      this.pushError(\"minWidth\");\n    }\n\n    if (this.settings.maxWidth !== 0 && this.settings.maxWidth <= this.file.width) {\n      this.pushError(\"maxWidth\");\n    }\n\n    if (this.settings.minHeight !== 0 && this.settings.minHeight >= this.file.height) {\n      this.pushError(\"minHeight\");\n    }\n\n    if (this.settings.maxHeight !== 0 && this.settings.maxHeight <= this.file.height) {\n      this.pushError(\"maxHeight\");\n    }\n\n    if (this.settings.allowedFormats.indexOf(this.getImageFormat()) == \"-1\") {\n      this.pushError(\"imageFormat\");\n    }\n  };\n  /**\n   * Get image format.\n   *\n   * @return {String}\n   */\n\n\n  Dropify.prototype.getImageFormat = function () {\n    if (this.file.width == this.file.height) {\n      return \"square\";\n    }\n\n    if (this.file.width < this.file.height) {\n      return \"portrait\";\n    }\n\n    if (this.file.width > this.file.height) {\n      return \"landscape\";\n    }\n  };\n  /**\n  * Push error\n  *\n  * @param {String} errorKey\n  */\n\n\n  Dropify.prototype.pushError = function (errorKey) {\n    var e = $.Event(\"dropify.error.\" + errorKey);\n    this.errorsEvent.errors.push(e);\n    this.input.trigger(e, [this]);\n  };\n  /**\n   * Clear errors\n   */\n\n\n  Dropify.prototype.clearErrors = function () {\n    if (typeof this.errorsContainer !== \"undefined\") {\n      this.errorsContainer.children('ul').html('');\n    }\n  };\n  /**\n   * Show error in DOM\n   *\n   * @param  {String} errorKey\n   */\n\n\n  Dropify.prototype.showError = function (errorKey) {\n    if (typeof this.errorsContainer !== \"undefined\") {\n      this.errorsContainer.children('ul').append('<li>' + this.getError(errorKey) + '</li>');\n    }\n  };\n  /**\n   * Get error message\n   *\n   * @return  {String} message\n   */\n\n\n  Dropify.prototype.getError = function (errorKey) {\n    var error = this.settings.error[errorKey],\n        value = '';\n\n    if (errorKey === 'fileSize') {\n      value = this.settings.maxFileSize;\n    } else if (errorKey === 'minWidth') {\n      value = this.settings.minWidth;\n    } else if (errorKey === 'maxWidth') {\n      value = this.settings.maxWidth;\n    } else if (errorKey === 'minHeight') {\n      value = this.settings.minHeight;\n    } else if (errorKey === 'maxHeight') {\n      value = this.settings.maxHeight;\n    } else if (errorKey === 'imageFormat') {\n      value = this.settings.allowedFormats.join(', ');\n    } else if (errorKey === 'fileExtension') {\n      value = this.settings.allowedFileExtensions.join(', ');\n    }\n\n    if (value !== '') {\n      return error.replace('{{ value }}', value);\n    }\n\n    return error;\n  };\n  /**\n   * Show the loader\n   */\n\n\n  Dropify.prototype.showLoader = function () {\n    if (typeof this.loader !== \"undefined\") {\n      this.loader.show();\n    }\n  };\n  /**\n   * Hide the loader\n   */\n\n\n  Dropify.prototype.hideLoader = function () {\n    if (typeof this.loader !== \"undefined\") {\n      this.loader.hide();\n    }\n  };\n  /**\n   * Destroy dropify\n   */\n\n\n  Dropify.prototype.destroy = function () {\n    this.input.siblings().remove();\n    this.input.unwrap();\n    this.isInit = false;\n  };\n  /**\n   * Init dropify\n   */\n\n\n  Dropify.prototype.init = function () {\n    this.createElements();\n  };\n  /**\n   * Test if element is init\n   */\n\n\n  Dropify.prototype.isDropified = function () {\n    return this.isInit;\n  };\n\n  $.fn[pluginName] = function (options) {\n    this.each(function () {\n      if (!$.data(this, pluginName)) {\n        $.data(this, pluginName, new Dropify(this, options));\n      }\n    });\n    return this;\n  };\n\n  return Dropify;\n});\n\n//# sourceURL=webpack:///../node_modules/dropify/dist/js/dropify.js?");

/***/ })

}]);