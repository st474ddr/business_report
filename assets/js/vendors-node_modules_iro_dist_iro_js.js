/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_iro_dist_iro_js"],{

/***/ "../node_modules/iro/dist/iro.js":
/*!***************************************!*\
  !*** ../node_modules/iro/dist/iro.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/*! iro.color.js / The MIT Lisense / (c) 2015-2016 Retorillo */\nvar iro = iro || {\n  version: 'beta1'\n};\n\niro.Color = function (undefined) {\n  var CLSID_COLOR = {};\n\n  function Color() {\n    var _self = this;\n\n    var _useHsv = Color.isClassOf(arguments[0]) ? arguments[0].useHsv : Color.useHsv;\n\n    var _model = Color.models.rgb;\n    var _invalid = [false, false, false];\n    var _updating = false;\n\n    function update(curmodel, reqmodel) {\n      if (_updating) return;\n      if (curmodel === reqmodel) return;\n      if (!_invalid[reqmodel]) return;\n\n      try {\n        _updating = true;\n        var rgb = null;\n\n        switch (curmodel) {\n          case Color.models.hsx:\n            if (_useHsv) rgb = Color.hsv2rgb(_self);else rgb = Color.hsl2rgb(_self);\n            break;\n\n          case Color.models.cmyk:\n            rgb = Color.cmyk2rgb(_self);\n            break;\n\n          case Color.models.rgb:\n            rgb = _self;\n            break;\n        }\n\n        switch (reqmodel) {\n          case Color.models.hsx:\n            if (_useHsv) {\n              var hsv = Color.rgb2hsv(rgb);\n\n              _self.hsv(hsv.h, hsv.s, hsv.v);\n            } else {\n              var hsl = Color.rgb2hsl(rgb);\n\n              _self.hsl(hsl.h, hsl.s, hsl.l);\n            }\n\n            break;\n\n          case Color.models.cmyk:\n            var cmyk = Color.rgb2cmyk(rgb);\n\n            _self.cmyk(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n\n            break;\n\n          case Color.models.rgb:\n            _self.rgb(rgb.r, rgb.g, rgb.b);\n\n            break;\n        }\n\n        _invalid[reqmodel] = false;\n\n        if (!_invalid[Color.models.rgb]) {\n          _self.rgb(rgb.r, rgb.g, rgb.b);\n\n          _invalid[Color.models.rgb] = false;\n        }\n      } finally {\n        _updating = false;\n      }\n    }\n\n    function prop(name, value, model, settings) {\n      var field = settings.limiter(value, settings.max);\n      var locked = false;\n      Object.defineProperty(_self, name, {\n        configurable: true,\n        get: function () {\n          if (locked) throw new Error(['\"', name, '\" is inaccessible'].join(''));\n          if (model != null) update(_model, model);\n          return field;\n        },\n        set: function (value) {\n          if (locked) throw new Error(['\"', name, '\" is inaccessible'].join(''));\n          if (model != null) update(_model, model);\n          field = settings.limiter(value, settings.max);\n          if (model == null || _updating) return;\n\n          for (var c = 0; c < _invalid.length; c++) _invalid[c] = c != model;\n\n          _model = model;\n        }\n      });\n      return {\n        get: function () {\n          return field;\n        },\n        set: function (value) {\n          field = value;\n        },\n        lock: function () {\n          locked = true;\n        },\n        unlock: function () {\n          locked = false;\n        }\n      };\n    }\n\n    var _r = prop('r', 0, Color.models.rgb, Color.settings.r);\n\n    var _g = prop('g', 0, Color.models.rgb, Color.settings.g);\n\n    var _b = prop('b', 0, Color.models.rgb, Color.settings.b);\n\n    var _h = prop('h', 0, Color.models.hsx, Color.settings.h);\n\n    var _s = prop('s', 0, Color.models.hsx, Color.settings.s);\n\n    var _v = prop('v', 0, Color.models.hsx, Color.settings.x);\n\n    var _l = prop('l', 0, Color.models.hsx, Color.settings.x);\n\n    var _c = prop('c', 0, Color.models.cmyk, Color.settings.c);\n\n    var _m = prop('m', 0, Color.models.cmyk, Color.settings.m);\n\n    var _y = prop('y', 0, Color.models.cmyk, Color.settings.y);\n\n    var _k = prop('k', 0, Color.models.cmyk, Color.settings.k);\n\n    var _a = prop('a', 1.0, null, Color.settings.a);\n\n    Object.defineProperty(_self, 'clsid', {\n      get: function () {\n        return CLSID_COLOR;\n      }\n    });\n    Object.defineProperty(_self, 'model', {\n      get: function () {\n        return _model;\n      }\n    });\n    Object.defineProperty(_self, 'useHsv', {\n      get: function () {\n        return _useHsv;\n      },\n      set: function (value) {\n        if (_useHsv && value || !_useHsv && !value) return;\n\n        if (_model != Color.models.hsx) {\n          _invalid[Color.models.hsx] = true;\n\n          if (value) {\n            _v.unlock();\n\n            _l.lock();\n          } else {\n            _l.unlock();\n\n            _v.lock();\n          }\n        } else {\n          if (value) {\n            var hsv = Color.rgb2hsv(this);\n            this.h = hsv.h;\n            this.s = hsv.s;\n\n            _v.unlock();\n\n            this.v = hsv.v;\n\n            _l.lock();\n          } else {\n            var hsl = Color.rgb2hsl(this);\n            this.h = hsl.h;\n            this.s = hsl.s;\n\n            _l.unlock();\n\n            this.l = hsl.l;\n\n            _v.lock();\n          }\n        }\n\n        _useHsv = value;\n      }\n    });\n    if (_useHsv) _l.lock();else _v.lock();\n\n    if (arguments[0] !== undefined) {\n      if (typeof arguments[0] == 'string' && Color.str2format(arguments[0], null) != null) throw Error('\"', arguments[0], '\" is invalid argument');\n      this.css(arguments[0]);\n    }\n\n    this.dump = function () {\n      var dp = function (prop) {\n        return prop.get().toFixed(2);\n      };\n\n      var rgb = [dp(_r), dp(_g), dp(_b)];\n      var cmyk = [dp(_c), dp(_m), dp(_y), dp(_k)];\n      var hsx = this.useHsv ? [dp(_h), dp(_s), dp(_v)] : [dp(_h), dp(_s), dp(_l)];\n      var eq = ' == ';\n      var neq = ' != ';\n      var rgbeq = _invalid[Color.models.rgb] ? neq : eq;\n      var cmykeq = _invalid[Color.models.cmyk] ? neq : eq;\n      var hsxeq = _invalid[Color.models.hsx] ? neq : eq;\n      var hsxlbl = this.useHsv ? 'HSV' : 'HSL';\n      return ['ALPHA', eq, dp(_a), '\\n', 'RGB', rgbeq, rgb.join(', '), '\\n', 'CMYK', cmykeq, cmyk.join(', '), '\\n', hsxlbl, hsxeq, hsx.join(', ')].join('');\n    };\n  }\n\n  Color.epsilon = 1e-12;\n\n  Color.isClassOf = function (obj) {\n    return obj != null && obj.clsid === CLSID_COLOR;\n  };\n\n  Color.useHsv = false;\n  Color.formats = {};\n  Color.formats.rgba = 0;\n  Color.formats.hsla = 1;\n  Color.formats.rgb = 2;\n  Color.formats.hsl = 3;\n  Color.formats.hex = 4;\n  Color.models = {};\n  Color.models.rgb = 0;\n  Color.models.hsx = 1;\n  Color.models.cmyk = 2;\n  Color.limiters = {};\n\n  Color.limiters.circuit = function (v, max) {\n    var r = v % max;\n    if (r < 0) r += max;\n    return r;\n  };\n\n  Color.limiters.linear = function (v, max) {\n    return Math.max(0, Math.min(v, max));\n  };\n\n  Color.settings = {};\n  Color.settings.a = {\n    max: 1,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.r = {\n    max: 255,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.g = {\n    max: 255,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.b = {\n    max: 255,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.h = {\n    max: 360,\n    limiter: Color.limiters.circuit\n  };\n  Color.settings.s = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.x = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.c = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.m = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.y = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.settings.k = {\n    max: 100,\n    limiter: Color.limiters.linear\n  };\n  Color.blends = {};\n\n  Color.blends.normal = function (m, i) {\n    return m;\n  };\n\n  Color.blends.multiply = function (m, i) {\n    return m * i / 255;\n  };\n\n  Color.blends.divide = function (m, i) {\n    return 256 * i / (m + 1);\n  };\n\n  Color.blends.screen = function (m, i) {\n    return 255 - (255 - m) * (255 - i) / 255;\n  };\n\n  Color.blends.overlay = function (m, i) {\n    return i / 255 * (i + 2 * m / 255 * (255 - i));\n  };\n\n  Color.blends.dodge = function (m, i) {\n    return 256 * i / (255 - m + 1);\n  };\n\n  Color.blends.burn = function (m, i) {\n    return 255 - 256 * (255 - i) / (m + 1);\n  };\n\n  Color.blends.hardlight = function (m, i) {\n    if (m > 128) return 255 - (255 - 2 * (m - 128)) * (255 - i) / 256;else return 2 * m * i / 256;\n  };\n\n  Color.blends.softlight = function (m, i) {\n    var r = Color.blends.screen(m, i);\n    return (255 - i) * m * r / 255 * i;\n  };\n\n  Color.blends.difference = function (m, i) {\n    return Math.abs(i - m);\n  };\n\n  Color.blends.add = function (m, i) {\n    return m + i;\n  };\n\n  Color.blends.subtract = function (m, i) {\n    return i - m;\n  };\n\n  Color.blends.darken = function (m, i) {\n    return Math.min(m, i);\n  };\n\n  Color.blends.lighten = function (m, i) {\n    return Math.max(m, i);\n  };\n\n  Color.rgb2hsl = function (rgb) {\n    var r = Color.settings.r.limiter(rgb.r, Color.settings.r.max) / Color.settings.r.max;\n    var g = Color.settings.g.limiter(rgb.g, Color.settings.g.max) / Color.settings.g.max;\n    var b = Color.settings.b.limiter(rgb.b, Color.settings.b.max) / Color.settings.b.max;\n    var M = Math.max(r, g, b);\n    var m = Math.min(r, g, b);\n    var c = M - m;\n    var h;\n    if (c == 0) h = 0;else if (M == r) h = (g - b) / c % 6 / 6;else if (M == g) h = (b - r) / (c * 6) + 1 / 3;else h = (r - g) / (c * 6) + 2 / 3;\n    var l = (M + m) / 2;\n    var s = c == 0 ? 0 : M + m >= 1 ? c / (2 - M - m) : c / (M + m);\n    return {\n      h: Color.settings.h.limiter(h * Color.settings.h.max, Color.settings.h.max),\n      s: Color.settings.s.limiter(s * Color.settings.s.max, Color.settings.s.max),\n      l: Color.settings.x.limiter(l * Color.settings.x.max, Color.settings.s.max)\n    };\n  };\n\n  Color.hsl2rgb = function (hsl) {\n    var h = Color.settings.h.limiter(hsl.h, Color.settings.h.max) / Color.settings.h.max;\n    var s = Color.settings.s.limiter(hsl.s, Color.settings.s.max) / Color.settings.s.max;\n    var l = Color.settings.x.limiter(hsl.l, Color.settings.x.max) / Color.settings.x.max;\n    var c = (1 - Math.abs(2 * l - 1)) * s;\n    var h2 = h * 6;\n    var x = c * (1 - Math.abs(h2 % 2 - 1));\n    var m = l - 0.5 * c;\n    var rgb1 = [m, m, m];\n    var rgb2 = null;\n    if (0 <= h2 && h2 < 1) rgb2 = [c, x, 0];else if (1 <= h2 && h2 < 2) rgb2 = [x, c, 0];else if (2 <= h2 && h2 < 3) rgb2 = [0, c, x];else if (3 <= h2 && h2 < 4) rgb2 = [0, x, c];else if (4 <= h2 && h2 < 5) rgb2 = [x, 0, c];else rgb2 = [c, 0, x];\n    return {\n      r: Color.settings.r.limiter((rgb1[0] + rgb2[0]) * Color.settings.r.max, Color.settings.r.max),\n      g: Color.settings.g.limiter((rgb1[1] + rgb2[1]) * Color.settings.g.max, Color.settings.g.max),\n      b: Color.settings.b.limiter((rgb1[2] + rgb2[2]) * Color.settings.b.max, Color.settings.b.max)\n    };\n  };\n\n  Color.rgb2hsv = function (rgb) {\n    var r = Color.settings.r.limiter(rgb.r, Color.settings.r.max) / Color.settings.r.max;\n    var g = Color.settings.g.limiter(rgb.g, Color.settings.g.max) / Color.settings.g.max;\n    var b = Color.settings.b.limiter(rgb.b, Color.settings.b.max) / Color.settings.b.max;\n    var M = Math.max(r, g, b);\n    var m = Math.min(r, g, b);\n    var c = M - m;\n    var h;\n    if (c == 0) h = 0;else if (M == r) h = (g - b) / c % 6 / 6;else if (M == g) h = (b - r) / (c * 6) + 1 / 3;else h = (r - g) / (c * 6) + 2 / 3;\n    var v = M;\n    var s = v == 0 ? 0 : c / v;\n    return {\n      h: Color.settings.h.limiter(h * Color.settings.h.max, Color.settings.h.max),\n      s: Color.settings.s.limiter(s * Color.settings.s.max, Color.settings.s.max),\n      v: Color.settings.x.limiter(v * Color.settings.x.max, Color.settings.x.max)\n    };\n  };\n\n  Color.hsv2rgb = function (hsv) {\n    var h = Color.settings.h.limiter(hsv.h, Color.settings.h.max) / Color.settings.h.max;\n    var s = Color.settings.s.limiter(hsv.s, Color.settings.s.max) / Color.settings.s.max;\n    var v = Color.settings.x.limiter(hsv.v, Color.settings.x.max) / Color.settings.x.max;\n    var c = v * s;\n    var h2 = 6 * h;\n    var x = c * (1 - Math.abs(h2 % 2 - 1));\n    var m = v - c;\n    var rgb1 = [m, m, m];\n    var rgb2;\n    if (0 <= h2 && h2 < 1) rgb2 = [c, x, 0];else if (1 <= h2 && h2 < 2) rgb2 = [x, c, 0];else if (2 <= h2 && h2 < 3) rgb2 = [0, c, x];else if (3 <= h2 && h2 < 4) rgb2 = [0, x, c];else if (4 <= h2 && h2 < 5) rgb2 = [x, 0, c];else rgb2 = [c, 0, x];\n    return {\n      r: Color.settings.r.limiter((rgb1[0] + rgb2[0]) * Color.settings.r.max, Color.settings.r.max),\n      g: Color.settings.g.limiter((rgb1[1] + rgb2[1]) * Color.settings.g.max, Color.settings.g.max),\n      b: Color.settings.b.limiter((rgb1[2] + rgb2[2]) * Color.settings.b.max, Color.settings.b.max)\n    };\n  };\n\n  Color.rgb2cmyk = function (rgb) {\n    var r = Color.settings.r.limiter(rgb.r, Color.settings.r.max) / Color.settings.r.max;\n    var g = Color.settings.g.limiter(rgb.g, Color.settings.g.max) / Color.settings.g.max;\n    var b = Color.settings.b.limiter(rgb.b, Color.settings.b.max) / Color.settings.b.max;\n    var k = 1 - Math.max(r, g, b);\n    var c = k == 1 ? 0 : (1 - r - k) / (1 - k);\n    var m = k == 1 ? 0 : (1 - g - k) / (1 - k);\n    var y = k == 1 ? 0 : (1 - b - k) / (1 - k);\n    return {\n      c: Color.settings.c.limiter(c * Color.settings.c.max, Color.settings.c.max),\n      m: Color.settings.m.limiter(m * Color.settings.m.max, Color.settings.m.max),\n      y: Color.settings.y.limiter(y * Color.settings.y.max, Color.settings.y.max),\n      k: Color.settings.k.limiter(k * Color.settings.k.max, Color.settings.k.max)\n    };\n  };\n\n  Color.cmyk2rgb = function (cmyk) {\n    var c = Color.settings.c.limiter(cmyk.c, Color.settings.c.max) / Color.settings.c.max;\n    var m = Color.settings.m.limiter(cmyk.m, Color.settings.m.max) / Color.settings.m.max;\n    var y = Color.settings.y.limiter(cmyk.y, Color.settings.y.max) / Color.settings.y.max;\n    var k = Color.settings.k.limiter(cmyk.k, Color.settings.k.max) / Color.settings.k.max;\n    var r = (1 - c) * (1 - k);\n    var g = (1 - m) * (1 - k);\n    var b = (1 - y) * (1 - k);\n    return {\n      r: Color.settings.r.limiter(r * Color.settings.r.max, Color.settings.r.max),\n      g: Color.settings.g.limiter(g * Color.settings.g.max, Color.settings.g.max),\n      b: Color.settings.b.limiter(b * Color.settings.b.max, Color.settings.b.max)\n    };\n  };\n\n  Color.str2format = function (str, fallback) {\n    if (str != null) {\n      str = str.toLowerCase();\n\n      for (var f in Color.formats) if (f == str) return Color.formats[f];\n    }\n\n    if (fallback !== undefined) return fallback;\n    throw new Error(['\"', str, '\" is invalid argument'].join(''));\n  };\n\n  Color.str2blend = function (str, fallback) {\n    if (str != null) {\n      str = str.toLowerCase();\n\n      for (var b in Color.blends) if (b == str) return Color.blends[b];\n    }\n\n    if (fallback !== undefined) return fallback;\n    throw new Error(['\"', str, '\" is invalid argument'].join(''));\n  };\n\n  Color.name = function () {\n    if (arguments.length == 0) {\n      var namelist = [];\n\n      for (var c = 0; c < nameColors.length; c += 2) namelist.push(nameColors[c]);\n\n      return namelist;\n    }\n\n    var name = arguments[0];\n    name = name.toLowerCase();\n\n    if (arguments.length == 1) {\n      for (var c = 0; c < nameColors.length; c += 2) if (nameColors[c] == name) return nameColors[c + 1];\n\n      throw new Error(['\"', name, '\" is invalid color name'].join(''));\n    }\n\n    if (Color.str2format(name, null) != null) throw new Error(['\"', name, '\" cannnot be used for color name.'].join(''));\n    var value = arguments[1];\n    var index = -1;\n\n    for (var c = 0; c < nameColors.length; c += 2) if (nameColors[c] == name) {\n      index = c;\n      break;\n    }\n\n    if (index != -1 && value != null) nameColors[index + 1] = value;else if (index != -1) nameColors.splice(index, 2);else if (value != null) nameColors.push(name, value);\n  };\n\n  Color.prototype.hsl = function () {\n    var args = arguments;\n\n    if (args.length == 0) {\n      if (this.useHsv) {\n        var c = this.clone();\n        c.useHsv = false;\n        return c.hsl();\n      }\n\n      return [this.h, this.s, this.l, this.a];\n    }\n\n    this.useHsv = false;\n    var args = arguments;\n    if (args.length == 0) return [this.h, this.s, this.l, this.a];\n    var array = args.length == 1 ? args[0] instanceof Array ? args[0] : [args[0].h, args[0].s, args[0].l, args[0].a] : args;\n    this.h = array[0];\n    this.s = array[1];\n    this.l = array[2];\n    this.a = array[3] !== undefined ? array[3] : this.a;\n    return this;\n  };\n\n  Color.prototype.hsv = function () {\n    var args = arguments;\n\n    if (args.length == 0) {\n      if (!this.useHsv) {\n        var c = this.clone();\n        c.useHsv = true;\n        return c.hsv();\n      }\n\n      return [this.h, this.s, this.v, this.a];\n    }\n\n    this.useHsv = true;\n    var array = args.length == 1 ? args[0] instanceof Array ? args[0] : [args[0].h, args[0].s, args[0].v, args[0].a] : args;\n    this.h = array[0];\n    this.s = array[1];\n    this.v = array[2];\n    this.a = array[3] !== undefined ? array[3] : this.a;\n    return this;\n  };\n\n  Color.prototype.cmyk = function () {\n    var args = arguments;\n    if (args.length == 0) return [this.c, this.m, this.y, this.k, this.a];\n    var array = args.length == 1 ? args[0] instanceof Array ? args[0] : [args[0].c, args[0].m, args[0].y, args[0].k, args[0].a] : args;\n    this.c = array[0];\n    this.m = array[1];\n    this.y = array[2];\n    this.k = array[3];\n    this.a = array[4] !== undefined ? array[4] : this.a;\n    return this;\n  };\n\n  Color.prototype.rgb = function () {\n    var args = arguments;\n    if (args.length == 0) return [this.r, this.g, this.b, this.a];\n    var array = args.length == 1 ? args[0] instanceof Array ? args[0] : [args[0].r, args[0].g, args[0].b, args[0].a] : args;\n    ;\n    this.r = array[0];\n    this.g = array[1];\n    this.b = array[2];\n    this.a = array[3] !== undefined ? array[3] : this.a;\n    return this;\n  };\n\n  Color.prototype.offset = function (prop, value) {\n    this[prop] += value;\n    return this;\n  };\n\n  Color.prototype.o = Color.prototype.offset;\n\n  Color.prototype.clone = function () {\n    var c = new Color(this);\n    c.useHsv = this.useHsv;\n    return c;\n  };\n\n  Color.prototype.css = function () {\n    var arg = arguments[0];\n\n    if (Color.isClassOf(arg)) {\n      switch (arg.model) {\n        case Color.models.cmyk:\n          this.cmyk(arg);\n          break;\n\n        case Color.models.hsx:\n          this.useHsv ? this.hsv(arg) : this.hsx(arg);\n          break;\n\n        default:\n          this.rgb(arg);\n          break;\n      }\n\n      return this;\n    }\n\n    if (typeof arg == 'string') arg = Color.str2format(arg, arg);\n\n    if (typeof arg == 'string') {\n      var m = /^(rgb|rgba|hsl|hsla)\\((\\d+),(\\d+)%?,(\\d+)%?(?:,(\\d+(?:\\.\\d+)?))?\\)$|^#?([\\da-f]{6}|[\\da-f]{3})$/i.exec(arg.replace(/\\s+/g, ''));\n      if (m == null) return this.css(Color.name(arg));\n      var g = 1;\n      var type = (m[g++] || '').toLowerCase();\n      var nums = [g++, g++, g++, g++];\n      nums.forEach(function (itm, idx) {\n        nums[idx] = m[itm] ? parseFloat(m[itm]) : 1.0;\n      });\n      var hex = m[g++];\n      var hex3 = hex != null && hex.length == 3;\n\n      switch (type) {\n        case 'hsl':\n        case 'hsla':\n          this.hsl(nums[0] / 360 * Color.settings.h.max, nums[1] / 100 * Color.settings.s.max, nums[2] / 100 * Color.settings.x.max, nums[3]);\n          break;\n\n        default:\n          this.rgb((hex ? parseInt(hex3 ? hex[0] + hex[0] : hex.substr(0, 2), 16) : nums[0]) / 255 * Color.settings.r.max, (hex ? parseInt(hex3 ? hex[1] + hex[1] : hex.substr(2, 2), 16) : nums[1]) / 255 * Color.settings.g.max, (hex ? parseInt(hex3 ? hex[2] + hex[2] : hex.substr(4, 2), 16) : nums[2]) / 255 * Color.settings.b.max, nums[3]);\n          break;\n      }\n\n      return this;\n    } else {\n      var value = this;\n      var format = arg;\n\n      if (format && (format === Color.formats.hsla || format === Color.formats.hsl) && this.useHsv) {\n        value = this.clone();\n        value.useHsv = false;\n      }\n\n      var safeone = function (one) {\n        return Math.min(1.0, Math.max(0, one));\n      };\n\n      var safeint = function (one, muliplier) {\n        return Math.round(safeone(one) * muliplier);\n      };\n\n      var r, g, b, h, s, l;\n      var a = safeone(value.a).toFixed(1);\n\n      var computergb = function () {\n        r = safeint(value.r / Color.settings.r.max, 255);\n        g = safeint(value.g / Color.settings.g.max, 255);\n        b = safeint(value.b / Color.settings.b.max, 255);\n      };\n\n      var computehsl = function () {\n        h = safeint(value.h / Color.settings.h.max, 360);\n        s = safeint(value.s / Color.settings.s.max, 100);\n        l = safeint(value.l / Color.settings.x.max, 100);\n      };\n\n      if (arg === undefined && !this.useHsv && this.model == Color.models.hsx) arg = Color.formats.hsla;\n\n      switch (arg) {\n        case Color.formats.hex:\n          computergb();\n          var hex = [r, g, b];\n          hex.forEach(function (v, i) {\n            var v = v.toString(16);\n            hex[i] = v.length == 1 ? 0 + v : v;\n          });\n          hex.splice(0, 0, '#');\n          return hex.join('');\n\n        case Color.formats.hsl:\n          compuehsl();\n          return ['hsl(', [h, s + '%', l + '%'].join(', '), ')'].join('');\n\n        case Color.formats.hsla:\n          computehsl();\n          return ['hsla(', [h, s + '%', l + '%', a].join(', '), ')'].join('');\n\n        case Color.formats.rgb:\n          computergb();\n          return ['rgb(', [r, g, b].join(', '), ')'].join('');\n\n        default:\n          computergb();\n          return ['rgba(', [r, g, b, a].join(', '), ')'].join('');\n      }\n    }\n  };\n\n  Color.prototype.blend = function (color, blend) {\n    if (typeof color == 'string') color = new Color(color);\n    if (blend == null) blend = Color.blends.normal;\n    if (typeof blend == 'string') blend = Color.str2blend(blend);\n    var mr = color.r / Color.settings.r.max;\n    var mg = color.g / Color.settings.g.max;\n    var mb = color.b / Color.settings.b.max;\n    var ma = color.a;\n    var ir = this.r / Color.settings.r.max;\n    var ig = this.g / Color.settings.g.max;\n    var ib = this.b / Color.settings.b.max;\n    var br = blend(mr * 255, ir * 255) / 255;\n    var bg = blend(mg * 255, ig * 255) / 255;\n    var bb = blend(mb * 255, ib * 255) / 255;\n    var or = Math.max(Math.min(br, 1.0), 0.0) * ma + ir * (1 - ma);\n    var og = Math.max(Math.min(bg, 1.0), 0.0) * ma + ig * (1 - ma);\n    var ob = Math.max(Math.min(bb, 1.0), 0.0) * ma + ib * (1 - ma);\n    this.r = Math.max(Math.min(or, 1.0), 0.0) * Color.settings.r.max;\n    this.g = Math.max(Math.min(og, 1.0), 0.0) * Color.settings.g.max;\n    this.b = Math.max(Math.min(ob, 1.0), 0.0) * Color.settings.b.max;\n    return this;\n  };\n\n  Color.prototype.equals = function (color, epsilon) {\n    if (typeof color == 'string') color = new Color(color);\n    if (!Color.isClassOf(color)) return false;\n    var left, right;\n\n    switch (this.model) {\n      case Color.models.cmyk:\n        left = this.cmyk();\n        right = color.cmyk();\n        break;\n\n      case Color.models.hsx:\n        left = this.useHsv ? this.hsv() : this.hsl();\n        right = this.useHsv ? color.hsv() : color.hsl();\n        break;\n\n      default:\n        left = this.rgb();\n        right = color.rgb();\n        break;\n    }\n\n    if (epsilon === undefined) epsilon = Color.epsilon;\n\n    for (var c = 0; c < left.length; c++) if (Math.abs(left[c] - right[c]) > epsilon) return false;\n\n    return true;\n  };\n\n  Color.prototype.toString = function (format) {\n    return this.css(Color.str2format(format, Color.formats.rgba));\n  };\n\n  var nameColors = ['black', '#000000', 'silver', '#c0c0c0', 'gray', '#808080', 'white', '#ffffff', 'maroon', '#800000', 'red', '#ff0000', 'purple', '#800080', 'fuchsia', '#ff00ff', 'green', '#008000', 'lime', '#00ff00', 'olive', '#808000', 'yellow', '#ffff00', 'navy', '#000080', 'blue', '#0000ff', 'teal', '#008080', 'aqua', '#00ffff', 'orange', '#ffa500', 'aliceblue', '#f0f8ff', 'antiquewhite', '#faebd7', 'aquamarine', '#7fffd4', 'azure', '#f0ffff', 'beige', '#f5f5dc', 'bisque', '#ffe4c4', 'blanchedalmond', '#ffe4c4', 'blueviolet', '#8a2be2', 'brown', '#a52a2a', 'burlywood', '#deb887', 'cadetblue', '#5f9ea0', 'chartreuse', '#7fff00', 'chocolate', '#d2691e', 'coral', '#ff7f50', 'cornflowerblue', '#6495ed', 'cornsilk', '#fff8dc', 'crimson', '#dc143c', 'darkblue', '#00008b', 'darkcyan', '#008b8b', 'darkgoldenrod', '#b8860b', 'darkgray', '#a9a9a9', 'darkgreen', '#006400', 'darkgrey', '#a9a9a9', 'darkkhaki', '#bdb76b', 'darkmagenta', '#8b008b', 'darkolivegreen', '#556b2f', 'darkorange', '#ff8c00', 'darkorchid', '#9932cc', 'darkred', '#8b0000', 'darksalmon', '#e9967a', 'darkseagreen', '#8fbc8f', 'darkslateblue', '#483d8b', 'darkslategray', '#2f4f4f', 'darkslategrey', '#2f4f4f', 'darkturquoise', '#00ced1', 'darkviolet', '#9400d3', 'deeppink', '#ff1493', 'deepskyblue', '#00bfff', 'dimgray', '#696969', 'dimgrey', '#696969', 'dodgerblue', '#1e90ff', 'firebrick', '#b22222', 'floralwhite', '#fffaf0', 'forestgreen', '#228b22', 'gainsboro', '#dcdcdc', 'ghostwhite', '#f8f8ff', 'gold', '#ffd700', 'goldenrod', '#daa520', 'greenyellow', '#adff2f', 'grey', '#808080', 'honeydew', '#f0fff0', 'hotpink', '#ff69b4', 'indianred', '#cd5c5c', 'indigo', '#4b0082', 'ivory', '#fffff0', 'khaki', '#f0e68c', 'lavender', '#e6e6fa', 'lavenderblush', '#fff0f5', 'lawngreen', '#7cfc00', 'lemonchiffon', '#fffacd', 'lightblue', '#add8e6', 'lightcoral', '#f08080', 'lightcyan', '#e0ffff', 'lightgoldenrodyellow', '#fafad2', 'lightgray', '#d3d3d3', 'lightgreen', '#90ee90', 'lightgrey', '#d3d3d3', 'lightpink', '#ffb6c1', 'lightsalmon', '#ffa07a', 'lightseagreen', '#20b2aa', 'lightskyblue', '#87cefa', 'lightslategray', '#778899', 'lightslategrey', '#778899', 'lightsteelblue', '#b0c4de', 'lightyellow', '#ffffe0', 'limegreen', '#32cd32', 'linen', '#faf0e6', 'mediumaquamarine', '#66cdaa', 'mediumblue', '#0000cd', 'mediumorchid', '#ba55d3', 'mediumpurple', '#9370db', 'mediumseagreen', '#3cb371', 'mediumslateblue', '#7b68ee', 'mediumspringgreen', '#00fa9a', 'mediumturquoise', '#48d1cc', 'mediumvioletred', '#c71585', 'midnightblue', '#191970', 'mintcream', '#f5fffa', 'mistyrose', '#ffe4e1', 'moccasin', '#ffe4b5', 'navajowhite', '#ffdead', 'oldlace', '#fdf5e6', 'olivedrab', '#6b8e23', 'orangered', '#ff4500', 'orchid', '#da70d6', 'palegoldenrod', '#eee8aa', 'palegreen', '#98fb98', 'paleturquoise', '#afeeee', 'palevioletred', '#db7093', 'papayawhip', '#ffefd5', 'peachpuff', '#ffdab9', 'peru', '#cd853f', 'pink', '#ffc0cb', 'plum', '#dda0dd', 'powderblue', '#b0e0e6', 'rosybrown', '#bc8f8f', 'royalblue', '#4169e1', 'saddlebrown', '#8b4513', 'salmon', '#fa8072', 'sandybrown', '#f4a460', 'seagreen', '#2e8b57', 'seashell', '#fff5ee', 'sienna', '#a0522d', 'skyblue', '#87ceeb', 'slateblue', '#6a5acd', 'slategray', '#708090', 'slategrey', '#708090', 'snow', '#fffafa', 'springgreen', '#00ff7f', 'steelblue', '#4682b4', 'tan', '#d2b48c', 'thistle', '#d8bfd8', 'tomato', '#ff6347', 'turquoise', '#40e0d0', 'violet', '#ee82ee', 'wheat', '#f5deb3', 'whitesmoke', '#f5f5f5', 'yellowgreen', '#9acd32', 'rebeccapurple', '#663399', 'transparent', 'rgba(0,0,0,0)'];\n  return Color;\n}();\n\nif (module && module.exports) {\n  module.exports = {\n    Color: iro.Color\n  };\n}\n\n//# sourceURL=webpack:///../node_modules/iro/dist/iro.js?");

/***/ })

}]);